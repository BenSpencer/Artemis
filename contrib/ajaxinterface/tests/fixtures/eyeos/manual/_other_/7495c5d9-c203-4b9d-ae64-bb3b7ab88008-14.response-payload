lang['Desktop'] = 'Desktop';
lang['Open'] = 'Open';
lang['Rename'] = 'Rename';
lang['Separator'] = 'Separator';
lang['Delete'] = 'Delete';
lang['Download'] = 'Download';
lang['Upload file'] = 'Upload file';
lang['New folder'] = 'New folder';
lang['New simple document'] = 'New simple document';
lang['New document'] = 'New document';
lang['New link'] = 'New link';
lang['Settings'] = 'Settings';
lang['Desktop'] = 'Desktop';
lang['files'] = 'files';
lang['Name'] = 'Name';
lang['Size'] = 'Size';
lang['You can not rename multiple files at once'] = 'You can not rename multiple files at once';
/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.WidgetManager', {
	type: 'singleton',
	extend: qx.core.Object,

	properties: {
		widgets: {
			deferredInit: true
		}
	},
    
	members: {
		loadWidgets: function(checknum) {
			this.checknum = checknum;
			this.setWidgets([]);
			//modified to stackable
			eyeos.callMessage(checknum, 'loadWidgets', null, function(widgets) {
				for(var widgetName in widgets) {
					var isInstalled = (widgets[widgetName].installed === 'true' || widgets[widgetName].installed === true);
					if(isNaN(widgetName) && isInstalled) {
						var widget = eval('new desktop.widget.'+widgetName+'('+checknum+', "'+widgetName+'");');
						widget.setSettings(widgets[widgetName]);
						this.getWidgets().push({
							create: widget.createWidget(),
							widget: widget.getInternalWidget(),
							checknum: checknum,
							title: widget.getTitle(),
							value: widgetName
						});
					}
				}

				var bus = eyeos.messageBus.getInstance();
				//backward compatibility...everyone should use the manager instead of this
				bus.store('widgets', this.getWidgets());
				bus.send('desktop', 'widgetsLoaded');
			}, this);
		},

		addWidget: function(widget) {
			var widget = eval('new desktop.widget.'+widget+'('+this.checknum+', "'+widget+'");');
			widget.setSettings(widget);
			document.widgets.push({
				create: widget.createWidget(),
				widget: widget.getInternalWidget(),
				checknum: this.checknum,
				title: widget.getTitle(),
				value: widget
			});
		},

        getFileMenu: function() {
            var menu = [
                    {
                            label: tr('Open'),
                            image: 'index.php?extern=images/16x16/actions/document-open.png',
                            id: 'openFile()'
                    }, {
                            label: tr('Rename'),
                            image: 'index.php?extern=images/16x16/actions/edit-rename.png',
                            id: 'editFile()'
                    }, {
                            label: tr('Separator'),
                            id: 'separator'
                    }, {
                            label: tr('Delete'),
                            image: 'index.php?extern=images/16x16/actions/edit-delete.png',
                            id: 'deleteFile()'
                    }, {
                            label: tr('Download'),
                            image: 'index.php?extern=images/16x16/actions/edit-paste.png',
                            id: 'downloadFile()'
                    }, {
                            label: tr('Share by URL'),
                            image: 'index.php?extern=images/16x16/categories/applications-internet.png',
                            id: 'shareURLFile()'
                    }
            ];

			return this.processMenu(menu);
		},
		getFolderMenu: function() {
			var menu = [
			{
				label: tr('Open'),
				image: 'index.php?extern=images/16x16/actions/document-open.png',
				id: 'openFile()'
			}, {
				label: tr('Rename'),
				image: 'index.php?extern=images/16x16/actions/edit-rename.png',
				id: 'editFile()'
			}, {
				label: tr('Separator'),
				id: 'separator'
			}, {
				label: tr('Delete'),
				image: 'index.php?extern=images/16x16/actions/edit-delete.png',
				id: 'deleteFile()'
			}
			];

			return this.processMenu(menu);
		},

		getDesktopContextMenu : function() {
			var menu = 	[
			{
				label: tr('Upload file'),
				image: 'index.php?extern=images/16x16/actions/window-new.png',
				id: 'uploadFile()'
			}, {
				label: tr('Separator'),
				id: 'separator'
			}, {
				label: tr('New folder'),
				image: 'index.php?extern=images/16x16/places/folder.png',
				id: 'newFolder()'
			}, {
				label: tr('New simple document'),
				image: 'index.php?extern=images/16x16/mimetypes/text-x-generic.png',
				id: 'newFile(\'txt\')'
			}, {
				label: tr('New document'),
				image: 'index.php?extern=images/16x16/mimetypes/application-msword.png',
				id: 'newFile(\'edoc\')'
			}, {
				label: tr('New link'),
				image: 'index.php?extern=images/16x16/mimetypes/application-x-mswinurl.png',
				id: 'newLink()'
			}, {
				label: tr('Separator'),
				id: 'separator'
			}, {
				label: tr('Settings'),
				image: 'index.php?extern=images/16x16/actions/configure.png',
				id: 'openSettings()'
			}
			];

			return this.processMenu(menu);
		},

		processMenu: function(menu) {
			var borderMenu = new qx.ui.decoration.Single(1, 'solid', '#C3C3C3');
			var omenu = new qx.ui.menu.Menu().set({
				decorator: borderMenu,
				shadow: null,
				padding: 3,
				backgroundColor: '#F3F3F3'
			});

			omenu.addListener('appear', function(e) {
				var opener = this.getOpener();
				if(opener.classname == 'qx.ui.basic.Atom' &&
					(!desktop.SelectionManager.getInstance().hasSelection() || desktop.SelectionManager.getInstance().getSelection().length < 2)) {
					desktop.SelectionManager.getInstance().singleSelect(opener);
				} else if (!(opener.classname == 'qx.ui.basic.Atom')) {
					desktop.SelectionManager.getInstance().clearSelection();
				}
			});
			
			for (var i = 0; i < menu.length; ++i) {
				var item = null;
				if (menu[i].id != 'separator') {
					item = new qx.ui.menu.Button(menu[i].label, menu[i].image);
					item.setUserData('id', menu[i].id);

					item.addListener('appear', function (e) {
						this.setBackgroundColor(null);
						this.setDecorator(null);
						this.setTextColor('#4A4A4A');
					});

					item.addListener('mouseover', function (e) {
						this.setBackgroundColor('#D3D3D3');
						this.setTextColor('#404040');
					});
					item.addListener('mouseout', function (e) {
						this.setDecorator(null);
						this.setBackgroundColor(null);
					});

					item.addListener('execute', function (e) {
						eval('desktop.actionManager.getInstance().'+this.getUserData('id'));
					});
				} else {
					item = new qx.ui.menu.Separator();
				}
				omenu.add(item);
			}

			return omenu;
		},
        
		createDesktopWidgetAlone: function(checknum, files) {
			var dbus = eyeos.messageBus.getInstance();
			var eyeDashBoard = dbus.retrieve('eyeDashBoard');
			var self = this;

			this.checknum = checknum;
			var widget = new eyeos.dashboard.Widget(tr('Desktop'), 'files', 'files', true, checknum).set({
				icon: 'index.php?extern=/images/16x16/apps/system-file-manager.png'
			});

			this.widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Canvas()).set({
				'allowShrinkY': false,
				padding: 5
			});

			this.widgetContainer.setDroppable(true);

			this.widgetContainer.addListener('mousedown', function(e) {
				if(this.selector) {
					this.selector.destroy();
					this.selector = null;
				}
				if(e.getButton() != 'left' || e.getTarget() != this.widgetContainer) {
					return;
				}
				var x = e.getDocumentLeft();
				var y = e.getDocumentTop();
				y = y - 85;
				x = x - 15;
				this.selecting = true;
				this.selector = new qx.ui.container.Composite();
				this.selector.set({
					opacity: 0.1,
					backgroundColor: 'blue',
					width:0,
					height:0,
					marginLeft:x,
					marginTop:y
				});
                
				this.selectorY = y;
				this.selectorX = x;
				this.widgetContainer.add(this.selector);
			}, this);

			this.widgetContainer.addListener('mousemove', function(e) {
				if(this.selecting && this.selector ) {
					var x = e.getDocumentLeft();
					var y = e.getDocumentTop();
					y = y - 85;
					x = x - 15;
					if(x > this.selectorX) {
						this.selector.setWidth(x-this.selectorX);
					} else {
						this.selector.setWidth(this.selectorX-x);
						this.selector.setMarginLeft(x);
					}

					if(y > this.selectorY) {
						this.selector.setHeight(y-this.selectorY);
					} else {
						this.selector.setHeight(this.selectorY-y);
						this.selector.setMarginTop(y);
					}
					desktop.SelectionManager.getInstance().clearSelection();
					var box = new Object();
					if(x > this.selectorX) {
						box.x = this.selectorX;
						box.width = x-this.selectorX;
					} else {
						box.x = x;
						box.width = this.selectorX-x;
					}

					if(y > this.selectorY) {
						box.y = this.selectorY;
						box.height = y-this.selectorY;
					} else {
						box.y = y;
						box.height = this.selectorY-y;
					}

                    var childrens = this.widgetContainer.getChildren();
                    for(var i = 0; i < childrens.length; i++) {
                        if(childrens[i].classname == 'qx.ui.basic.Atom') {
                            var bounds = childrens[i].getBounds();
                            if(parseInt(bounds.top)+parseInt(bounds.height) > box.y
                                && parseInt(bounds.top) < box.y + box.height
                                && parseInt(bounds.left)+parseInt(bounds.width) > box.x
                                && parseInt(bounds.left) < box.x + box.width
                                ) {
                                desktop.SelectionManager.getInstance().addToSelection(childrens[i]);
                            }
                        }
                    }
                } else {
                    if(this.selector) {
                        this.selector.destroy();
                        this.selector = null;
                    }
                }
            }, this);

			this.widgetContainer.addListener('mouseup', function(e) {
				if(!this.controlKeyPressed) {
					desktop.SelectionManager.getInstance().clearSelection();
				}
				if(this.selector) {
					this.selector.destroy();
					var x = e.getDocumentLeft();
					var y = e.getDocumentTop();
					y = y - 85;
					x = x - 15;
					//now, we need to calculate what are the icons inside the box
					//so first, go calculate the box :)

					var box = new Object();
					if(x > this.selectorX) {
						box.x = this.selectorX;
						box.width = x-this.selectorX;
					} else {
						box.x = x;
						box.width = this.selectorX-x;
					}

					if(y > this.selectorY) {
						box.y = this.selectorY;
						box.height = y-this.selectorY;
					} else {
						box.y = y;
						box.height = this.selectorY-y;
					}

                    var childrens = this.widgetContainer.getChildren();
                    for(var i in childrens) {
                        if(childrens[i].classname == 'qx.ui.basic.Atom') {
                            var bounds = childrens[i].getBounds();
                            if(parseInt(bounds.top)+parseInt(bounds.height) > box.y
                                && parseInt(bounds.top) < box.y + box.height
                                && parseInt(bounds.left)+parseInt(bounds.width) > box.x
                                && parseInt(bounds.left) < box.x + box.width
                                ) {
                                desktop.SelectionManager.getInstance().addToSelection(childrens[i]);
                            }
                        }
                    }
                }
                this.selector = null;
                this.selecting = false;
            }, this);

			this.widgetContainer.setContextMenu(this.getDesktopContextMenu());

            this.widgetContainer.addListener('drop', function(e) {
                var dbus = eyeos.messageBus.getInstance();
                var item = e.getRelatedTarget();
                var x = e.getDocumentLeft();
                var y = e.getDocumentTop();
                y = y - 40;
                x = x - 11;
                if(eyeos.files && item.classname == 'eyeos.files.IconViewItem') {
                    //here start the real coupling
                    var selection = item.getManager().returnSelected();
                   
					if(selection && selection.length > 0) {
						var movements = [];
						var paths = [];
						var desktopHeight = this.widgetContainer.getBounds().height;
						for(var i = 0; i < selection.length; i++) {
							item = selection[i];
							if(item.getFile().getPath().charAt(item.getFile().getPath().length-1) != '/') {
								path = item.getFile().getPath()+'/'+item.getFile().getName();
							} else {
								path = item.getFile().getPath()+item.getFile().getName();
							}
							
							
							movements.push([x, y, path]);
							paths.push(path);
							//calculate x and y
							y = y + 80;
							if(y + 70 > desktopHeight) {
								y = 0;
								x = x + 80;
							}
						}

						if (this.__isShareOrWorkgroupFile(path)) {
							eyeos.callMessage(checknum, 'copyFile', ['home://~' + eyeos.getCurrentUserData().name + '/Desktop', path], function(e) {
								for (var i = 0; i < e.length; ++i) {
									this.createInnerContent(this.widgetContainer, e[i], true);
								}
							}, this);
						} else {
							dbus.send('files', 'delete', [item.getFile().getPath(), paths]);
							eyeos.callMessage(checknum, 'moveFileToDesktop', movements, function(e) {
								for(var i in e) {
									this.createInnerContent(this.widgetContainer, e[i], true);
								}
							}, this);
						}
						
					} else {
						path = item.getFile().getPath()+'/'+item.getFile().getName();
						if (this.__isShareOrWorkgroupFile(path)) {
							eyeos.callMessage(checknum, 'copyFile', ['home://~' + eyeos.getCurrentUserData().name + '/Desktop', path], function(e) {
								this.createInnerContent(this.widgetContainer, e[0], true);
							}, this);
						} else {
							dbus.send('files', 'delete', [item.getFile().getPath(), [path]]);
							eyeos.callMessage(checknum, 'moveFileToDesktop', [[x, y, path]], function(e) {
								this.createInnerContent(this.widgetContainer, e[0], true);
							}, this);
						}
					}

				} else {
					if(item.classname == 'qx.ui.menu.Button') {
						//create shortcut
						var appName = item.getUserData('appName');
						eyeos.callMessage(checknum, "createLink", [appName, x , y], function(e){
							eyeos.messageBus.getInstance().send('desktop', 'showDesktopNotification', [tr('New shortcut created in the desktop')]);
							this.createInnerContent(this.widgetContainer, e, true);
						}, this);
					} else {
						var selection = desktop.SelectionManager.getInstance().getSelection();
						if(selection.length > 1) {
							//check if there is a selection!
							var offsetX = x - item.getBounds().left;
							var offsetY = y - item.getBounds().top;
							for(var i = 0; i < selection.length; i++) {
								var bounds = selection[i].getBounds();
								selection[i].setUserBounds(parseInt(bounds.left) + parseInt(offsetX), parseInt(bounds.top) + parseInt(offsetY), 76, 92);
								var path = selection[i].getUserData('path');
								selection[i].setContextMenu(this.getFileMenu());
								eyeos.callMessage(checknum, 'saveIconPosition', [parseInt(bounds.left) + parseInt(offsetX), parseInt(bounds.top) + parseInt(offsetY), path], function(e) {

									}, this);
							}
						} else {
							item.setUserBounds(x, y, 76, 92);
							var path = item.getUserData('path');
							item.setContextMenu(this.getFileMenu());
							eyeos.callMessage(checknum, 'saveIconPosition', [x, y, path], function(e) {

								}, this);
						}
					}
				}

			}, this);


			//the first time it loads, the widget need events waiting for the
			//dashboard to be shown, to be able to get its height and
			//resize himself to fill all the dashboard
			//however, if we switch between desktop and dashboard, with the
			//dashboard loaded, this events will never get fired, and the bounds
			//are already available just here.
			//so, we try to get the bounds, if we are unable, just wait for the events
			var bounds = eyeDashBoard.getBounds();
			if(bounds) {
				self.widgetContainer.setHeight(bounds.height);
			}
			eyeDashBoard.addListener('appear', function(e) {
				var bounds = this.getBounds();
				self.widgetContainer.setHeight(bounds.height);
			});

			eyeDashBoard.addListener('resize', function(e) {
				var bounds = this.getBounds();
				self.widgetContainer.setHeight(bounds.height);
			});

           
			widget.setUserData('container', this.widgetContainer);
			widget.addContent(this.widgetContainer);
			createContent(checknum, 'home://~' + eyeos.getCurrentUserName() + '/Desktop', files);

			function createContent(checknum, path, files) {
				self.widgetContainer.setUserData('path', path);

				if(!files) {
					eyeos.callMessage(
						checknum,
						"__FileSystem_browsePath",
						new Array(path, null, this._browseOptions),
						function (results) {
							self.widgetContainer.removeAll();
							var files = results.files;
							for (var i = 0; i < files.length; ++i) {
								self.createInnerContent(self.widgetContainer, files[i], true);
							}
						});
				} else {
					var items = files.files;
					for (var i = 0; i < items.length; ++i) {
						self.createInnerContent(self.widgetContainer, items[i], true);
					}
				}
			}

			widget.openAndPlace(eyeDashBoard.getFirstContainer(),0);
			widget.toggleBackground();

			dbus.addListener('eyeos_files_new', function (e) {
				var sourcePath = e.getData()[0];
				var newFiles = e.getData()[1];
				if (this.getUserData('path') == sourcePath) {
					self.createInnerContent(this, newFiles, true);
				}
			}, this.widgetContainer);

			dbus.addListener('eyeos_files_rename', function (e) {
				var originalFile = e.getData()[0];
				var newFile = e.getData()[2];

				var widgetChildrens = this.getChildren();

				for (var i = 0; i < widgetChildrens.length; ++i) {
					if(widgetChildrens[i].getUserData('path') == originalFile) {
						var tooltiptext = widgetChildrens[i].getToolTipText();
						tooltiptext = tooltiptext.replace('id="name">'+widgetChildrens[i].getLabel(), 'id="name">'+newFile.name);
						widgetChildrens[i].setToolTipText(tooltiptext);
						widgetChildrens[i].setLabel(newFile.name);
						widgetChildrens[i].setUserData('path',newFile.absolutepath);
					}
				}
			}, this.widgetContainer);

			dbus.addListener('eyeos_file_uploadComplete', function (e) {
				//console.log(e.getData());
				//console.log(this.getUserData('path'));
				//console.log(e.getData().path);
				
				if (this.getUserData('path') == e.getData().path) {
					self.createInnerContent(this, e.getData(), true);
				}
			}, this.widgetContainer);

			dbus.addListener('eyeos_files_delete', function (e) {
				var sourcePath = e.getData()[0];
				var newFiles = e.getData()[1];
				var widgetChildrens = this.getChildren();
				var widgetPaths = new Array();

				for (var i = 0; i < widgetChildrens.length; ++i) {
					widgetPaths.push(widgetChildrens[i].getUserData('path'));
				}

				for (var i = 0; i < newFiles.length; ++i) {
					var index = widgetPaths.indexOf(newFiles[i]);
					if (index != -1 && widgetChildrens[index] != undefined) {
						widgetChildrens[index].destroy();
					}
				}
			}, this.widgetContainer);

			dbus.addListener('eyeos_files_drop', function (e) {
				var files = e.getData()[0];
				var source = e.getData()[1];
				var target = e.getData()[2];
				if(source == 'home://~' + eyeos.getCurrentUserName() + '/Desktop') {
					for (var i = 0; i < files.length; ++i) {
						var widgetChildrens = this.getChildren();
						for (var x = 0; x < widgetChildrens.length; ++x) {
							if(widgetChildrens[x].getUserData('path') == files[i].getAbsolutePath()) {
								widgetChildrens[x].destroy();
							}
						}
					}
				}
			}, this.widgetContainer);

			document.screen.addListener('keydown', function(e) {
				if (e.getKeyIdentifier().toLowerCase() == 'control') {
					this.controlKeyPressed = true;
				}
			}, this);

			document.screen.addListener('keyup', function(e) {
				this.controlKeyPressed = false;
			}, this);

            //create html5 drag and drop area
            document.eyeDesktop.addListener('appear', function(e) {
                var dropbox = document.eyeDesktop.getContentElement().getDomElement();
				if(navigator.appName != 'Opera') {
					dropbox.addEventListener("dragenter", function(evt) {
						var bus = eyeos.messageBus.getInstance();
						var eyePanel = bus.retrieve('eyePanel');
						var domEle = eyePanel.getContainerElement().getDomElement();
						domEle.style.boxShadow = '0 5px 50px 0px blue';
						domEle.style.MozBoxShadow = '0 5px 50px 0px blue';
						domEle.style.webkitBoxShadow = '0 5px 50px 0px blue';
						evt.stopPropagation();
						evt.preventDefault();
					}, false);

					dropbox.addEventListener("dragexit", function(evt) {
						var bus = eyeos.messageBus.getInstance();
						var eyePanel = bus.retrieve('eyePanel');
						var domEle = eyePanel.getContainerElement().getDomElement();
						domEle.style.boxShadow = '0 2px 25px 0px black';
						domEle.style.MozBoxShadow = '0 2px 25px 0px black';
						domEle.style.webkitBoxShadow = '0 2px 25px 0px black';
						evt.stopPropagation();
						evt.preventDefault();
					}, false);
				}

				dropbox.addEventListener("dragover", function(evt) {
					evt.stopPropagation();
					evt.preventDefault();
				}, false);
                
				dropbox.addEventListener("drop", function(evt) {
					var bus = eyeos.messageBus.getInstance();
					if(navigator.appName != 'Opera') {
						var eyePanel = bus.retrieve('eyePanel');
						var domEle = eyePanel.getContainerElement().getDomElement();
						domEle.style.boxShadow = '0 2px 25px 0px black';
						domEle.style.MozBoxShadow = '0 2px 25px 0px black';
						domEle.style.webkitBoxShadow = '0 2px 25px 0px black';
					}
                    evt.stopPropagation();
                    evt.preventDefault();
                    var files = evt.dataTransfer.files;
                    var count = files.length;
                    if(count > 0) {
                       var data = evt.dataTransfer;

						var boundary = '------multipartformboundary' + (new Date).getTime();
						var dashdash = '--';
						var crlf     = '\r\n';

						/* Build RFC2388 string. */
						var builder = '';

						builder += dashdash;
						builder += boundary;
						builder += crlf;

						/* For each dropped file. */
						for (var i = 0; i < data.files.length; i++) {
							var file = data.files[i];
							/* Generate headers. */
							builder += 'Content-Disposition: form-data; name="Filedata[]"';
							if (file.fileName) {
								builder += '; filename="' + file.fileName + '"';
							}
							builder += crlf;

							builder += 'Content-Type: application/octet-stream';
							builder += crlf;
							builder += crlf;

							/* Append binary data. */
							try {
								builder += file.getAsBinary();
							}
							catch (e) {
								alert(tr('Dragging a file from your computer to eyeOS it is only supported in Mozilla Firefox by now'));
								return;
							}
							builder += crlf;

							/* Write boundary. */
							builder += dashdash;
							builder += boundary;
							builder += crlf;
						}
						
						//						builder += 'Content-Disposition: form-data; name="UPLOAD_IDENTIFIER"';
						//						builder += crlf
						//						builder += crlf
						//						builder += 'ID_UPLOAD_HERE';
						//						builder += crlf;
						//						/* Write boundary. */
						//						builder += dashdash;
						//						builder += boundary;
						//						builder += crlf;



						/* Mark end of the request. */
						builder += dashdash;
						builder += boundary;
						builder += dashdash;
						builder += crlf;

						document.uploadDrop = builder;
						document.boundary = boundary;
						eyeos.execute('upload', checknum, ['home:///Desktop/', true]);
					}
				}, false);
			});
			document.screen.activate();
		},

		__isShareOrWorkgroupFile: function (path) {
			if (path.indexOf('workgroup://') != -1) {
				return true;
			}

			var exp = new RegExp(/^home:\/\/~([^_][a-zA-Z0-9 .\-_]{2,40})\/.*$/);
			if (path.match(exp)) {
				var username = RegExp.$1;
				if (username != eyeos.getCurrentUserData().name) {
					return true;
				}
			}
			return false;
		},

		createInnerContent: function (widgetContainer, file, alone) {
			var checknum = this.checknum;
			var imageExtensions = ['JPG', 'JPEG', 'PNG', 'GIF'];
			var videoExtensions = ['FLV'];
			var musicExtensions = ['MP3', 'M4A'];
			var docExtensions = ['EDOC', 'DOC', 'TXT', 'XLS', 'ODS'];
			var zipExtensions = ['ZIP'];
			var image = null;
			var lnk = null;
            
			if (file.type == 'folder') {
				image = 'index.php?extern=images/48x48/places/folder.png';
			} else if (docExtensions.indexOf(file.extension) != -1) {
				image = 'index.php?extern=images/48x48/mimetypes/application-msword.png';
			} else if (imageExtensions.indexOf(file.extension) != -1) {
				image = 'index.php?extern=images/48x48/mimetypes/image-x-generic.png';
			} else if (musicExtensions.indexOf(file.extension) != -1) {
				image = 'index.php?extern=images/48x48/mimetypes/audio-x-generic.png';
			} else if (videoExtensions.indexOf(file.extension) != -1) {
				image = 'index.php?extern=images/48x48/mimetypes/audio-vnd.rn-realvideo.png';
			}else if (zipExtensions.indexOf(file.extension) != -1) {
				image = 'index.php?extern=images/48x48/mimetypes/application-x-gzip.png';
			} else if(file.extension == 'LNK') {
				var info = qx.util.Json.parse(file.content);
				image = info.icon;
				lnk = true;
			} else if(file.extension == 'PDF') {
				image = 'index.php?extern=images/48x48/mimetypes/application-pdf.png';
			}else {
				image = 'index.php?extern=images/48x48/mimetypes/application-x-zerosize.png';
			}

			var name = file.name;
			if(file.extension == 'LNK') {
				name = name.substr(0, name.length-4);
			}

			var size = file.size;
			var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
			var i = 0;
			while(size >= 1024) {
				size /= 1024;
				++i;
			}
			size = size.toFixed(1) + ' ' + units[i];
			// name don't need translation is a filename
			var tooltiptext = "<div>"+tr('Name')+": <b id=\"name\">"+name+"</b></div>";
			tooltiptext += "<div>"+tr('Size')+": <b>"+size+"</b></div>";
			var atom = new qx.ui.basic.Atom(name, image).set({
				'iconPosition': 'top',
				//'font': new qx.bom.Font(12, ['Helvetica', 'Arial', 'Sans-serif']),
				//'textColor': '#FFFFFF',
				//                'width': 76,
				'padding': 5,
				//decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)
				'toolTipText' : tooltiptext
			});

			var label = atom.getChildControl('label');
			label.set({
				allowGrowX: true,
				allowGrowY: true,
				rich: true,
				wrap:true
			});

			if(lnk) {
				atom.setUserData('content', file.content);
			}

			atom.setDraggable(true);
			// atom.setContextMenu(this.getFileMenu());
			if (file.type == 'folder') {
				atom.setContextMenu(this.getFolderMenu());
			} else {
				atom.setContextMenu(this.getFileMenu());
			}

			atom.addListener('dragstart', function(e) {
				var x = e.getDocumentLeft();
				var y = e.getDocumentTop();
				y = y - 30;
				x = x + 1;
				this.clipImage = e.getTarget().clone();
				if(desktop.SelectionManager.getInstance().hasSelection() && desktop.SelectionManager.getInstance().getSelection().length > 1) {
					this.clipImage.setIcon('eyeos/extern/images/48x48/places/document-multiple.png');
					this.clipImage.setLabel(desktop.SelectionManager.getInstance().getSelection().length+ ' ' +tr('files'))
				}
				this.clipImage.setOpacity(0.5);
				document.eyeDesktop.add(this.clipImage);
				this.clipImage.set({
					zIndex: 100003
				});
				this.clipImage.setMarginTop(y);
				this.clipImage.setMarginLeft(x);
				e.stopPropagation();
			}, this);

			atom.addListener('drag', function(e) {
				var x = e.getDocumentLeft();
				var y = e.getDocumentTop();
				y = y - 30;
				x = x + 1;
				this.clipImage.setMarginTop(y);
				this.clipImage.setMarginLeft(x);
			}, this);

			atom.addListener('dragend', function(e) {
				this.clipImage.destroy();
			}, this);

			atom.addListener('drop', function(e) {
				var item = e.getRelatedTarget();
				if (!item) {
					e.stopPropagation();
					return;
				}
				var path = item.getUserData('path');
				var topath = file.absolutepath;
				var dbus = eyeos.messageBus.getInstance();
				//dirname from php.js
				dbus.send('files', 'delete', [path.replace(/\\/g, '/').replace(/\/[^\/]*\/?$/, ''), [path]]);
				eyeos.callMessage(checknum, 'moveFile', [path, topath], function(e) {

					}, this);
				e.stopPropagation();
			}, this);

			if (alone) {
				atom.addListener('appear', function (e) {
					var domele = this.getChildControl('label').getContainerElement().getDomElement();
					domele.childNodes[0].style.fontFamily = 'Arial, Helvetica, Lucida Grande';
					//                    domele.childNodes[0].style.fontSize = '12px';
					domele.childNodes[0].style.textShadow =  '#000000 0px 1px 1px';
					domele.childNodes[0].style.color = '#FFFFFF';
					domele.childNodes[0].style.fontWeight = 'bold';
				});
			}

			atom.setUserData('path', file.absolutepath);
			atom.setUserData('info', file);
			if (file.type == 'folder') {
				atom.setDroppable(true);
				atom.addListener('dblclick', function () {
					eyeos.execute('files', checknum, [this.getUserData('path')]);
				});
			} else {
				var listenerFunction =  function () {
					eyeos.openFile(this.getUserData('path'), checknum);
				};
				atom.addListener('dblclick', listenerFunction);
			}

			//selecting stuff
			atom.addListener('click', function(e) {
				if(!this.controlKeyPressed) {
					desktop.SelectionManager.getInstance().singleSelect(e.getTarget());
				} else {
					desktop.SelectionManager.getInstance().addToSelection(e.getTarget());
				}
			}, this);

			atom.addListener('mousedown', function(e) {
				if(!this.controlKeyPressed) {
					desktop.SelectionManager.getInstance().singleSelect(e.getTarget());
				} else {
					desktop.SelectionManager.getInstance().addToSelection(e.getTarget());
				}
			});

            
			//we need a hack here...because there is nothing draw on the screen, but we need to calculate!
			//so, we are going through dom...
			var h = 0;
			if(document.innerHeight) {
				h=document.innerHeight;
			} else if(document.documentElement.clientHeight) {
				h=document.documentElement.clientHeight;
			} else if(document.body) {
				h=document.body.clientHeight;
			}

			var w = 0;
			if(document.innerWidth) {
				w=document.innerWidth;
			} else if(document.documentElement.clientWidth) {
				w=document.documentElement.clientWidth;
			} else if(document.body) {
				w=document.body.clientWidth;
			}
			w = w-100; //we need some extra space for bars etc
			
			if(file.meta && file.meta.iconPositionY && file.meta.iconPositionX) {
				widgetContainer.add(atom);
				var positionX = file.meta.iconPositionX;
				var positionY = file.meta.iconPositionY;

				if(positionX > w) {
					positionX = w - 90;
				}

				if(positionY > h) {
					positionY = h - 220;
				}
				
				atom.setUserBounds(positionX, positionY, 76, 92);
				atom.setUserData('manualPosition', true);
			} else {
				var childrens = widgetContainer.getChildren();
				var x = 0;
				var y = 0;
				


				


				for(var i in childrens) {
					if(childrens[i].classname == 'qx.ui.basic.Atom') {
						if(!childrens[i].getUserData('manualPosition')) {
							y = y + 102; //92 + 10
							if(y + 150 > h)
							{
								y = 0;
								x = x + 86; //76 + 10
							}
						}
					}
				}

				atom.setUserBounds(x, y, 76, 92);

				widgetContainer.add(atom);
			}
		}
	}
});

qx.Interface.define('desktop.widget.IWidget', {
	members: {
		/**
		 *	This method should implement a manager which, using a switch case,
		 *	should be able to call the appropiate method for this items which
		 *	are declared as 'dynamics' cmd defined in the
		 *	{@see eyeos.ui.genericbar.IItems} extending class.
		 */
		getTitle: function(){}
	}
});
/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.SelectionManager', {
    type: 'singleton',
    extend: qx.core.Object,

    members: {
        singleSelect: function(item) {
            this.clearSelection();

            item.set({
                backgroundColor:'#cccccc'
            });
			
            if(!this.selection) {
                this.selection = [];
            }
            this.selection.push(item);
        },

        clearSelection: function() {
            if(this.selection) {
                for(var i in this.selection) {
					try {
						if(this.selection[i] && this.selection[i].isVisible()) {
							this.selection[i].set({
								backgroundColor:'transparent'
							});
						}
					}
					catch(e) {
						// do nothing
					}
                }
                this.selection = [];
            }

        },

        addToSelection: function(item) {
            item.set({
                backgroundColor:'#cccccc'
            })
            if(!this.selection) {
                this.selection = [];
            }
            this.selection.push(item);
        },

        getSelection: function() {
			if(!this.selection) {
				this.selection = [];
			}
            return this.selection;
        },

        hasSelection: function() {
            if(this.selection && this.selection.length > 0) {
                return true;
            } else {
                return false;
            }
        }
    }
});/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.actionManager', {
    type: 'singleton',
    extend: qx.core.Object,

    properties: {
        checknum: {
            init: null
        }
    },

    members: {
        uploadFile: function() {
			eyeos.execute('upload', this.getChecknum(), ['home:///Desktop/']);
		},

		openFile: function() {
			var selection = desktop.SelectionManager.getInstance().getSelection();
			eyeos.openFiles(selection, this.getChecknum());
		},


		deleteFile: function() {
			var selection = desktop.SelectionManager.getInstance().getSelection();
			var deletedPaths = [];
			for(var i in selection) {
				try {
					deletedPaths.push(selection[i].getUserData('path'));
					selection[i].destroy();
				}
				catch(e) {
					// do nothing
				}
			}
			console.log(deletedPaths);
			var dbus = eyeos.messageBus.getInstance();
			dbus.send('files', 'delete', ['home://~' + eyeos.getCurrentUserName() + '/Desktop', deletedPaths]);
			//now, do the real deletion :)
			eyeos.callMessage(this.getChecknum(), 'deleteFiles', deletedPaths, function(e) {

			}, this);
		},

		downloadFile: function() {
			var selection = desktop.SelectionManager.getInstance().getSelection();
			for(var i in selection) {
				eyeos.execute('download', this.getChecknum(), [selection[i].getUserData('path')]);
			}
			
		},

                shareURLFile: function () {
                   var selection = desktop.SelectionManager.getInstance().getSelection();
                   for(var i in selection) {
                    eyeos.execute('urlshare',  this.getChecknum(),  [selection[i].getUserData('path'),true]);
                   }

                },

		openSettings: function() {
			eyeos.execute('newusersettings', this.getChecknum());
		},

		editFile: function() {
			var selection = desktop.SelectionManager.getInstance().getSelection();
			if(selection.length > 1) {
				alert(tr('You can not rename multiple files at once'));
			}

			var file = selection[0];

			file.getChildControl('label').exclude();
			var textbox = new qx.ui.form.TextField(file.getChildControl('label').getValue());
			textbox.setTextSelection(0, file.getChildControl('label').getValue().lastIndexOf('.'));
			file._add(textbox);
			textbox.focus();

			textbox.setDraggable(true);

			textbox.addListener('dblclick', function(e) {
				e.stopPropagation();
			}, this);

			textbox.addListener('click', function(e) {
				e.stopPropagation();
			}, this);

			textbox.addListener('dragstart', function(e) {
				e.stopPropagation();
			}, this);

			textbox.addListener('dragend', function(e) {
				e.stopPropagation();
			}, this);

			textbox.addListener('drag', function(e) {
				e.stopPropagation();
			}, this);
			var checknum = this.getChecknum();
			var rename = function(e) {
				var element = e.getTarget();
				var oldname = element.getUserData('parent').getUserData('path');
				var newname = element.getValue();
				var parent = element.getUserData('parent');
				if(oldname == 'home://~'+eyeos.getCurrentUserName()+'/Desktop/'+newname) {
					parent.getChildControl('label').show();
					element.destroy();
					return;
				}
				if(newname == "" || !newname) {
					return;
				}
				if(newname == "sun will always shine in japan.txt") {
					eyeos.messageBus.getInstance().send('desktop', 'changeWallpaper', ["image","sys:///extern/images/wallpapers/nature/Fuji.jpg"]);
				}
				eyeos.callMessage(checknum, 'renameFile', [oldname,'home:///Desktop/'+newname], function (results) {
					if(results == "duplicated") {
						parent.getChildControl('label').show();
						element.destroy();
						alert("A file with the same name already exists!");
					} else {
						parent.getChildControl('label').show();
						parent.setLabel(newname);
						parent.setUserData('path', 'home://~'+eyeos.getCurrentUserName()+'/Desktop/'+newname);
						var info = parent.getUserData('info');
						info.absolutepath = 'home://~'+eyeos.getCurrentUserName()+'/Desktop/'+newname;
						parent.setUserData('info', info)
						element.destroy();
					}
				}, this);
			};
			
			textbox.addListener('blur', rename, this);
			textbox.setUserData('parent',file);
			textbox.addListener('keypress', function(e) {
				if (e.getKeyIdentifier().toLowerCase() == 'enter') {
					if(this.getValue()) {
						this.exclude();
					} 
				}
			});
		},

		newFolder: function() {
			eyeos.callMessage(this.getChecknum(), 'createFolder', ['home:///Desktop/New Folder'], function (results) {
				var dBus = eyeos.messageBus.getInstance();
				dBus.send('files', 'new', ['home://~' + eyeos.getCurrentUserName() + '/Desktop', results]);
			}, this);
		},

		newFile: function(param) {
			eyeos.callMessage(this.getChecknum(), 'createFile', ['home:///Desktop/New File.'+param], function (results) {
				var dBus = eyeos.messageBus.getInstance();
				dBus.send('files', 'new', ['home://~' + eyeos.getCurrentUserName() + '/Desktop', results]);
			}, this);
		},

		newLink: function() {
			eyeos.execute('newLink', this.getChecknum(), ['home://~' + eyeos.getCurrentUserName() + '/Desktop']);
		}
	}
});/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.chatManager', {
	type: 'singleton',
	extend: qx.core.Object,

	properties: {
		checknum: {
			init: null
		},
		hasFocus: {
			init: true
		}
	},

	members: {
		registerListeners: function(app) {
			var self = this;
			this.timer = null;
			window.onblur = function(){
				self.setHasFocus(false);
			}

			window.onfocus = function(){
				self.setHasFocus(true);
				clearInterval(self.timer);
				document.title = eyeos.getCurrentUserName() +' @ eyeOS ' + eyeos.version;
			}
			
			this.activeChats = {};
			this.app = app;
			var dbus = eyeos.messageBus.getInstance();
			dbus.addListener('eyeos_chat_requestchat', function (e) {
				if(!this.activeChats[e.getData().getNickname()]) {
					this.createChat(e.getData());
				} else {
			//this.activeChats.focus();
			}
			}, this);

			dbus.addListener('eyeos_chat_message', function (e) {
				var data = qx.util.Json.parse(e.getData());
				var who = data[0];
				//extract user info with CM
				var text = data[1];
				eyeos.contacts.ContactManager.getInstance().getContactsByNicknames([who], function(e) {
					var infoUser = e[0];
					if(!this.activeChats[who]) {
						this.createChat(infoUser, text);
						document.audio.play();
						if(this.getHasFocus()) {
							eyeos.messageBus.getInstance().send('desktop', 'showDesktopNotification', [who + ': ' + text]);
						} else {
							this.oldTitle = eyeos.getCurrentUserName() +' @ eyeOS ' + eyeos.version; //copuling here, there are problems
							//with some browsers getting document.title
							var self = this;
							clearInterval(this.timer);
							this.timer = setInterval(function() {
								if(document.title == self.oldTitle) {
									document.title = who+ ' is messaging you';
								} else {
									document.title = self.oldTitle;
								}
							}, 1000);
						}

					} else {
						if(!this.activeChats[who].isActive() && this.getHasFocus()) {
							document.audio.play();
							eyeos.messageBus.getInstance().send('desktop', 'showDesktopNotification', [who + ': ' + text]);
						}

						if(!this.getHasFocus()) {
							document.audio.play();
							this.oldTitle = eyeos.getCurrentUserName() +' @ eyeOS ' + eyeos.version; //copuling here, there are problems
							clearInterval(this.timer);																	//with some browsers getting document.title
							var self = this;
							this.timer = setInterval(function() {
								if(document.title == self.oldTitle) {
									document.title = who+ ' is messaging you';
								} else {
									document.title = self.oldTitle;
								}
							}, 1000);
						}

						var messagesText = this.activeChats[who].getUserData('messages');
						var safeText = this.htmlEntities(text);
						var exp = /(\b(https?:\/\/|ftp:\/\/|file:\/\/|www\.)[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
						safeText = safeText.replace(exp,"<a target='_new' href='$1'>$1</a>"); 
						safeText = safeText.replace("<a target='_new' href='www", "<a target='_new' href='http://www");
						if(messagesText.getUserData('last') == who) {
							var message = '<div style="color:#222222;padding-left:6px">'+safeText+'</div>';
						} else {
							//change roles!
							//leave a little space between last message
							var message = '<div style="color:#222222;padding-left:6px;padding-top:6px"><strong style="padding-bottom:6px">'+this.htmlEntities(who)+': </strong><div>'+safeText+'</div></div>';
						}
						messagesText.setUserData('last', who);
						messagesText.setValue(messagesText.getValue()+message);
						messagesText.getLayoutParent().getLayoutParent().scrollByY(900000);
					}
				}, this);
			}, this);

			dbus.addListener('eyeos_people_userDisconnected', function (e) {
				var contactName = e.getData().getNickname();

				if (this.activeChats[contactName]) {
					this.disableChat(this.activeChats[contactName]);
				}
			}, this);

			dbus.addListener('eyeos_people_userConnected', function (e) {
				var contactName = e.getData().getNickname();

				if (this.activeChats[contactName]) {
					this.enableChat(this.activeChats[contactName]);
				}
			}, this);
		},

		createChat: function(principal, text) {
			var displayName = principal.getMetadataInstance().getAllMeta()['eyeos.user.firstname'] + ' ' + principal.getMetadataInstance().getAllMeta()['eyeos.user.lastname'];
			var mainWindow = new eyeos.ui.ChatWindow(this.app, tr('Chat with') + ' ' + displayName).set({
				width: 300,
				height: 460,
				layout: new qx.ui.layout.VBox(),
				contentPadding:10
			});
			
			this.activeChats[principal.getNickname()] = mainWindow;
			mainWindow.addListener('beforeClose', function(e) {
				this.activeChats[principal.getNickname()] = null;
			}, this);

			var messagesArea = new qx.ui.container.Composite(new qx.ui.layout.VBox());

			var value = "";
			var messagesText = new qx.ui.basic.Label().set({
				rich: true,
				selectable: true
			});
			mainWindow.setUserData('messages', messagesText);
			mainWindow.setUserData('chatEnabled', true);
			

			if(text) {
				var safeText = this.htmlEntities(text);
				var exp = /(\b(https?:\/\/|ftp:\/\/|file:\/\/|www\.)[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
				safeText = safeText.replace(exp,"<a target='_new' href='$1'>$1</a>"); 
				safeText = safeText.replace("<a target='_new' href='www", "<a target='_new' href='http://www");
				messagesText.setUserData('last', principal.getNickname());
				value += '<div style="color:#222222;padding-left:6px;padding-top:6px"><strong style="padding-bottom:6px">' + this.htmlEntities(principal.getNickname()) + ': </strong><div>' + safeText + '</div></div>';
			}
			messagesText.setValue(value);
			messagesArea.add(messagesText, {
				flex: 1
			});
			var writeArea = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({
				height:50
			});

			var tarea = new qx.ui.form.TextArea();
			mainWindow.setUserData('textArea', tarea);

			var sendButton = new qx.ui.form.Button(tr('Send')).set({
				marginTop:2,
				marginBottom:2,
				shadow:null
			});
			mainWindow.setUserData('sendButton', sendButton)
			var scroller = new qx.ui.container.Scroll(messagesArea).set({
				marginBottom: 7,
				decorator: new qx.ui.decoration.Single(1, 'solid', '#C5C5C5')
			});
			var self = this;
			var sendMessage = function() {
				var origmessage = tarea.getValue();
				tarea.setValue("");
				if(origmessage == "" || mainWindow.getUserData('chatEnabled') == false ) {
					return;
				}
				
				var safeText = self.htmlEntities(origmessage);
				var exp = /(\b(https?:\/\/|ftp:\/\/|file:\/\/|www\.)[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
				safeText = safeText.replace(exp,"<a target='_new' href='$1'>$1</a>");
				safeText = safeText.replace("<a target='_new' href='www", "<a target='_new' href='http://www");
				//first, show it in the messagesArea
				if(messagesText.getUserData('last') == eyeos.getCurrentUserName()) {
					message = '<div style="background-color:#E6E6E6;color:#222222;padding-left:6px">' + safeText + '</div>';
				} else {
					message = '<div style="background-color:#E6E6E6;color:#222222;padding-left:6px;padding-top:6px"><strong style="padding-bottom:6px">' + self.htmlEntities(eyeos.getCurrentUserName()) + ': </strong><div>' + safeText + '</div></div>';
				}
				
				messagesText.setUserData('last', eyeos.getCurrentUserName());
				messagesText.setValue(messagesText.getValue()+message);
				scroller.scrollByY(900000);

				var dest = principal.getId();
				var netSync = eyeos.netSync.NetSync.getInstance();
				var message = new eyeos.netSync.Message({
					type: 'chat',
					name: 'message',
					to: dest,
					data: [eyeos.getCurrentUserName(), origmessage]
				});
				netSync.send(message);
				tarea.focus();
			}
			
			tarea.addListener('keyup', function(e) {
				if (e.getKeyIdentifier() == 'Enter') {
					sendMessage();
				}
			}, this);

			sendButton.addListener('click', sendMessage, this);

			var infoArea = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({
				});

			var userId = eyeos.getCurrentUserData().id;
			var image = new qx.ui.basic.Image('index.php?checknum=' + this.getChecknum() + '&message=__UserInfo_getAvatarPicture&params[userId]='+principal.getId());
			image.set({
				scale: true,
				width: 50,
				height: 50,
				marginRight:4,
				marginBottom:10
			});

			//user part
			var userBox = new qx.ui.container.Composite(new qx.ui.layout.VBox());

			var label = new qx.ui.basic.Label().set({
				value:displayName,
				font: new qx.bom.Font(16, ['Arial']),
				textColor: '#333333'
			});

			this.labelInfo = new qx.ui.basic.Label().set({
				value:'On-line',
				font: new qx.bom.Font(12, ['Arial']),
				textColor: '#6F8E0D',
				marginTop:0
			});

			userBox.add(label);
			userBox.add(this.labelInfo);
			this.userBox = userBox;
			infoArea.add(image);
			infoArea.add(userBox);
			writeArea.add(tarea, {
				flex:1
			});
			writeArea.add(sendButton);
			mainWindow.add(infoArea);
			mainWindow.add(scroller, {
				flex:1
			});
			mainWindow.add(writeArea);
			mainWindow.open();
			tarea.focus();
			
			//size
			scroller.addListener('appear', function(e) {
				var bounds = e.getTarget().getBounds();
				var offset = 2; //2 = 1+1 px border from right and left

				messagesArea.setMinWidth(bounds.width-offset); 
				messagesText.setMinWidth(bounds.width-offset);
			}, this);
			
			scroller.getChildControl('scrollbar-y').addListener('appear', function(e) {
				var bounds = scroller.getBounds();
				var offset = e.getTarget().getBounds().width+2;
				messagesArea.setMinWidth(bounds.width-offset); 
				messagesText.setMinWidth(bounds.width-offset);
			}, this);
			
			scroller.addListener('resize', function(e) {
				var bounds = e.getTarget().getBounds();
				var offset = 2; //2 = 1+1 px border from right and left
				if(e.getTarget().getChildControl('scrollbar-y').getVisibility() == 'visible') {
					offset = e.getTarget().getChildControl('scrollbar-y').getBounds().width+2;
				}
				messagesArea.setMinWidth(bounds.width-offset); 
				messagesText.setMinWidth(bounds.width-offset);
			}, this);
		},

		disableChat: function (chatWindow) {
			if (chatWindow.getUserData('chatEnabled') == true) {
				chatWindow.setUserData('chatEnabled', false);
				var messageArea = chatWindow.getUserData('messages');
				var message = '<div style="color:red"><i>User goes offline</i></div>';
				messageArea.setValue(messageArea.getValue() + message);

				var sendButton = chatWindow.getUserData('sendButton');
				sendButton.setEnabled(false);
				
				this.labelInfo.destroy();
				this.labelInfo = new qx.ui.basic.Label().set({
					value:'Off-line',
					font: new qx.bom.Font(12, ['Arial']),
					textColor: '#999999',
					marginTop:0
				});
				this.userBox.add(this.labelInfo);
			}
			
		},

		enableChat: function (chatWindow) {
			if (chatWindow.getUserData('chatEnabled') == false) {
				chatWindow.setUserData('chatEnabled', true);
				var messageArea = chatWindow.getUserData('messages');
				var message = '<div style="color:green"><i>User is now online</i></div>';
				messageArea.setValue(messageArea.getValue() + message);
				
				var sendButton = chatWindow.getUserData('sendButton');
				sendButton.setEnabled(true);
				
				this.labelInfo.destroy();
				this.labelInfo = new qx.ui.basic.Label().set({
					value:'On-line',
					font: new qx.bom.Font(12, ['Arial']),
					textColor: '#6F8E0D',
					marginTop:0
				});
				this.userBox.add(this.labelInfo);
			}
		},
		htmlEntities: function (text) {
			return text.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
		}

	}
});

qx.Class.define('eyeos.ui.ChatWindow', {
	extend: eyeos.ui.Window,

	/**
	 * @param application {eyeos.system.EyeApplication}
	 * @param caption {String}
	 * @param icon {String}
	 * @param fakeMinimize {Boolean ? false}
	 * @param fakeClose {Boolean ? false}
	 */
	construct: function(application, caption, icon, fakeMinimize, fakeClose) {
		arguments.callee.base.call(this, application, caption, icon, fakeMinimize, fakeClose);
	},

	members: {
		_onClose: function(e) {

		}
	}
});/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.widget.events', {
    extend: qx.core.Object,
    implement: [desktop.widget.IWidget],

    construct: function (checknum, id) {
        this.setChecknum(checknum);
        this.setId(id);
    },

    properties: {
        checknum: {
            init: null
        },
        id: {
           init: null
        },
        settings: {
           init: null
        },
        internalWidget: {
            init:null
        }
    },

    members: {
        settings: null,

        getTitle: function() {
            return "Events";
        },

        createWidget: function() {
            if (this.getSettings() == null) {
                var settings = '';
            } else {
                var settings = this.getSettings();
            }

            var checknum = this.getChecknum();
            var id = this.getId();

             var widget = new eyeos.dashboard.Widget(tr('Events'), id, '', false, checknum).set({
                icon: 'index.php?extern=/images/events/activity_16x16.png'
            });

            if(settings.minimized) {
                widget.toggleMinimize();
            }

            var buttonsLayout = new qx.ui.container.Composite().set({
                layout: new qx.ui.layout.HBox(),
                backgroundColor: '#eeeeee',
                marginTop: 10,
                marginLeft: 10,
                marginRight: 10,
                padding: 3
            });
            widget.addContent(buttonsLayout);

            var widgetScroll = new qx.ui.container.Scroll().set({
                height: 160,
                allowGrowY: false
            });
            widget.addContent(widgetScroll, {
                flex: 1
            });

            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({
                padding: 5
            });

            if (settings && settings.items) {
                var numberOfItems = parseInt(settings.items);
            } else {
                var numberOfItems = 5;
            }

            widget.setUserData('container', widgetContainer);
            widgetScroll.add(widgetContainer);

            var actualButtonSelected = 'All';

            createButtons(checknum);
            createSettingsForm();
            createContent(widgetContainer, actualButtonSelected, numberOfItems);
            addListeners();

            function addListeners() {
                var bus = eyeos.messageBus.getInstance();

                bus.addListener('eyeos_events_newEvent', function() {
                    createContent(widgetContainer, actualButtonSelected, numberOfItems);
                }, this);

                bus.addListener('eyeos_events_updateEvent', function() {
                    createContent(widgetContainer, actualButtonSelected, numberOfItems);
                }, this);
            }

            function createSettingsForm() {
                var form = widget._widgetSettingsPanelForm;
                var itemsLabel = new qx.ui.basic.Label(tr('number of items'));
                form.add(itemsLabel, {
                    row: 0,
                    column: 0
                });

                var itemsSpinner = new qx.ui.form.Spinner(1, numberOfItems, 20);
                form.add(itemsSpinner, {
                    row: 0,
                    column: 1
                });

                form.setUserData('settings_items', itemsSpinner);

                widget._widgetSettingsPanelButtonSave.addListener('execute', function() {
                    var params = new Array();
                    var settings = new Array();

                    settings = {
                        items: widget._widgetSettingsPanelForm.getUserData('settings_items').getValue()
                    };

                    params = {
                        widget: 'events',
                        settings: settings
                    };

                    eyeos.callMessage(checknum, 'saveSettingsWidget', params, function() {
                        numberOfItems = settings['items'];
                        createContent(widgetContainer, null, numberOfItems);
                    });
                });
                widget._widgetSettingsPanelButtonCancel.addListener('execute', function() {
                    itemsSpinner.setValue(numberOfItems);
                });

            }

            function createButtons (checknum) {
                buttonsLayout.removeAll();
                //	decorator rounded all borders
                var borderAll = new qx.ui.decoration.RoundBorderBeveled().set({
                    leftTopR: 3,
                    rightTopR: 3,
                    leftBottomR: 3,
                    rightBottomR: 3
                });

                createButton('All');
                createButton('Pending');
                createButton('Files');
                createButton('People');
                createButton('Groups');

                function createButton (name) {

                    var button = new qx.ui.container.Composite(new qx.ui.layout.HBox(0));
                    button.set({
                        decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)
                    })
                    button.setHeight(18);
                    button.setMaxHeight(18);
                    var buttonLabel = new qx.ui.basic.Label(tr(name));
                    buttonLabel.setPadding(2);
                    buttonLabel.setFont(new qx.bom.Font(11, ["Lucida Grande", "Verdana"]));
                    button.add(buttonLabel);
                    if (actualButtonSelected == name) {
                        button.setBackgroundColor("#61676d");
                        buttonLabel.setTextColor('#ffffff');

                    } else {
                        buttonLabel.setTextColor("#000000");
                        button.addListener("mouseout", function (e) {
                            if (!qx.ui.core.Widget.contains(button, e.getRelatedTarget())) {
                                button.setBackgroundColor("#eeeeee");
                                buttonLabel.setTextColor('#000000');
                            }
                        });
                    }

                    button.addListener("mouseover", function () {
                        button.setBackgroundColor("#61676d");
                        buttonLabel.setTextColor('#ffffff');
                    });

                    button.addListener("click", function () {
                        actualButtonSelected = name;
                        createButtons(checknum);
                        createContent(widgetContainer, actualButtonSelected, numberOfItems);
                    });

                    buttonsLayout.add(button);
                }

                //create clear All button
                buttonsLayout.add(new qx.ui.core.Spacer(), {
                    flex: 1
                });

                var clearAllButton = new qx.ui.container.Composite(new qx.ui.layout.HBox(0));
                clearAllButton.set({
                    decorator: borderAll,
                    alignX: 'right'
                })
                clearAllButton.setHeight(18);
                clearAllButton.setMaxHeight(18);
                var clearAllLabel = new qx.ui.basic.Label(tr("clear"));
                clearAllLabel.setTextColor("#000000");
                clearAllLabel.setPadding(2);
                clearAllLabel.setFont(new qx.bom.Font(11, ["Lucida Grande", "Verdana"]));
                clearAllButton.add(clearAllLabel);
                clearAllButton.addListener("mouseover", function () {
                    clearAllButton.setBackgroundColor("#61676d");
                    clearAllLabel.setTextColor('#ffffff');
                });
                clearAllButton.addListener("mouseout", function (e) {
                    if (!qx.ui.core.Widget.contains(clearAllButton, e.getRelatedTarget())) {
                        clearAllButton.setBackgroundColor("#eeeeee");
                        clearAllLabel.setTextColor('#000000');
                    }
                });

                clearAllButton.addListener("click", function () {
                    var childrens = widgetContainer.getChildren();
                    var arrayItems = new Array();
                    for (var i = 0; i < childrens.length; ++i) {
                        if (childrens[i].getUserData('isQuestion') == 0 || childrens[i].getUserData('hasEnded') == 1) {
                            arrayItems.push(parseInt(childrens[i].getUserData('id')));
                        }
                    }
                    var params = {
                        'id': arrayItems
                    };
                    eyeos.callMessage(checknum,	"__Events_deleteEvents", params, function (results) {
                        createContent(widgetContainer, actualButtonSelected, numberOfItems);
                    });
                }, this);

                buttonsLayout.add(clearAllButton);
            }

            function createContent(widgetContainer, action, numberItems) {
                if (numberItems == null) {
                    numberItems = parseInt(settings.items);
                }
                //delete all items
                widgetContainer.removeAll();

                if (action == null || action == 'All') {
                    var params = {
                        from: 0,
                        to: parseInt(numberItems)
                    };
                    eyeos.callMessage(checknum,	"__Events_retrieveAllEventNotifications", params, function (results) {
                        for (var i = 0; i < results.length; ++i) {
                            createItem(results[i], i);
                        }
                    });
                } else {
                    var params = {
                        from: 0,
                        to: parseInt(numberItems),
                        type: action
                    }
                    eyeos.callMessage(checknum,	"__Events_retrieveAllEventsByType", params, function (results) {
                        for (var i = 0; i < results.length; ++i) {
                            createItem(results[i], i);
                        }
                    });
                }
            }

            function createItem(result, num) {
                var backColor = num%2 == 0 ? '#FFFFFF' : '#F0F0F0';
                var type = result.type;

                type = type.substring(0, type.indexOf('_'));
                var item = new qx.ui.container.Composite().set({
                    layout: new qx.ui.layout.VBox(),
                    marginRight: 5,
                    paddingRight: 5,
                    marginLeft: 5,
                    paddingLeft: 5,
                    paddingBottom: 5,
                    backgroundColor: backColor,
                    alignY: 'middle'
                });
                item.setUserData('id', result.id);
                item.setUserData('availableAnswers', result.availableAnswers);
                item.setUserData('isQuestion', result.isQuestion);
                item.setUserData('hasEnded', result.hasEnded);

                var cmpDate = new qx.ui.container.Composite().set({
                    layout: new qx.ui.layout.HBox()
                });
                var path = 'index.php?extern=images/events/activ_base-12x12.png';
                if (type == 'Files') {
                    path = 'index.php?extern=images/events/activ_files-12x12.png'
                }
                else if (type == 'Dashboard') {
                    path = 'index.php?extern=images/events/activ_dashboard-12x12.png'
                }
                else if (type == 'Applications') {
                    path = 'index.php?extern=images/events/activ_appli-12x12.png'
                }
                else if (type == 'People') {
                    path = 'index.php?extern=images/events/activ_people-12x12.png'
                }
                else if (type == 'Groups') {
                    path = 'index.php?extern=images/events/activ_groups-12x12.png'
                }

                var eventIcon = new qx.ui.basic.Image(path).set({
                    alignY : 'middle',
                    alignX : 'left',
                    paddingLeft : 3,
                    paddingRight : 3,
                    paddingTop : 0
                });
                var dt = new Date(result.creationDate * 1000);
                function checkTime(i)
                {
                    if (i<10)
                    {
                        i="0" + i;
                    }
                    return i;
                }

                var labelDate = new qx.ui.basic.Label().set({
                    value: dt.getDate() + "/" + (dt.getMonth() + 1) + "/" + dt.getFullYear() + " " + dt.getHours() + ":" + checkTime(dt.getMinutes()),
                    rich: false,
                    paddingTop: 3,
                    marginRight: 0,
                    textAlign: 'right',
                    font: new qx.bom.Font(11, ["Lucida Grande", "Verdana"])
                });
                var buttons = new qx.ui.container.Composite(new qx.ui.layout.HBox(10)).set({
                    marginLeft: 20
                });
                if (result.isQuestion && !result.hasEnded) {
                    var actionsButtons = result.availableAnswers.split('#');
                    if (actionsButtons.length > 0) {
                        for (var i = 0; i < actionsButtons.length; ++i) {
                            var text = actionsButtons[i];
                            var button = new qx.ui.form.Button(text).set({
                                paddingTop: 0,
                                paddingBottom: 0,
                                paddingLeft: 2,
                                paddingRight: 2
                            });

                            button.addListener("click", function () {
                                var params = {
                                    id: parseInt(result.id),
                                    answer: this.getLabel()
                                };
                                eyeos.callMessage(checknum,	"__Events_handleAnswer", params, function (results) {
                                    createContent(widgetContainer, name);
                                });
                            });

                            buttons.add(button);
                        }
                    }
                }

                var deleteIcon = new qx.ui.basic.Image('index.php?extern=images/clear.png').set({
                    alignY : 'middle',
                    alignX : 'right',
                    paddingLeft : 3,
                    paddingRight : 0,
                    paddingTop : 0
                });
                deleteIcon.hide();
                deleteIcon.addListener("click", function () {
                    if (result.isQuestion == 0 || result.hasEnded == 1) {
                        var params = {
                            'id' : parseInt(result.id)
                        };
                        eyeos.callMessage(checknum,	"__Events_deleteEvents", params, function (results) {
                            createContent(widgetContainer, actualButtonSelected, numberOfItems);
                        });
                    } else {
                        alert(tr('Can\'t delete the event'));
                    }
                }, this);

                cmpDate.add(eventIcon);
                cmpDate.add(labelDate);
                cmpDate.add(buttons);
                cmpDate.add(new qx.ui.core.Spacer(), {
                    flex: 1
                });
                cmpDate.add(deleteIcon);
                var infoData = qx.util.Json.parse(result.messageInformation);
                var translatedInformation = tr(infoData[0], infoData[1]);
                var labelSubject = new qx.ui.basic.Label().set({
                    value: translatedInformation,
                    rich: false,
                    paddingTop: 3,
                    paddingLeft: 17,
                    //marginRight: 8,
                    font: new qx.bom.Font(11, ["Lucida Grande", "Verdana"])
                });
                item.addListener('mouseover', function () {
                    deleteIcon.show();
                });
                item.addListener('mouseout', function () {
                    deleteIcon.hide();
                });
                item.add(cmpDate);
                item.add(labelSubject);
                widgetContainer.add(item);
            }

            var container = settings.column? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);
            var position = settings.position? parseInt(settings.position) : 0;
            widget.openAndPlace(container, position);

            this.setInternalWidget(widget);
        }
    }
});/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.widget.favorites', {
    extend: qx.core.Object,
    implement: [desktop.widget.IWidget],

    construct: function (checknum, id) {
        this.setChecknum(checknum);
        this.setId(id);
    },

    properties: {
        checknum: {
            init: null
        },
        id: {
           init: null
        },
        settings: {
           init: null
        },
        internalWidget: {
            init:null
        }
    },

    members: {
        settings: null,

        getTitle: function() {
            return "Favorites";
        },

        createWidget: function() {
            if (this.getSettings() == null) {
                var settings = '';
            } else {
                var settings = this.getSettings();
            }

            var checknum = this.getChecknum();
            var id = this.getId();

            var widget = new eyeos.dashboard.Widget(tr('Favorite Applications'), id, '', false, checknum).set({
                icon: 'index.php?extern=/images/16x16/apps/preferences-desktop-default-applications.png'
            });

            if(settings.minimized) {
                widget.toggleMinimize();
            }

            //this.value = value;
            widget.container = new qx.ui.container.Composite(new qx.ui.layout.Flow()).set({
                allowShrinkY: false,
                padding: 5
            });
            widget.addContent(widget.container);

            // in order to avoid qooxdoo bug...
            widget.container.add(new qx.ui.container.Composite().set({
                height: 50,
                allowGrowY: false,
                width: 1,
                allowGrowX: false
            }));

            function createFavoriteItem(appName, displayName, imagePath, father) {
                //				if (item instanceof qx.ui.EyeTaskButtonFavorite) {
                // var appName = item.getLabel();
                var app = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({
                    alignX : 'center',
                    alignY : 'middle',
                    width : 76,
                    height: 76,
                    padding: 5,
                    decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)
                });
                // app.setUserData('realName', item.getRealAppName());
                app.setUserData('realName', displayName);
                // var url = item.getIcon();
                //url = url +'&nocache=' + eyeos.utils.getRandomValue();
                var image = new qx.ui.basic.Image(imagePath).set({
                    width: 48,
                    alignX : 'center',
                    height: 48,
                    allowGrowX: false,
                    allowGrowY: false,
                    margin: 3
                //scale: true
                });
                app.add(image);
                var label = new qx.ui.basic.Label().set({
                    rich: true,
                    value: appName,
                    alignX : 'center',
                    paddingTop: 3,
                    marginRight: 0,
                    textAlign: 'center',
                    font: new qx.bom.Font(11, ['Lucida Grande', 'Verdana'])
                });
                app.add(label);

                app.addListener('dblclick', function() {
                    eyeos.execute(this.getUserData('realName'), checknum);
                });

                app.addListener('mouseover', function () {
                    this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, '#CCCCCC', 1, 5, 5, 5, 5));
                });

                app.addListener('mouseout', function (e) {
                    if (!qx.ui.core.Widget.contains(app, e.getRelatedTarget())) {
                        this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5));
                    }
                });

                father.container.add(app);
            //				}
            }

            if ((this instanceof Object) && (widget instanceof eyeos.dashboard.Widget)) {
                eyeos.callMessage(checknum, 'getFavoriteApplications', '', function (results) {
                    for (var i=0; i < results.length; ++i) {
                        var name = results[i]['name'];
                        var imagePath = results[i]['imagePath'] +'&nocache=' + eyeos.utils.getRandomValue();

                        var appName = results[i]['displayName'];

                        createFavoriteItem(appName, name, imagePath, this);
                    }
                }, widget);
            }


            var dbus = eyeos.messageBus.getInstance();
            dbus.addListener('eyeos_application_toggleFavorite', function (e) {
                var name = e.getData()[0];
                var appRealName = e.getData()[1];
                var isFavorite = e.getData()[2];
                var imagePath = e.getData()[3];

                var items = this.container.getChildren();

                if (!isFavorite) {
                    for (var i = 0; i < items.length; ++i) {
                        if ((items[i] instanceof qx.ui.container.Composite)) {
                            if (items[i].getUserData('realName') == appRealName) {
                                this.container.remove(items[i]);
                            }
                        }
                    }
                } else {
                    createFavoriteItem(name, appRealName, imagePath, this);
                }
            }, widget);

            var container = settings.column? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);
            var position = settings.position? parseInt(settings.position) : 0;
            widget.openAndPlace(container, position);
            
            this.setInternalWidget(widget);
        }
    }
});/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.widget.files', {
    extend: qx.core.Object,
    implement: [desktop.widget.IWidget],

    construct: function (checknum, id) {
        this.setChecknum(checknum);
        this.setId(id);
    },

    properties: {
        checknum: {
            init: null
        },
        id: {
           init: null
        },
        settings: {
           init: null
        },
        internalWidget: {
            init:null
        }
    },

    members: {
        settings: null,

        getTitle: function() {
            return "Files";
        },

        createWidget: function() {

            if (this.getSettings() == null) {
                var settings = '';
            } else {
                var settings = this.getSettings();
            }

            var checknum = this.getChecknum();

            var self = this;

            var widget = new eyeos.dashboard.Widget(tr('Files'), this.getId(), 'files', false, this.getChecknum()).set({
                icon: 'index.php?extern=/images/16x16/apps/system-file-manager.png'
            });

            if(settings.minimized) {
                widget.toggleMinimize();
            }

            var buttonsLayout = new qx.ui.container.Composite().set({
                layout: new qx.ui.layout.HBox(),
                backgroundColor: '#eeeeee',
                marginLeft: 10,
                marginRight: 10,
                marginTop: 10,
                padding: 3
            });
            widget.addContent(buttonsLayout);
            createButtons(checknum);
            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Flow()).set({
                'allowShrinkY': false,
                padding: 5
            });
            widget.setUserData('container', widgetContainer);

            function createButtons (checknum) {
                buttonsLayout.removeAll();
                //	decorator rounded all borders
                var borderAll = new qx.ui.decoration.RoundBorderBeveled().set({
                    leftTopR: 3,
                    rightTopR: 3,
                    leftBottomR: 3,
                    rightBottomR: 3
                });

                createButton(tr('Home'), 'home:///');
                createButton(tr('Documents'), 'home:///Documents');
                createButton(tr('Music'), 'home:///Music');
                createButton(tr('Images'), 'home:///Images');
                //createButton(tr('Shared'), 'path');

                function createButton (name, path) {
                    var selected = 'home';
                    var button = new qx.ui.container.Composite(new qx.ui.layout.HBox(0));
                    button.set({
                        decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)
                    })
                    button.setHeight(18);
                    button.setMaxHeight(18);
                    var buttonLabel = new qx.ui.basic.Label(tr(name));
                    buttonLabel.setPadding(2);
                    buttonLabel.setFont(new qx.bom.Font(11, ["Lucida Grande", "Verdana"]));
                    button.setUserData('path', path);
                    button.add(buttonLabel);
                    if (selected == name) {
                        button.setBackgroundColor("#61676d");
                        buttonLabel.setTextColor('#ffffff');

                    } else {
                        buttonLabel.setTextColor("#000000");
                        button.addListener("mouseout", function (e) {
                            if (!qx.ui.core.Widget.contains(button, e.getRelatedTarget())) {
                                button.setBackgroundColor("#eeeeee");
                                buttonLabel.setTextColor('#000000');
                            }
                        });
                    }

                    button.addListener("mouseover", function () {
                        button.setBackgroundColor("#61676d");
                        buttonLabel.setTextColor('#ffffff');
                    });

                    button.addListener("click", function () {
                        selected = name;
                        createButtons(checknum);
                        createContent(checknum, this.getUserData('path'));
                    });

                    buttonsLayout.add(button);
                }

                //create UPLOAD button
                buttonsLayout.add(new qx.ui.core.Spacer(), {
                    flex: 1
                });

                var uploadButton = new qx.ui.container.Composite(new qx.ui.layout.HBox(0));
                uploadButton.set({
                    decorator: borderAll,
                    alignX: 'right'
                })
                uploadButton.setHeight(18);
                uploadButton.setMaxHeight(18);
                var uploadLabel = new qx.ui.basic.Label(tr("Upload"));
                uploadLabel.setTextColor("#000000");
                uploadLabel.setPadding(2);
                uploadLabel.setFont(new qx.bom.Font(11, ["Lucida Grande", "Verdana"]));
                uploadButton.add(uploadLabel);
                uploadButton.addListener("mouseover", function () {
                    uploadButton.setBackgroundColor("#61676d");
                    uploadLabel.setTextColor('#ffffff');
                });
                uploadButton.addListener("mouseout", function (e) {
                    if (!qx.ui.core.Widget.contains(uploadButton, e.getRelatedTarget())) {
                        uploadButton.setBackgroundColor("#eeeeee");
                        uploadLabel.setTextColor('#000000');
                    }

                });
                uploadButton.addListener("click", function () {
                    eyeos.execute('upload',checknum);
                }, this);

                buttonsLayout.add(uploadButton);
            }


            widget.addContent(widgetContainer);
            createContent(checknum);

            var dbus = eyeos.messageBus.getInstance();

            dbus.addListener('eyeos_files_new', function (e) {
                var sourcePath = e.getData()[0];
                var newFiles = e.getData()[1];
                if (this.getUserData('path') == sourcePath) {
                    self.createInnerContent(this, newFiles, false);
                }
            }, widgetContainer);

            dbus.addListener('eyeos_files_delete', function (e) {
                var sourcePath = e.getData()[0];
                var newFiles = e.getData()[1];
                var widgetChildrens = this.getChildren();
                var widgetPaths = new Array();

                for (var i = 0; i < widgetChildrens.length; ++i) {
                    widgetPaths.push(widgetChildrens[i].getUserData('path'));
                }

                for (var i = 0; i < newFiles.length; ++i) {
                    var index = widgetPaths.indexOf(newFiles[i]);
                    if (index != -1 && widgetChildrens[index] != undefined) {
                        widgetChildrens[index].destroy();
                    }
                }
            }, widgetContainer);

            dbus.addListener('eyeos_files_rename', function (e) {
                var sourcePath = e.getData()[0].replace(/\\/g,'/').replace(/\/[^\/]*\/?$/, '')+'/';
                if (this.getUserData('path') == sourcePath) {
                    eyeos.callMessage(
                        checknum,
                        "__FileSystem_browsePath",
                        new Array(sourcePath, null, this._browseOptions),
                        function (results) {
                            widgetContainer.removeAll();
                            var files = results.files;
                            for (var i = 0; i < files.length; ++i) {
                                self.createInnerContent(widgetContainer, files[i]);
                            }
                        },
                        document.DesktopApplication
                        );
                }
            }, widgetContainer);

            function createContent(checknum, path) {
                if (path == null) {
                    path = 'home://~' + eyeos.getCurrentUserName() + '/';
                }
                widgetContainer.setUserData('path', path);
                eyeos.callMessage(
                    checknum,
                    "__FileSystem_browsePath",
                    new Array(path, null, this._browseOptions),
                    function (results) {
                        widgetContainer.removeAll();
                        var files = results.files;
                        for (var i = 0; i < files.length; ++i) {
                            self.createInnerContent(widgetContainer, files[i]);
                        }
                    },
                    document.DesktopApplication
                    );
            }

            var container = settings.column ? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);
            var position = settings.position? parseInt(settings.position) : 0;
            widget.openAndPlace(container, position);
            this.setInternalWidget(widget);
        },

        createInnerContent: function (widgetContainer, file, alone) {
            var checknum = this.getChecknum();

            var imageExtensions = ['JPG', 'JPEG', 'PNG', 'GIF'];
            var videoExtensions = ['FLV'];
            var musicExtensions = ['MP3', 'M4A'];
            var docExtensions = ['EDOC', 'DOC', 'TXT', 'XLS', 'ODS'];
            var zipExtensions = ['ZIP'];
            var image = null;
            if (file.type == 'folder') {
                image = 'index.php?extern=images/48x48/places/folder.png';
            } else if (docExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/application-msword.png';
            } else if (imageExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/image-x-generic.png';
            } else if (musicExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/audio-x-generic.png';
            } else if (videoExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/audio-vnd.rn-realvideo.png';
            }else if (zipExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/application-x-gzip.png';
            } else if(file.extension == 'LNK') {
                var info = qx.util.Json.parse(file.content);
                image = info.icon;
            }else {
                image = 'index.php?extern=images/48x48/mimetypes/application-x-zerosize.png';
            }
            var name = file.name;
            if(file.extension == 'LNK') {
                name = name.substr(0, name.length-4);
            }
            var atom = new qx.ui.basic.Atom(name, image).set({
                rich: true,
                'iconPosition': 'top',
                //'font': new qx.bom.Font(12, ['Helvetica', 'Arial', 'Sans-serif']),
                //'textColor': '#FFFFFF',
                'width': 76,
                'padding': 5,
                decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)
            });

            if (alone) {
                atom.addListener('appear', function (e) {
                    var domele = this.getChildControl('label').getContainerElement().getDomElement();
                    domele.childNodes[0].style.fontFamily = 'Helvetica';
                    domele.childNodes[0].style.fontSize = '12px';
                    domele.childNodes[0].style.textShadow =  '#000000 0px 0px 1px';
                    domele.childNodes[0].style.color = '#FFFFFF';
                    domele.childNodes[0].style.fontWeight = 'bold';
                });
            }

            //			atom.getChildControl('label').set({
            //				'shadow': new qx.ui.decoration.Single(1, 'solid', '#404040')
            //			});

            atom.setUserData('path', file.absolutepath);
            if (file.type == 'folder') {
                atom.addListener('dblclick', function () {
                    eyeos.execute('files', checknum, [this.getUserData('path')]);
                });
            } else {
                var listenerFunction =  function () {
                    eyeos.openFile(this.getUserData('path'), checknum);
                };
                atom.addListener('dblclick', listenerFunction);
            }
            atom.addListener('mouseover', function () {
                this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, '#CCCCCC', 1, 5, 5, 5, 5));
            });

            atom.addListener('mouseout', function (e) {
                if (!qx.ui.core.Widget.contains(atom, e.getRelatedTarget())) {
                    this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5));
                }
            });
            widgetContainer.add(atom);
        }
    }
});/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.widget.groups', {
    extend: qx.core.Object,
    implement: [desktop.widget.IWidget],

    construct: function (checknum, id) {
        this.setChecknum(checknum);
        this.setId(id);
    },

    properties: {
        checknum: {
            init: null
        },
        id: {
           init: null
        },
        settings: {
           init: null
        },
        internalWidget: {
            init:null
        }
    },

    members: {
        settings: null,

        getTitle: function() {
            return "My Groups";
        },

        createWidget: function() {
            if (this.getSettings() == null) {
                var settings = '';
            } else {
                var settings = this.getSettings();
            }

            var checknum = this.getChecknum();
            var id = this.getId();

            function createMyGroupItem (name, id) {
                // events are quiet out of control right now, we need a totally
                // revision about the events framework, how the components use it,
                // how we manage the Adapters and so on. Right now, it's a quick
                // fix to avoid duplicated events....
                var children = widgetContainer.getChildren();
                for(var foo = 0; foo < children.length; ++foo) {
                    if(children[foo].getUserData('id') == id) {
                        return;
                    }
                }

                var groupName = name;
                var group = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({
                    alignX : 'center',
                    alignY : 'middle',
                    width : 76,
                    height: 76,
                    padding: 5,
                    decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)
                });
                group.setUserData('id', id);
                var image = new qx.ui.basic.Image('index.php?checknum=' + checknum + '&message=__Workgroups_getWorkgroupPicture&params[workgroupId]=' + id + '&refresh=' + new Date().getTime()).set({
                    width: 48,
                    alignX : 'center',
                    height: 48,
                    allowGrowX: false,
                    allowGrowY: false,
                    margin: 3,
                    scale: true
                });
                group.add(image);
                var label = new qx.ui.basic.Label().set({
                    value: groupName,
                    alignX : 'center',
                    rich: false,
                    paddingTop: 3,
                    marginRight: 0,
                    textAlign: 'center',
                    font: new qx.bom.Font(11, ["Lucida Grande", "Verdana"])
                });
                group.add(label);

                group.addListener('mouseover', function () {
                    this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, '#CCCCCC', 1, 5, 5, 5, 5));
                });

                group.addListener("mouseout", function(e) {
                    if (!qx.ui.core.Widget.contains(group, e.getRelatedTarget())) {
                        group.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5));
                    }
                }, this);

                group.addListener("dblclick", function () {
                    eyeos.execute('files', checknum, ['workgroup://~' + groupName], null);
                }, this);

                widgetContainer.add(group);
            }


            var widget = new eyeos.dashboard.Widget(tr('My Groups'), id, '', false, checknum).set({
                icon: 'index.php?extern=/images/16x16/apps/system-users.png'
            });

            if(settings.minimized) {
                widget.toggleMinimize();
            }

            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Flow()).set({
                'allowShrinkY': false,
                padding: 5
            });

            widget.setUserData('container', widgetContainer);
            widget.addContent(widgetContainer);

            /*
				 * Populate Groups
				 */

            eyeos.callMessage(checknum, '__Workgroups_getAllWorkgroupsByUser', {
                includeMeta: 'true'
            }, function (groups) {
                for (var i = 0; i < groups.length; ++i) {
                    if (groups[i].status == eyeos.ui.tabs.GroupAll.STATUS_MEMBER) {
                        createMyGroupItem(groups[i]['workgroup'].name, groups[i]['workgroup'].id);
                    }
                }
            }, this);

            /*
				 * LISTENERS
				 */

            //Adding A Group, eyeos_workgroup_Group
            var bus = eyeos.messageBus.getInstance();

            bus.addListener('eyeos_workgroup_updateGroup', function (e) {
                // removing old widget's element...
                widgetContainer.getChildren().forEach(function(child) {
                    if(child.getUserData('id') == e.getData().id) {
                        widgetContainer.remove(child);
                    }
                }, this);

                // and creating a new one with the updated parameters...
                createMyGroupItem(e.getData().title, e.getData().id);
            }, this);

            bus.addListener('eyeos_workgroup_createGroup', function (e) {
                var name = e.getData()[0];
                var id = e.getData()[1];
                createMyGroupItem(name, id);
            }, this);

            bus.addListener('eyeos_workgroup_joinGroup', function (e) {
                var name = e.getData()[0];
                var id = e.getData()[1];
                createMyGroupItem(name, id);
            }, this);

            bus.addListener('eyeos_workgroup_deleteGroup', function (e) {
                widgetContainer.getChildren().forEach(function(child) {
                    if(child.getUserData('id') == e.getData()) {
                        widgetContainer.remove(child);
                    }
                }, this);
            }, this);

            bus.addListener('eyeos_workgroup_leaveGroup', function (e) {
                widgetContainer.getChildren().forEach(function(child) {
                    if(child.getUserData('id') == e.getData()) {
                        widgetContainer.remove(child);
                    }
                }, this);
            }, this);

            var container = settings.column? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);
            var position = settings.position? parseInt(settings.position) : 0;
            widget.openAndPlace(container, position);
            this.setInternalWidget(widget);
        }
    }
});/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.widget.notes', {
    extend: qx.core.Object,
    implement: [desktop.widget.IWidget],

    construct: function (checknum, id) {
        this.setChecknum(checknum);
        this.setId(id);
    },

    properties: {
        checknum: {
            init: null
        },
        id: {
           init: null
        },
        settings: {
           init: null
        },
        internalWidget: {
            init:null
        }
    },

    members: {
        settings: null,

        getTitle: function() {
            return "Notes";
        },

        createWidget: function() {
            if (this.getSettings() == null) {
                var settings = '';
            } else {
                var settings = this.getSettings();
            }

            var checknum = this.getChecknum();
            var id = this.getId();

            var widget = new eyeos.dashboard.Widget(tr('Notes'), id, 'notepad', false, checknum).set({
                icon: 'index.php?extern=/images/16x16/apps/basket.png'
            });

            if(settings.minimized) {
                widget.toggleMinimize();
            }

            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Grow()).set({
                height: 150
            });

            widget.setUserData('container', widgetContainer);
            widget.addContent(widgetContainer);

            var content = '';
            var richWidget = new qx.ui.form.TextArea(content);
            eyeos.callMessage(checknum, 'readNotesWidget', '', function (results) {
                content = results;
                richWidget.setValue(results);
            });

            richWidget.set({
                decorator: new qx.ui.decoration.Single(1, 'solid', '#A4A4A4').set({
                    styleTop: null,
                    styleRight: null,
                    styleLeft: null,
                    styleBottom: null
                }),
                backgroundColor: 'white',
                padding: 10
            });
            var notesTimer = new qx.event.Timer(3000);
            notesTimer.addListener('interval', function(e) {
                notesTimer.stop();
                eyeos.callMessage(checknum, 'writeNotesWidget', richWidget.getValue(), function (results) {
                    });
            });
            richWidget.addListener('input', function(e) {
                notesTimer.restart();
            });
            widgetContainer.add(richWidget);

            var container = settings.column? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);
            var position = settings.position? parseInt(settings.position) : 0;
            widget.openAndPlace(container, position);
            
            this.setInternalWidget(widget);
        }
    }
});/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

qx.Class.define('desktop.widget.desktop', {
    extend: qx.core.Object,
    implement: [desktop.widget.IWidget],

    construct: function (checknum, id) {
        this.setChecknum(checknum);
        this.setId(id);
    },

    properties: {
        checknum: {
            init: null
        },
        id: {
           init: null
        },
        settings: {
           init: null
        },
        internalWidget: {
            init:null
        }
    },

    members: {
        settings: null,
        
        getTitle: function() {
            return "Desktop";
        },

        createWidget: function() {
            var widget = new eyeos.dashboard.Widget(tr('Desktop'), this.getId(), 'files', false, this.getChecknum()).set({
                icon: 'index.php?extern=/images/16x16/apps/system-file-manager.png'
            });

            widget.setExecuteFullAppParameters(new Array("home://~root/Desktop"));

            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Flow()).set({
                'allowShrinkY': false,
                padding: 5
            });
            widget.setUserData('container', widgetContainer);
            widget.addContent(widgetContainer);
            var path = 'home://~' + eyeos.getCurrentUserName() + '/Desktop';

            widgetContainer.setUserData('path', path);
            eyeos.callMessage(
                this.getChecknum(),
                "__FileSystem_browsePath",
                new Array(path, null, this._browseOptions), //???????????
                function (results) {
                    widgetContainer.removeAll();
                    var files = results.files;
                    for (var i = 0; i < files.length; ++i) {
                        this.createInnerContent(widgetContainer, files[i], false);
                    }
            }, this);

            var dbus = eyeos.messageBus.getInstance();
            var self = this;

            dbus.addListener('eyeos_files_new', function (e) {
                var sourcePath = e.getData()[0];
                var newFiles = e.getData()[1];
                if (this.getUserData('path') == sourcePath) {
                    self.createInnerContent(this, newFiles, false);
                }
            }, widgetContainer);

            dbus.addListener('eyeos_files_delete', function (e) {
                var sourcePath = e.getData()[0];
                var newFiles = e.getData()[1];
                var widgetChildrens = this.getChildren();
                var widgetPaths = new Array();

                for (var i = 0; i < widgetChildrens.length; ++i) {
                    widgetPaths.push(widgetChildrens[i].getUserData('path'));
                }

                for (var i = 0; i < newFiles.length; ++i) {
                    var index = widgetPaths.indexOf(newFiles[i]);
                    if (index != -1 && widgetChildrens[index] != undefined) {
                        widgetChildrens[index].destroy();
                    }
                }
            }, widgetContainer);

            widget.openAndPlace(document.eyeDashBoard.getFirstContainer(), 0);
            this.setInternalWidget(widget);
        },

        createInnerContent: function (widgetContainer, file, alone) {
            var checknum = this.getChecknum();
            var imageExtensions = ['JPG', 'JPEG', 'PNG', 'GIF'];
            var videoExtensions = ['FLV'];
            var musicExtensions = ['MP3', 'M4A'];
            var docExtensions = ['EDOC', 'DOC', 'TXT', 'XLS', 'ODS'];
            var zipExtensions = ['ZIP'];
            var image = null;
            if (file.type == 'folder') {
                image = 'index.php?extern=images/48x48/places/folder.png';
            } else if (docExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/application-msword.png';
            } else if (imageExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/image-x-generic.png';
            } else if (musicExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/audio-x-generic.png';
            } else if (videoExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/audio-vnd.rn-realvideo.png';
            }else if (zipExtensions.indexOf(file.extension) != -1) {
                image = 'index.php?extern=images/48x48/mimetypes/application-x-gzip.png';
            } else if(file.extension == 'LNK') {
                var info = qx.util.Json.parse(file.content);
                image = info.icon;
            }else {
                image = 'index.php?extern=images/48x48/mimetypes/application-x-zerosize.png';
            }
            var name = file.name;
            if(file.extension == 'LNK') {
                name = name.substr(0, name.length-4);
            }
            var atom = new qx.ui.basic.Atom(name, image).set({
                rich: true,
                'iconPosition': 'top',
                //'font': new qx.bom.Font(12, ['Helvetica', 'Arial', 'Sans-serif']),
                //'textColor': '#FFFFFF',
                'width': 76,
                'padding': 5,
                decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)
            });

            if (alone) {
                atom.addListener('appear', function (e) {
                    var domele = this.getChildControl('label').getContainerElement().getDomElement();
                    domele.childNodes[0].style.fontFamily = 'Helvetica';
                    domele.childNodes[0].style.fontSize = '12px';
                    domele.childNodes[0].style.textShadow =  '#000000 0px 0px 1px';
                    domele.childNodes[0].style.color = '#FFFFFF';
                    domele.childNodes[0].style.fontWeight = 'bold';
                });
            }

            //			atom.getChildControl('label').set({
            //				'shadow': new qx.ui.decoration.Single(1, 'solid', '#404040')
            //			});

            atom.setUserData('path', file.absolutepath);
            if (file.type == 'folder') {
                atom.addListener('dblclick', function () {
                    eyeos.execute('files', checknum, [this.getUserData('path')]);
                });
            } else {
                var listenerFunction =  function () {
                    eyeos.openFile(this.getUserData('path'), checknum);
                };
                atom.addListener('dblclick', listenerFunction);
            }
            atom.addListener('mouseover', function () {
                this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, '#CCCCCC', 1, 5, 5, 5, 5));
            });

            atom.addListener('mouseout', function (e) {
                if (!qx.ui.core.Widget.contains(atom, e.getRelatedTarget())) {
                    this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5));
                }
            });
            widgetContainer.add(atom);
        }
    }
});
/*
*                 eyeos - The Open Source Cloud's Web Desktop
*                               Version 2.0
*                   Copyright (C) 2007 - 2010 eyeos Team
*
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Affero General Public License version 3 as published by the
* Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
* details.
*
* You should have received a copy of the GNU Affero General Public License
* version 3 along with this program in the file "LICENSE".  If not, see
* <http://www.gnu.org/licenses/agpl-3.0.txt>.
*
* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org
*
* The interactive user interfaces in modified source and object code versions
* of this program must display Appropriate Legal Notices, as required under
* Section 5 of the GNU Affero General Public License version 3.
*
* In accordance with Section 7(b) of the GNU Affero General Public License version 3,
* these Appropriate Legal Notices must retain the display of the "Powered by
* eyeos" logo and retain the original copyright notice. If the display of the
* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices
* must display the words "Powered by eyeos" and retain the original copyright notice.
*/

function desktop_application(checknum, pid, args) {
    var application = new eyeos.application.Desktop(checknum, pid);
    application.initApplication(checknum, args);

    tinyMCE_GZ.init({
        theme: 'advanced',
        plugins: 'table, safari, spellchecker, searchreplace, noneditable',
        languages : 'en',
        disk_cache : true,
        debug : false
    }, function () {
        tinyMCE.init({
            strict_loading_mode : true,
            theme: 'advanced',
            plugins: 'table, safari, spellchecker, searchreplace, noneditable',
            spellchecker_languages : '+English=en',
            theme_advanced_buttons1 : "",
            theme_advanced_buttons2 : "",
            theme_advanced_buttons3 : "",
            theme_advanced_buttons3_add : 'tablecontrols',
            preformatted : true,
            fix_table_elements: 0
        });
    });

	//load audio files
	document.audio = document.createElement('audio');
	document.audio.setAttribute('src', 'eyeos/extern/chat.ogg');
}

qx.Class.define('eyeos.application.Desktop', {
    extend: eyeos.system.EyeApplication,

    construct: function (checknum, pid) {
        arguments.callee.base.call(this, 'desktop', checknum, pid);

		this.addListeners();
    },

    properties: {

    },

    members: {

		addListeners: function () {
			var bus = eyeos.messageBus.getInstance();
			bus.addListener('eyeos_netsync_forceRefresh', function () {
				var optionPane = new eyeos.dialogs.OptionPane(
					"<b>" + tr('There was a problem with your connection, we recommend you to save your work and refresh the page\n\n\
								Do you want to refresh the page now?') + "</b>",
					eyeos.dialogs.OptionPane.QUESTION_MESSAGE,
					eyeos.dialogs.OptionPane.OK_CANCEL_OPTION);

					var dialog = optionPane.createDialog(this, tr('Connection Problem'), function(result) {
						if (result == eyeos.dialogs.OptionPane.OK_OPTION) {
							window.location.reload()
						}
					}, this);

					dialog.open();
			}, this);
		},

        initApplication: function(checknum, args) {
            //in the __run of desktop.php, user is appended into args[0]
            var user = args[0];
            var files = args[1];

			document.title = eyeos.getCurrentUserName() +' @ eyeOS ' + eyeos.version;

            //we create a composite called screen. this is a top level layer
            //filling all the screen.
            //it have vbox layout because inside screen there is desktop and at the bottom
            //there is the taskbar
            var screen = new qx.ui.container.Composite(new qx.ui.layout.VBox(0));
			screen.setBackgroundColor('#f2f2f2');

			//add screen to the root of the browser
            qx.core.Init.getApplication().getRoot().add(screen , {
                edge: 0
            });
			
            //inside screen, we create desktop, that is a normal qx.ui.window.Manager, see qooxdoo
            //reference to get and idea of what eyeDesktop does
            var eyeDesktop = new qx.ui.EyeDesktop(new qx.ui.window.Manager());

            //by default, eyeDesktop should be grey
            eyeDesktop.setBackgroundColor('#f2f2f2');

            //we add eyeDesktop to screen, with flex 1, so it will fill the maximum of screen
            //as it can.
            screen.add(eyeDesktop, {
                flex: 1
            });

            //when a new eyeWindow is created, a message thorugh dbus is send in eyeos.ui.Window
            //with category interface and eventName windowCreated
            var bus = eyeos.messageBus.getInstance();
            bus.addListener('eyeos_interface_windowCreated', function (e) {
                //get the received window and add it to eyeDesktop
                var window = e.getData();
                eyeDesktop.add(window);
            }, this);

            //we need to store screen and eyeDesktop inside dbus, using store
            //so other parts of the system can access them.
            bus.store('screen', screen);
            bus.store('eyeDesktop', eyeDesktop);
            bus.store('user', user);

            //we create the dashboard
            //dashboard is created ever, even if the user has selected classic desktop
            //because classic desktop is dashboard with a single fullscreen widget
            var dashboard = new eyeos.dashboard.Board();

            eyeDesktop.add(dashboard, {
                edge: 0
            });

            //notifications part
            var notificationsPanel = new qx.ui.container.Composite(new qx.ui.layout.VBox());
            notificationsPanel.set({
                zIndex: 9000000
            });

            bus.store('notificationsPanel', notificationsPanel);

            bus.addListener('eyeos_desktop_showDesktopNotification', function (e) {
                var text = e.getData()[0];
				if(e.getData().length > 1 && e.getData()[1]) {
					var type = e.getData()[1];
				} else {
					var type = 'info';
				}

                var notification = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({
                    width: 200,
                    minHeight: 50,
                    backgroundColor: '#232D34',
                    //	decorator rounded all borders
                    decorator: new qx.ui.decoration.RoundBorderBeveled().set({
                        leftTopR: 5,
                        rightTopR: 5,
                        leftBottomR: 5,
                        rightBottomR: 5
                    }),
                    opacity: 0,
                    marginBottom: 10
                });

				if (navigator.appName == 'Microsoft Internet Explorer') {
					notification.setDecorator(null);
				}
				
                var informationName = new qx.ui.basic.Label().set({
                    value: '<b style="color:white">'+escapeHtml(tr(text))+'</b>',
                    rich: true,
                    padding: 10
                });
                notification.add(informationName, {
                    flex: true
                });

				if(type == 'wait') {
					var icon = new qx.ui.basic.Image();
					icon.setSource('eyeos/extern/images/Loading_animation.gif');
					icon.set({
						marginLeft: 10,
						marginBottom: 10
					});
					notification.add(icon);
				}

                notificationsPanel.addAt(notification, 0);

                var timer = new qx.event.Timer(30);
                timer.addListener("interval", function() {
                    var currentOpacity = notification.getOpacity();
                    if(parseFloat(currentOpacity) >= '1') {
                        timer.stop();
                        //we wait 5 secons, and start the second timer
						if(type == 'info') {
							qx.event.Timer.once(function(e) {
								var timerfinal = new qx.event.Timer(30);
								timerfinal.addListener("interval", function() {
									var currentOpacity = notification.getOpacity();
									if(parseFloat(currentOpacity) < 0.1) {
										timerfinal.stop();
										notification.destroy();
									}
									notification.setOpacity(parseFloat(currentOpacity)-0.1)
								}, this);
								timerfinal.start();
							}, this, 5000);
						} else {
							if(!this.wait) {
								this.wait = {};
							}
							this.wait[e.getData()[2]] = notification;
						}

                    }
                    notification.setOpacity(parseFloat(currentOpacity)+0.1)
                }, this)

                timer.start();

            }, this);

            bus.addListener('eyeos_desktop_removeDesktopNotification', function (e) {
                var id = e.getData()[0];
				this.wait[id].destroy();
            }, this);
            
            eyeDesktop.add(notificationsPanel, {
                right: 10,
                bottom: 20
            });

            //detect browser window resize
            eyeDesktop.addListener('resize', function() {
                var bounds = eyeDesktop.getBounds();

                if (this._imageContainer != undefined && this._dashImage != undefined) {
                    this._imageContainer.set({
                        width: bounds.width,
                        height: bounds.height
                    });
                    //
                    this._dashImage.set({
                        width: bounds.width,
                        height: bounds.height
                    });
                }
            }, this);

            //store the user metadata inside a object for later usage
            var meta = eyeos.getCurrentUserData().metadata;

            //when eyeDesktop appeared, its time to load wallpaper and launch autorun applications
            eyeDesktop.addListener("appear",function(){
                // BACKGROUND & WALLPAPER
                this._imageContainer = new qx.ui.container.Composite(new qx.ui.layout.Canvas());
                this._dashImage = new qx.ui.basic.Image().set({
					
                });

                if (meta['eyeos.user.desktop.wallpaperMode'] == undefined) {
                    this._dashImage.setBackgroundColor('#F4F4F4');
                } else {
                    if (meta['eyeos.user.desktop.wallpaperMode'] == 'color') {
                        var colors = meta['eyeos.user.desktop.backgroundColors'];
                        for (var i in colors) {
                            if (colors[i] == 'true') {
                                this._dashImage.setBackgroundColor(i);
                            }
                        }
                    } else {
                        this._dashImage.setBackgroundColor('white');
                        var splitted = meta['eyeos.user.desktop.wallpaper'].split('/');
                        if(meta['eyeos.user.desktop.wallpaper']) {
                            if (splitted[0] == 'sys:') {
                                this._dashImage.setSource('index.php?extern=images/wallpapers/' + splitted[splitted.length - 2] + '/' + splitted[splitted.length - 1]);
                            } else {
                                this._dashImage.setSource('index.php?checknum=' + this.getChecknum() + '&message=__FileSystem_readFile&params[path]=' + meta['eyeos.user.desktop.wallpaper']);
                            }
                        } else {
                            this._dashImage.setSource('index.php?extern=images/wallpapers/nature/default.jpg');
                        }

                    }
                }

				if(this._dashImage.getSource() == 'index.php?extern=images/wallpapers/nature/default.jpg') {
					this._dashImage.addListener('loaded', function(e) {
						var ele = e.getTarget().getContentElement();
						ele.setStyle('backgroundPosition', 'bottom right');
					}, this);
				}

                var bounds = eyeDesktop.getBounds();
                //
                this._imageContainer.set({
                    width: bounds.width,
                    height: bounds.height,
                    allowGrowX: true,
                    allowStretchX: true,
                    allowStretchY: true,
                    allowGrowY: true
                });
                //
                this._dashImage.set({
                    width: bounds.width,
                    height: bounds.height,
                    allowGrowX: true,
                    allowStretchX: true,
                    allowStretchY: true,
                    allowGrowY: true
                });
                this._imageContainer.add(this._dashImage);
                eyeDesktop.add(this._imageContainer);
                this._dashImage.set({
                    zIndex: 10
                });


                // LOGIN APPLICATIONS

                if (meta['eyeos.user.applications.onLogin'] != undefined) {
                    var onLoginApps = meta['eyeos.user.applications.onLogin'];
                    for (var i in onLoginApps) {
                        if (onLoginApps[i] == 'true') {
                            eyeos.execute(i, this.getChecknum());
                        }
                    }
                }


				// Welcome Message

				if(meta['eyeos.user.desktop.showWelcome'] == undefined || meta['eyeos.user.desktop.showWelcome'] != 'false' ) {
					eyeos.execute('welcomepage', this.getChecknum());
				}

            },this);

            bus.store('eyeDashBoard', dashboard);

            //it is needed to check what have the user configured.
            //if the user have classic desktop, set the columns to 1, rebouild dashboard (apply)
            //and then remove all widgets
            //if the user have dashboard selected, set columns to the value desired by the user
            //and rebuild
            if (eyeos.getCurrentUserData().metadata['eyeos.desktop.mode'] != undefined) {
                var widgetManager = desktop.WidgetManager.getInstance();
                if (eyeos.getCurrentUserData().metadata['eyeos.desktop.mode'] == 'classic') {
                    dashboard.setDesktopMode('classic');
                    dashboard.setContainerNumber(1);
                    dashboard.rebuild();
                    dashboard.removeAllWidgets();
                    widgetManager.createDesktopWidgetAlone(this.getChecknum(), files);
                } else {
                    dashboard.setDesktopMode('dashboard');
                    dashboard.setContainerNumber(eyeos.getCurrentUserData().metadata['eyeos.desktop.dashboard.nbcolumns']);
                    dashboard.rebuild();
                    widgetManager.loadWidgets(this.getChecknum());
                }
            }
            
            var dbus = eyeos.messageBus.getInstance();
            var self = this;
            dbus.addListener('eyeos_desktop_changesDashboard', function (e) {
                var widgetManager = desktop.WidgetManager.getInstance();
                if (e.getData()[0] == 'classic') {
                    this.setDesktopMode('classic');
                    this.setContainerNumber(1);
                    this.rebuild();
                    this.removeAllWidgets();
                    widgetManager.createDesktopWidgetAlone(self.getChecknum());
                } else {
                    this.setDesktopMode('dashboard');
                    this.setContainerNumber(e.getData()[2]);
                    this.rebuild();
                    if (e.getData()[1] != e.getData()[0]) {
                        this.removeAllWidgets();
                        var widgetManager = desktop.WidgetManager.getInstance();
                        widgetManager.loadWidgets(self.getChecknum());
                    }
                }
            }, dashboard);

            //when the wallpaper is changed, we need to refresh the desktop
            //to show the selected walpaper/color
            dbus.addListener('eyeos_desktop_changeWallpaper', function (e) {
                var mode = e.getData()[0];
                var item = e.getData()[1];

                if (mode != undefined && item != undefined) {
                    if (mode == 'color') {
                        this._dashImage.setSource(null);
                        this._dashImage.setBackgroundColor(item);
                    } else {
                        this._dashImage.setBackgroundColor('transparent');
                        var splitted = item.split('/');
                        if (splitted[0] == 'sys:') {
                            this._dashImage.setSource('index.php?extern=images/wallpapers/' + splitted[splitted.length - 2] + '/' + splitted[splitted.length - 1]);
                        } else {
                            this._dashImage.setSource('index.php?checknum=' + this.getChecknum() + '&message=__FileSystem_readFile&params[path]=' + item);
                        }
                    }
                }
            }, this);

			desktop.actionManager.getInstance().setChecknum(this.getChecknum());
			desktop.chatManager.getInstance().setChecknum(this.getChecknum());
			desktop.chatManager.getInstance().registerListeners(this);

			window.onbeforeunload = function(e) {
				return "You are about to leave your eyeOS session, are you sure you want to continue?";
			};

			eyeos.execute('taskbar', this.getChecknum());
			eyeos.execute('topmenu', this.getChecknum());
        }
    }
});
desktop_application(285516006, 5499, ["username",{"absolutepath":"home:\/\/~username\/Desktop","paths":["home:\/\/~username\/","home:\/\/~username\/Desktop"],"files":[{"class":"EyeUserFile","type":"file","extension":"LNK","size":101,"permissions":"-rw-------","owner":"username","group":"users","absolutepath":"home:\/\/~username\/Desktop\/Chat.lnk","meta":{"owner":"username","group":"users","permissions":"-rw-------"},"content":"{\"app\":\"chat\",\"type\":\"application\",\"icon\":\"index.php?extern=\\\/images\\\/48x48\\\/apps\\\/konversation.png\"}","name":"Chat.lnk","virtual":"true"},{"class":"EyeUserFile","type":"file","extension":"LNK","size":100,"permissions":"-rw-------","owner":"username","group":"users","absolutepath":"home:\/\/~username\/Desktop\/Documents.lnk","meta":{"owner":"username","group":"users","permissions":"-rw-------"},"content":"{\"app\":\"documents\",\"type\":\"application\",\"icon\":\"index.php?extern=\\\/images\\\/48x48\\\/apps\\\/okteta.png\"}","name":"Documents.lnk","virtual":"true"},{"class":"EyeUserFile","type":"file","extension":"LNK","size":109,"permissions":"-rw-------","owner":"username","group":"users","absolutepath":"home:\/\/~username\/Desktop\/Home.lnk","meta":{"owner":"username","group":"users","permissions":"-rw-------"},"content":"{\"app\":\"files\",\"type\":\"application\",\"icon\":\"index.php?extern=\\\/images\\\/48x48\\\/apps\\\/system-file-manager.png\"}","name":"Home.lnk","virtual":"true"},{"class":"EyeUserFile","type":"file","extension":"LNK","size":107,"permissions":"-rw-------","owner":"username","group":"users","absolutepath":"home:\/\/~username\/Desktop\/How to use eyeOS.lnk","meta":{"owner":"username","group":"users","permissions":"-rw-------"},"content":"{\"app\":\"howto\",\"type\":\"application\",\"icon\":\"index.php?extern=\\\/images\\\/48x48\\\/categories\\\/system-help.png\"}","name":"How to use eyeOS.lnk","virtual":"true"},{"class":"EyeUserFile","type":"file","extension":"LNK","size":111,"permissions":"-rw-------","owner":"username","group":"users","absolutepath":"home:\/\/~username\/Desktop\/Welcome.lnk","meta":{"owner":"username","group":"users","permissions":"-rw-------"},"content":"{\"app\":\"welcomepage\",\"type\":\"application\",\"icon\":\"index.php?extern=\\\/images\\\/48x48\\\/apps\\\/welcome-manual.png\"}\n","name":"Welcome.lnk","virtual":"true"}]}]);eyeos._callbackProxyWithContent(null, null, null, {"__eyeos_specialControlMessage_header":"__control_enhancedData","__eyeos_specialControlMessage_body":{"messages":[{"type":"application","eventName":"start","eventData":{"name":"desktop","pid":5499,"loginContext":{"user":"username","group":"users"},"checknum":285516006,"time":1318409257,"args":{}}}],"data":"lang['Desktop'] = 'Desktop';\nlang['Open'] = 'Open';\nlang['Rename'] = 'Rename';\nlang['Separator'] = 'Separator';\nlang['Delete'] = 'Delete';\nlang['Download'] = 'Download';\nlang['Upload file'] = 'Upload file';\nlang['New folder'] = 'New folder';\nlang['New simple document'] = 'New simple document';\nlang['New document'] = 'New document';\nlang['New link'] = 'New link';\nlang['Settings'] = 'Settings';\nlang['Desktop'] = 'Desktop';\nlang['files'] = 'files';\nlang['Name'] = 'Name';\nlang['Size'] = 'Size';\nlang['You can not rename multiple files at once'] = 'You can not rename multiple files at once';\n\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.WidgetManager', {\n\ttype: 'singleton',\n\textend: qx.core.Object,\n\n\tproperties: {\n\t\twidgets: {\n\t\t\tdeferredInit: true\n\t\t}\n\t},\n    \n\tmembers: {\n\t\tloadWidgets: function(checknum) {\n\t\t\tthis.checknum = checknum;\n\t\t\tthis.setWidgets([]);\n\t\t\t\/\/modified to stackable\n\t\t\teyeos.callMessage(checknum, 'loadWidgets', null, function(widgets) {\n\t\t\t\tfor(var widgetName in widgets) {\n\t\t\t\t\tvar isInstalled = (widgets[widgetName].installed === 'true' || widgets[widgetName].installed === true);\n\t\t\t\t\tif(isNaN(widgetName) && isInstalled) {\n\t\t\t\t\t\tvar widget = eval('new desktop.widget.'+widgetName+'('+checknum+', \"'+widgetName+'\");');\n\t\t\t\t\t\twidget.setSettings(widgets[widgetName]);\n\t\t\t\t\t\tthis.getWidgets().push({\n\t\t\t\t\t\t\tcreate: widget.createWidget(),\n\t\t\t\t\t\t\twidget: widget.getInternalWidget(),\n\t\t\t\t\t\t\tchecknum: checknum,\n\t\t\t\t\t\t\ttitle: widget.getTitle(),\n\t\t\t\t\t\t\tvalue: widgetName\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bus = eyeos.messageBus.getInstance();\n\t\t\t\t\/\/backward compatibility...everyone should use the manager instead of this\n\t\t\t\tbus.store('widgets', this.getWidgets());\n\t\t\t\tbus.send('desktop', 'widgetsLoaded');\n\t\t\t}, this);\n\t\t},\n\n\t\taddWidget: function(widget) {\n\t\t\tvar widget = eval('new desktop.widget.'+widget+'('+this.checknum+', \"'+widget+'\");');\n\t\t\twidget.setSettings(widget);\n\t\t\tdocument.widgets.push({\n\t\t\t\tcreate: widget.createWidget(),\n\t\t\t\twidget: widget.getInternalWidget(),\n\t\t\t\tchecknum: this.checknum,\n\t\t\t\ttitle: widget.getTitle(),\n\t\t\t\tvalue: widget\n\t\t\t});\n\t\t},\n\n        getFileMenu: function() {\n            var menu = [\n                    {\n                            label: tr('Open'),\n                            image: 'index.php?extern=images\/16x16\/actions\/document-open.png',\n                            id: 'openFile()'\n                    }, {\n                            label: tr('Rename'),\n                            image: 'index.php?extern=images\/16x16\/actions\/edit-rename.png',\n                            id: 'editFile()'\n                    }, {\n                            label: tr('Separator'),\n                            id: 'separator'\n                    }, {\n                            label: tr('Delete'),\n                            image: 'index.php?extern=images\/16x16\/actions\/edit-delete.png',\n                            id: 'deleteFile()'\n                    }, {\n                            label: tr('Download'),\n                            image: 'index.php?extern=images\/16x16\/actions\/edit-paste.png',\n                            id: 'downloadFile()'\n                    }, {\n                            label: tr('Share by URL'),\n                            image: 'index.php?extern=images\/16x16\/categories\/applications-internet.png',\n                            id: 'shareURLFile()'\n                    }\n            ];\n\n\t\t\treturn this.processMenu(menu);\n\t\t},\n\t\tgetFolderMenu: function() {\n\t\t\tvar menu = [\n\t\t\t{\n\t\t\t\tlabel: tr('Open'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/actions\/document-open.png',\n\t\t\t\tid: 'openFile()'\n\t\t\t}, {\n\t\t\t\tlabel: tr('Rename'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/actions\/edit-rename.png',\n\t\t\t\tid: 'editFile()'\n\t\t\t}, {\n\t\t\t\tlabel: tr('Separator'),\n\t\t\t\tid: 'separator'\n\t\t\t}, {\n\t\t\t\tlabel: tr('Delete'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/actions\/edit-delete.png',\n\t\t\t\tid: 'deleteFile()'\n\t\t\t}\n\t\t\t];\n\n\t\t\treturn this.processMenu(menu);\n\t\t},\n\n\t\tgetDesktopContextMenu : function() {\n\t\t\tvar menu = \t[\n\t\t\t{\n\t\t\t\tlabel: tr('Upload file'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/actions\/window-new.png',\n\t\t\t\tid: 'uploadFile()'\n\t\t\t}, {\n\t\t\t\tlabel: tr('Separator'),\n\t\t\t\tid: 'separator'\n\t\t\t}, {\n\t\t\t\tlabel: tr('New folder'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/places\/folder.png',\n\t\t\t\tid: 'newFolder()'\n\t\t\t}, {\n\t\t\t\tlabel: tr('New simple document'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/mimetypes\/text-x-generic.png',\n\t\t\t\tid: 'newFile(\\'txt\\')'\n\t\t\t}, {\n\t\t\t\tlabel: tr('New document'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/mimetypes\/application-msword.png',\n\t\t\t\tid: 'newFile(\\'edoc\\')'\n\t\t\t}, {\n\t\t\t\tlabel: tr('New link'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/mimetypes\/application-x-mswinurl.png',\n\t\t\t\tid: 'newLink()'\n\t\t\t}, {\n\t\t\t\tlabel: tr('Separator'),\n\t\t\t\tid: 'separator'\n\t\t\t}, {\n\t\t\t\tlabel: tr('Settings'),\n\t\t\t\timage: 'index.php?extern=images\/16x16\/actions\/configure.png',\n\t\t\t\tid: 'openSettings()'\n\t\t\t}\n\t\t\t];\n\n\t\t\treturn this.processMenu(menu);\n\t\t},\n\n\t\tprocessMenu: function(menu) {\n\t\t\tvar borderMenu = new qx.ui.decoration.Single(1, 'solid', '#C3C3C3');\n\t\t\tvar omenu = new qx.ui.menu.Menu().set({\n\t\t\t\tdecorator: borderMenu,\n\t\t\t\tshadow: null,\n\t\t\t\tpadding: 3,\n\t\t\t\tbackgroundColor: '#F3F3F3'\n\t\t\t});\n\n\t\t\tomenu.addListener('appear', function(e) {\n\t\t\t\tvar opener = this.getOpener();\n\t\t\t\tif(opener.classname == 'qx.ui.basic.Atom' &&\n\t\t\t\t\t(!desktop.SelectionManager.getInstance().hasSelection() || desktop.SelectionManager.getInstance().getSelection().length < 2)) {\n\t\t\t\t\tdesktop.SelectionManager.getInstance().singleSelect(opener);\n\t\t\t\t} else if (!(opener.classname == 'qx.ui.basic.Atom')) {\n\t\t\t\t\tdesktop.SelectionManager.getInstance().clearSelection();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tfor (var i = 0; i < menu.length; ++i) {\n\t\t\t\tvar item = null;\n\t\t\t\tif (menu[i].id != 'separator') {\n\t\t\t\t\titem = new qx.ui.menu.Button(menu[i].label, menu[i].image);\n\t\t\t\t\titem.setUserData('id', menu[i].id);\n\n\t\t\t\t\titem.addListener('appear', function (e) {\n\t\t\t\t\t\tthis.setBackgroundColor(null);\n\t\t\t\t\t\tthis.setDecorator(null);\n\t\t\t\t\t\tthis.setTextColor('#4A4A4A');\n\t\t\t\t\t});\n\n\t\t\t\t\titem.addListener('mouseover', function (e) {\n\t\t\t\t\t\tthis.setBackgroundColor('#D3D3D3');\n\t\t\t\t\t\tthis.setTextColor('#404040');\n\t\t\t\t\t});\n\t\t\t\t\titem.addListener('mouseout', function (e) {\n\t\t\t\t\t\tthis.setDecorator(null);\n\t\t\t\t\t\tthis.setBackgroundColor(null);\n\t\t\t\t\t});\n\n\t\t\t\t\titem.addListener('execute', function (e) {\n\t\t\t\t\t\teval('desktop.actionManager.getInstance().'+this.getUserData('id'));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\titem = new qx.ui.menu.Separator();\n\t\t\t\t}\n\t\t\t\tomenu.add(item);\n\t\t\t}\n\n\t\t\treturn omenu;\n\t\t},\n        \n\t\tcreateDesktopWidgetAlone: function(checknum, files) {\n\t\t\tvar dbus = eyeos.messageBus.getInstance();\n\t\t\tvar eyeDashBoard = dbus.retrieve('eyeDashBoard');\n\t\t\tvar self = this;\n\n\t\t\tthis.checknum = checknum;\n\t\t\tvar widget = new eyeos.dashboard.Widget(tr('Desktop'), 'files', 'files', true, checknum).set({\n\t\t\t\ticon: 'index.php?extern=\/images\/16x16\/apps\/system-file-manager.png'\n\t\t\t});\n\n\t\t\tthis.widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Canvas()).set({\n\t\t\t\t'allowShrinkY': false,\n\t\t\t\tpadding: 5\n\t\t\t});\n\n\t\t\tthis.widgetContainer.setDroppable(true);\n\n\t\t\tthis.widgetContainer.addListener('mousedown', function(e) {\n\t\t\t\tif(this.selector) {\n\t\t\t\t\tthis.selector.destroy();\n\t\t\t\t\tthis.selector = null;\n\t\t\t\t}\n\t\t\t\tif(e.getButton() != 'left' || e.getTarget() != this.widgetContainer) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar x = e.getDocumentLeft();\n\t\t\t\tvar y = e.getDocumentTop();\n\t\t\t\ty = y - 85;\n\t\t\t\tx = x - 15;\n\t\t\t\tthis.selecting = true;\n\t\t\t\tthis.selector = new qx.ui.container.Composite();\n\t\t\t\tthis.selector.set({\n\t\t\t\t\topacity: 0.1,\n\t\t\t\t\tbackgroundColor: 'blue',\n\t\t\t\t\twidth:0,\n\t\t\t\t\theight:0,\n\t\t\t\t\tmarginLeft:x,\n\t\t\t\t\tmarginTop:y\n\t\t\t\t});\n                \n\t\t\t\tthis.selectorY = y;\n\t\t\t\tthis.selectorX = x;\n\t\t\t\tthis.widgetContainer.add(this.selector);\n\t\t\t}, this);\n\n\t\t\tthis.widgetContainer.addListener('mousemove', function(e) {\n\t\t\t\tif(this.selecting && this.selector ) {\n\t\t\t\t\tvar x = e.getDocumentLeft();\n\t\t\t\t\tvar y = e.getDocumentTop();\n\t\t\t\t\ty = y - 85;\n\t\t\t\t\tx = x - 15;\n\t\t\t\t\tif(x > this.selectorX) {\n\t\t\t\t\t\tthis.selector.setWidth(x-this.selectorX);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.selector.setWidth(this.selectorX-x);\n\t\t\t\t\t\tthis.selector.setMarginLeft(x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(y > this.selectorY) {\n\t\t\t\t\t\tthis.selector.setHeight(y-this.selectorY);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.selector.setHeight(this.selectorY-y);\n\t\t\t\t\t\tthis.selector.setMarginTop(y);\n\t\t\t\t\t}\n\t\t\t\t\tdesktop.SelectionManager.getInstance().clearSelection();\n\t\t\t\t\tvar box = new Object();\n\t\t\t\t\tif(x > this.selectorX) {\n\t\t\t\t\t\tbox.x = this.selectorX;\n\t\t\t\t\t\tbox.width = x-this.selectorX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbox.x = x;\n\t\t\t\t\t\tbox.width = this.selectorX-x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(y > this.selectorY) {\n\t\t\t\t\t\tbox.y = this.selectorY;\n\t\t\t\t\t\tbox.height = y-this.selectorY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbox.y = y;\n\t\t\t\t\t\tbox.height = this.selectorY-y;\n\t\t\t\t\t}\n\n                    var childrens = this.widgetContainer.getChildren();\n                    for(var i = 0; i < childrens.length; i++) {\n                        if(childrens[i].classname == 'qx.ui.basic.Atom') {\n                            var bounds = childrens[i].getBounds();\n                            if(parseInt(bounds.top)+parseInt(bounds.height) > box.y\n                                && parseInt(bounds.top) < box.y + box.height\n                                && parseInt(bounds.left)+parseInt(bounds.width) > box.x\n                                && parseInt(bounds.left) < box.x + box.width\n                                ) {\n                                desktop.SelectionManager.getInstance().addToSelection(childrens[i]);\n                            }\n                        }\n                    }\n                } else {\n                    if(this.selector) {\n                        this.selector.destroy();\n                        this.selector = null;\n                    }\n                }\n            }, this);\n\n\t\t\tthis.widgetContainer.addListener('mouseup', function(e) {\n\t\t\t\tif(!this.controlKeyPressed) {\n\t\t\t\t\tdesktop.SelectionManager.getInstance().clearSelection();\n\t\t\t\t}\n\t\t\t\tif(this.selector) {\n\t\t\t\t\tthis.selector.destroy();\n\t\t\t\t\tvar x = e.getDocumentLeft();\n\t\t\t\t\tvar y = e.getDocumentTop();\n\t\t\t\t\ty = y - 85;\n\t\t\t\t\tx = x - 15;\n\t\t\t\t\t\/\/now, we need to calculate what are the icons inside the box\n\t\t\t\t\t\/\/so first, go calculate the box :)\n\n\t\t\t\t\tvar box = new Object();\n\t\t\t\t\tif(x > this.selectorX) {\n\t\t\t\t\t\tbox.x = this.selectorX;\n\t\t\t\t\t\tbox.width = x-this.selectorX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbox.x = x;\n\t\t\t\t\t\tbox.width = this.selectorX-x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(y > this.selectorY) {\n\t\t\t\t\t\tbox.y = this.selectorY;\n\t\t\t\t\t\tbox.height = y-this.selectorY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbox.y = y;\n\t\t\t\t\t\tbox.height = this.selectorY-y;\n\t\t\t\t\t}\n\n                    var childrens = this.widgetContainer.getChildren();\n                    for(var i in childrens) {\n                        if(childrens[i].classname == 'qx.ui.basic.Atom') {\n                            var bounds = childrens[i].getBounds();\n                            if(parseInt(bounds.top)+parseInt(bounds.height) > box.y\n                                && parseInt(bounds.top) < box.y + box.height\n                                && parseInt(bounds.left)+parseInt(bounds.width) > box.x\n                                && parseInt(bounds.left) < box.x + box.width\n                                ) {\n                                desktop.SelectionManager.getInstance().addToSelection(childrens[i]);\n                            }\n                        }\n                    }\n                }\n                this.selector = null;\n                this.selecting = false;\n            }, this);\n\n\t\t\tthis.widgetContainer.setContextMenu(this.getDesktopContextMenu());\n\n            this.widgetContainer.addListener('drop', function(e) {\n                var dbus = eyeos.messageBus.getInstance();\n                var item = e.getRelatedTarget();\n                var x = e.getDocumentLeft();\n                var y = e.getDocumentTop();\n                y = y - 40;\n                x = x - 11;\n                if(eyeos.files && item.classname == 'eyeos.files.IconViewItem') {\n                    \/\/here start the real coupling\n                    var selection = item.getManager().returnSelected();\n                   \n\t\t\t\t\tif(selection && selection.length > 0) {\n\t\t\t\t\t\tvar movements = [];\n\t\t\t\t\t\tvar paths = [];\n\t\t\t\t\t\tvar desktopHeight = this.widgetContainer.getBounds().height;\n\t\t\t\t\t\tfor(var i = 0; i < selection.length; i++) {\n\t\t\t\t\t\t\titem = selection[i];\n\t\t\t\t\t\t\tif(item.getFile().getPath().charAt(item.getFile().getPath().length-1) != '\/') {\n\t\t\t\t\t\t\t\tpath = item.getFile().getPath()+'\/'+item.getFile().getName();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpath = item.getFile().getPath()+item.getFile().getName();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmovements.push([x, y, path]);\n\t\t\t\t\t\t\tpaths.push(path);\n\t\t\t\t\t\t\t\/\/calculate x and y\n\t\t\t\t\t\t\ty = y + 80;\n\t\t\t\t\t\t\tif(y + 70 > desktopHeight) {\n\t\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\t\tx = x + 80;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.__isShareOrWorkgroupFile(path)) {\n\t\t\t\t\t\t\teyeos.callMessage(checknum, 'copyFile', ['home:\/\/~' + eyeos.getCurrentUserData().name + '\/Desktop', path], function(e) {\n\t\t\t\t\t\t\t\tfor (var i = 0; i < e.length; ++i) {\n\t\t\t\t\t\t\t\t\tthis.createInnerContent(this.widgetContainer, e[i], true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, this);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdbus.send('files', 'delete', [item.getFile().getPath(), paths]);\n\t\t\t\t\t\t\teyeos.callMessage(checknum, 'moveFileToDesktop', movements, function(e) {\n\t\t\t\t\t\t\t\tfor(var i in e) {\n\t\t\t\t\t\t\t\t\tthis.createInnerContent(this.widgetContainer, e[i], true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpath = item.getFile().getPath()+'\/'+item.getFile().getName();\n\t\t\t\t\t\tif (this.__isShareOrWorkgroupFile(path)) {\n\t\t\t\t\t\t\teyeos.callMessage(checknum, 'copyFile', ['home:\/\/~' + eyeos.getCurrentUserData().name + '\/Desktop', path], function(e) {\n\t\t\t\t\t\t\t\tthis.createInnerContent(this.widgetContainer, e[0], true);\n\t\t\t\t\t\t\t}, this);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdbus.send('files', 'delete', [item.getFile().getPath(), [path]]);\n\t\t\t\t\t\t\teyeos.callMessage(checknum, 'moveFileToDesktop', [[x, y, path]], function(e) {\n\t\t\t\t\t\t\t\tthis.createInnerContent(this.widgetContainer, e[0], true);\n\t\t\t\t\t\t\t}, this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tif(item.classname == 'qx.ui.menu.Button') {\n\t\t\t\t\t\t\/\/create shortcut\n\t\t\t\t\t\tvar appName = item.getUserData('appName');\n\t\t\t\t\t\teyeos.callMessage(checknum, \"createLink\", [appName, x , y], function(e){\n\t\t\t\t\t\t\teyeos.messageBus.getInstance().send('desktop', 'showDesktopNotification', [tr('New shortcut created in the desktop')]);\n\t\t\t\t\t\t\tthis.createInnerContent(this.widgetContainer, e, true);\n\t\t\t\t\t\t}, this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar selection = desktop.SelectionManager.getInstance().getSelection();\n\t\t\t\t\t\tif(selection.length > 1) {\n\t\t\t\t\t\t\t\/\/check if there is a selection!\n\t\t\t\t\t\t\tvar offsetX = x - item.getBounds().left;\n\t\t\t\t\t\t\tvar offsetY = y - item.getBounds().top;\n\t\t\t\t\t\t\tfor(var i = 0; i < selection.length; i++) {\n\t\t\t\t\t\t\t\tvar bounds = selection[i].getBounds();\n\t\t\t\t\t\t\t\tselection[i].setUserBounds(parseInt(bounds.left) + parseInt(offsetX), parseInt(bounds.top) + parseInt(offsetY), 76, 92);\n\t\t\t\t\t\t\t\tvar path = selection[i].getUserData('path');\n\t\t\t\t\t\t\t\tselection[i].setContextMenu(this.getFileMenu());\n\t\t\t\t\t\t\t\teyeos.callMessage(checknum, 'saveIconPosition', [parseInt(bounds.left) + parseInt(offsetX), parseInt(bounds.top) + parseInt(offsetY), path], function(e) {\n\n\t\t\t\t\t\t\t\t\t}, this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titem.setUserBounds(x, y, 76, 92);\n\t\t\t\t\t\t\tvar path = item.getUserData('path');\n\t\t\t\t\t\t\titem.setContextMenu(this.getFileMenu());\n\t\t\t\t\t\t\teyeos.callMessage(checknum, 'saveIconPosition', [x, y, path], function(e) {\n\n\t\t\t\t\t\t\t\t}, this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}, this);\n\n\n\t\t\t\/\/the first time it loads, the widget need events waiting for the\n\t\t\t\/\/dashboard to be shown, to be able to get its height and\n\t\t\t\/\/resize himself to fill all the dashboard\n\t\t\t\/\/however, if we switch between desktop and dashboard, with the\n\t\t\t\/\/dashboard loaded, this events will never get fired, and the bounds\n\t\t\t\/\/are already available just here.\n\t\t\t\/\/so, we try to get the bounds, if we are unable, just wait for the events\n\t\t\tvar bounds = eyeDashBoard.getBounds();\n\t\t\tif(bounds) {\n\t\t\t\tself.widgetContainer.setHeight(bounds.height);\n\t\t\t}\n\t\t\teyeDashBoard.addListener('appear', function(e) {\n\t\t\t\tvar bounds = this.getBounds();\n\t\t\t\tself.widgetContainer.setHeight(bounds.height);\n\t\t\t});\n\n\t\t\teyeDashBoard.addListener('resize', function(e) {\n\t\t\t\tvar bounds = this.getBounds();\n\t\t\t\tself.widgetContainer.setHeight(bounds.height);\n\t\t\t});\n\n           \n\t\t\twidget.setUserData('container', this.widgetContainer);\n\t\t\twidget.addContent(this.widgetContainer);\n\t\t\tcreateContent(checknum, 'home:\/\/~' + eyeos.getCurrentUserName() + '\/Desktop', files);\n\n\t\t\tfunction createContent(checknum, path, files) {\n\t\t\t\tself.widgetContainer.setUserData('path', path);\n\n\t\t\t\tif(!files) {\n\t\t\t\t\teyeos.callMessage(\n\t\t\t\t\t\tchecknum,\n\t\t\t\t\t\t\"__FileSystem_browsePath\",\n\t\t\t\t\t\tnew Array(path, null, this._browseOptions),\n\t\t\t\t\t\tfunction (results) {\n\t\t\t\t\t\t\tself.widgetContainer.removeAll();\n\t\t\t\t\t\t\tvar files = results.files;\n\t\t\t\t\t\t\tfor (var i = 0; i < files.length; ++i) {\n\t\t\t\t\t\t\t\tself.createInnerContent(self.widgetContainer, files[i], true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tvar items = files.files;\n\t\t\t\t\tfor (var i = 0; i < items.length; ++i) {\n\t\t\t\t\t\tself.createInnerContent(self.widgetContainer, items[i], true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twidget.openAndPlace(eyeDashBoard.getFirstContainer(),0);\n\t\t\twidget.toggleBackground();\n\n\t\t\tdbus.addListener('eyeos_files_new', function (e) {\n\t\t\t\tvar sourcePath = e.getData()[0];\n\t\t\t\tvar newFiles = e.getData()[1];\n\t\t\t\tif (this.getUserData('path') == sourcePath) {\n\t\t\t\t\tself.createInnerContent(this, newFiles, true);\n\t\t\t\t}\n\t\t\t}, this.widgetContainer);\n\n\t\t\tdbus.addListener('eyeos_files_rename', function (e) {\n\t\t\t\tvar originalFile = e.getData()[0];\n\t\t\t\tvar newFile = e.getData()[2];\n\n\t\t\t\tvar widgetChildrens = this.getChildren();\n\n\t\t\t\tfor (var i = 0; i < widgetChildrens.length; ++i) {\n\t\t\t\t\tif(widgetChildrens[i].getUserData('path') == originalFile) {\n\t\t\t\t\t\tvar tooltiptext = widgetChildrens[i].getToolTipText();\n\t\t\t\t\t\ttooltiptext = tooltiptext.replace('id=\"name\">'+widgetChildrens[i].getLabel(), 'id=\"name\">'+newFile.name);\n\t\t\t\t\t\twidgetChildrens[i].setToolTipText(tooltiptext);\n\t\t\t\t\t\twidgetChildrens[i].setLabel(newFile.name);\n\t\t\t\t\t\twidgetChildrens[i].setUserData('path',newFile.absolutepath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, this.widgetContainer);\n\n\t\t\tdbus.addListener('eyeos_file_uploadComplete', function (e) {\n\t\t\t\t\/\/console.log(e.getData());\n\t\t\t\t\/\/console.log(this.getUserData('path'));\n\t\t\t\t\/\/console.log(e.getData().path);\n\t\t\t\t\n\t\t\t\tif (this.getUserData('path') == e.getData().path) {\n\t\t\t\t\tself.createInnerContent(this, e.getData(), true);\n\t\t\t\t}\n\t\t\t}, this.widgetContainer);\n\n\t\t\tdbus.addListener('eyeos_files_delete', function (e) {\n\t\t\t\tvar sourcePath = e.getData()[0];\n\t\t\t\tvar newFiles = e.getData()[1];\n\t\t\t\tvar widgetChildrens = this.getChildren();\n\t\t\t\tvar widgetPaths = new Array();\n\n\t\t\t\tfor (var i = 0; i < widgetChildrens.length; ++i) {\n\t\t\t\t\twidgetPaths.push(widgetChildrens[i].getUserData('path'));\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < newFiles.length; ++i) {\n\t\t\t\t\tvar index = widgetPaths.indexOf(newFiles[i]);\n\t\t\t\t\tif (index != -1 && widgetChildrens[index] != undefined) {\n\t\t\t\t\t\twidgetChildrens[index].destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, this.widgetContainer);\n\n\t\t\tdbus.addListener('eyeos_files_drop', function (e) {\n\t\t\t\tvar files = e.getData()[0];\n\t\t\t\tvar source = e.getData()[1];\n\t\t\t\tvar target = e.getData()[2];\n\t\t\t\tif(source == 'home:\/\/~' + eyeos.getCurrentUserName() + '\/Desktop') {\n\t\t\t\t\tfor (var i = 0; i < files.length; ++i) {\n\t\t\t\t\t\tvar widgetChildrens = this.getChildren();\n\t\t\t\t\t\tfor (var x = 0; x < widgetChildrens.length; ++x) {\n\t\t\t\t\t\t\tif(widgetChildrens[x].getUserData('path') == files[i].getAbsolutePath()) {\n\t\t\t\t\t\t\t\twidgetChildrens[x].destroy();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, this.widgetContainer);\n\n\t\t\tdocument.screen.addListener('keydown', function(e) {\n\t\t\t\tif (e.getKeyIdentifier().toLowerCase() == 'control') {\n\t\t\t\t\tthis.controlKeyPressed = true;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tdocument.screen.addListener('keyup', function(e) {\n\t\t\t\tthis.controlKeyPressed = false;\n\t\t\t}, this);\n\n            \/\/create html5 drag and drop area\n            document.eyeDesktop.addListener('appear', function(e) {\n                var dropbox = document.eyeDesktop.getContentElement().getDomElement();\n\t\t\t\tif(navigator.appName != 'Opera') {\n\t\t\t\t\tdropbox.addEventListener(\"dragenter\", function(evt) {\n\t\t\t\t\t\tvar bus = eyeos.messageBus.getInstance();\n\t\t\t\t\t\tvar eyePanel = bus.retrieve('eyePanel');\n\t\t\t\t\t\tvar domEle = eyePanel.getContainerElement().getDomElement();\n\t\t\t\t\t\tdomEle.style.boxShadow = '0 5px 50px 0px blue';\n\t\t\t\t\t\tdomEle.style.MozBoxShadow = '0 5px 50px 0px blue';\n\t\t\t\t\t\tdomEle.style.webkitBoxShadow = '0 5px 50px 0px blue';\n\t\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t}, false);\n\n\t\t\t\t\tdropbox.addEventListener(\"dragexit\", function(evt) {\n\t\t\t\t\t\tvar bus = eyeos.messageBus.getInstance();\n\t\t\t\t\t\tvar eyePanel = bus.retrieve('eyePanel');\n\t\t\t\t\t\tvar domEle = eyePanel.getContainerElement().getDomElement();\n\t\t\t\t\t\tdomEle.style.boxShadow = '0 2px 25px 0px black';\n\t\t\t\t\t\tdomEle.style.MozBoxShadow = '0 2px 25px 0px black';\n\t\t\t\t\t\tdomEle.style.webkitBoxShadow = '0 2px 25px 0px black';\n\t\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t}, false);\n\t\t\t\t}\n\n\t\t\t\tdropbox.addEventListener(\"dragover\", function(evt) {\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t}, false);\n                \n\t\t\t\tdropbox.addEventListener(\"drop\", function(evt) {\n\t\t\t\t\tvar bus = eyeos.messageBus.getInstance();\n\t\t\t\t\tif(navigator.appName != 'Opera') {\n\t\t\t\t\t\tvar eyePanel = bus.retrieve('eyePanel');\n\t\t\t\t\t\tvar domEle = eyePanel.getContainerElement().getDomElement();\n\t\t\t\t\t\tdomEle.style.boxShadow = '0 2px 25px 0px black';\n\t\t\t\t\t\tdomEle.style.MozBoxShadow = '0 2px 25px 0px black';\n\t\t\t\t\t\tdomEle.style.webkitBoxShadow = '0 2px 25px 0px black';\n\t\t\t\t\t}\n                    evt.stopPropagation();\n                    evt.preventDefault();\n                    var files = evt.dataTransfer.files;\n                    var count = files.length;\n                    if(count > 0) {\n                       var data = evt.dataTransfer;\n\n\t\t\t\t\t\tvar boundary = '------multipartformboundary' + (new Date).getTime();\n\t\t\t\t\t\tvar dashdash = '--';\n\t\t\t\t\t\tvar crlf     = '\\r\\n';\n\n\t\t\t\t\t\t\/* Build RFC2388 string. *\/\n\t\t\t\t\t\tvar builder = '';\n\n\t\t\t\t\t\tbuilder += dashdash;\n\t\t\t\t\t\tbuilder += boundary;\n\t\t\t\t\t\tbuilder += crlf;\n\n\t\t\t\t\t\t\/* For each dropped file. *\/\n\t\t\t\t\t\tfor (var i = 0; i < data.files.length; i++) {\n\t\t\t\t\t\t\tvar file = data.files[i];\n\t\t\t\t\t\t\t\/* Generate headers. *\/\n\t\t\t\t\t\t\tbuilder += 'Content-Disposition: form-data; name=\"Filedata[]\"';\n\t\t\t\t\t\t\tif (file.fileName) {\n\t\t\t\t\t\t\t\tbuilder += '; filename=\"' + file.fileName + '\"';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuilder += crlf;\n\n\t\t\t\t\t\t\tbuilder += 'Content-Type: application\/octet-stream';\n\t\t\t\t\t\t\tbuilder += crlf;\n\t\t\t\t\t\t\tbuilder += crlf;\n\n\t\t\t\t\t\t\t\/* Append binary data. *\/\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbuilder += file.getAsBinary();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t\t\talert(tr('Dragging a file from your computer to eyeOS it is only supported in Mozilla Firefox by now'));\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuilder += crlf;\n\n\t\t\t\t\t\t\t\/* Write boundary. *\/\n\t\t\t\t\t\t\tbuilder += dashdash;\n\t\t\t\t\t\t\tbuilder += boundary;\n\t\t\t\t\t\t\tbuilder += crlf;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/\t\t\t\t\t\tbuilder += 'Content-Disposition: form-data; name=\"UPLOAD_IDENTIFIER\"';\n\t\t\t\t\t\t\/\/\t\t\t\t\t\tbuilder += crlf\n\t\t\t\t\t\t\/\/\t\t\t\t\t\tbuilder += crlf\n\t\t\t\t\t\t\/\/\t\t\t\t\t\tbuilder += 'ID_UPLOAD_HERE';\n\t\t\t\t\t\t\/\/\t\t\t\t\t\tbuilder += crlf;\n\t\t\t\t\t\t\/\/\t\t\t\t\t\t\/* Write boundary. *\/\n\t\t\t\t\t\t\/\/\t\t\t\t\t\tbuilder += dashdash;\n\t\t\t\t\t\t\/\/\t\t\t\t\t\tbuilder += boundary;\n\t\t\t\t\t\t\/\/\t\t\t\t\t\tbuilder += crlf;\n\n\n\n\t\t\t\t\t\t\/* Mark end of the request. *\/\n\t\t\t\t\t\tbuilder += dashdash;\n\t\t\t\t\t\tbuilder += boundary;\n\t\t\t\t\t\tbuilder += dashdash;\n\t\t\t\t\t\tbuilder += crlf;\n\n\t\t\t\t\t\tdocument.uploadDrop = builder;\n\t\t\t\t\t\tdocument.boundary = boundary;\n\t\t\t\t\t\teyeos.execute('upload', checknum, ['home:\/\/\/Desktop\/', true]);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t});\n\t\t\tdocument.screen.activate();\n\t\t},\n\n\t\t__isShareOrWorkgroupFile: function (path) {\n\t\t\tif (path.indexOf('workgroup:\/\/') != -1) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar exp = new RegExp(\/^home:\\\/\\\/~([^_][a-zA-Z0-9 .\\-_]{2,40})\\\/.*$\/);\n\t\t\tif (path.match(exp)) {\n\t\t\t\tvar username = RegExp.$1;\n\t\t\t\tif (username != eyeos.getCurrentUserData().name) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\tcreateInnerContent: function (widgetContainer, file, alone) {\n\t\t\tvar checknum = this.checknum;\n\t\t\tvar imageExtensions = ['JPG', 'JPEG', 'PNG', 'GIF'];\n\t\t\tvar videoExtensions = ['FLV'];\n\t\t\tvar musicExtensions = ['MP3', 'M4A'];\n\t\t\tvar docExtensions = ['EDOC', 'DOC', 'TXT', 'XLS', 'ODS'];\n\t\t\tvar zipExtensions = ['ZIP'];\n\t\t\tvar image = null;\n\t\t\tvar lnk = null;\n            \n\t\t\tif (file.type == 'folder') {\n\t\t\t\timage = 'index.php?extern=images\/48x48\/places\/folder.png';\n\t\t\t} else if (docExtensions.indexOf(file.extension) != -1) {\n\t\t\t\timage = 'index.php?extern=images\/48x48\/mimetypes\/application-msword.png';\n\t\t\t} else if (imageExtensions.indexOf(file.extension) != -1) {\n\t\t\t\timage = 'index.php?extern=images\/48x48\/mimetypes\/image-x-generic.png';\n\t\t\t} else if (musicExtensions.indexOf(file.extension) != -1) {\n\t\t\t\timage = 'index.php?extern=images\/48x48\/mimetypes\/audio-x-generic.png';\n\t\t\t} else if (videoExtensions.indexOf(file.extension) != -1) {\n\t\t\t\timage = 'index.php?extern=images\/48x48\/mimetypes\/audio-vnd.rn-realvideo.png';\n\t\t\t}else if (zipExtensions.indexOf(file.extension) != -1) {\n\t\t\t\timage = 'index.php?extern=images\/48x48\/mimetypes\/application-x-gzip.png';\n\t\t\t} else if(file.extension == 'LNK') {\n\t\t\t\tvar info = qx.util.Json.parse(file.content);\n\t\t\t\timage = info.icon;\n\t\t\t\tlnk = true;\n\t\t\t} else if(file.extension == 'PDF') {\n\t\t\t\timage = 'index.php?extern=images\/48x48\/mimetypes\/application-pdf.png';\n\t\t\t}else {\n\t\t\t\timage = 'index.php?extern=images\/48x48\/mimetypes\/application-x-zerosize.png';\n\t\t\t}\n\n\t\t\tvar name = file.name;\n\t\t\tif(file.extension == 'LNK') {\n\t\t\t\tname = name.substr(0, name.length-4);\n\t\t\t}\n\n\t\t\tvar size = file.size;\n\t\t\tvar units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\t\t\tvar i = 0;\n\t\t\twhile(size >= 1024) {\n\t\t\t\tsize \/= 1024;\n\t\t\t\t++i;\n\t\t\t}\n\t\t\tsize = size.toFixed(1) + ' ' + units[i];\n\t\t\t\/\/ name don't need translation is a filename\n\t\t\tvar tooltiptext = \"<div>\"+tr('Name')+\": <b id=\\\"name\\\">\"+name+\"<\/b><\/div>\";\n\t\t\ttooltiptext += \"<div>\"+tr('Size')+\": <b>\"+size+\"<\/b><\/div>\";\n\t\t\tvar atom = new qx.ui.basic.Atom(name, image).set({\n\t\t\t\t'iconPosition': 'top',\n\t\t\t\t\/\/'font': new qx.bom.Font(12, ['Helvetica', 'Arial', 'Sans-serif']),\n\t\t\t\t\/\/'textColor': '#FFFFFF',\n\t\t\t\t\/\/                'width': 76,\n\t\t\t\t'padding': 5,\n\t\t\t\t\/\/decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)\n\t\t\t\t'toolTipText' : tooltiptext\n\t\t\t});\n\n\t\t\tvar label = atom.getChildControl('label');\n\t\t\tlabel.set({\n\t\t\t\tallowGrowX: true,\n\t\t\t\tallowGrowY: true,\n\t\t\t\trich: true,\n\t\t\t\twrap:true\n\t\t\t});\n\n\t\t\tif(lnk) {\n\t\t\t\tatom.setUserData('content', file.content);\n\t\t\t}\n\n\t\t\tatom.setDraggable(true);\n\t\t\t\/\/ atom.setContextMenu(this.getFileMenu());\n\t\t\tif (file.type == 'folder') {\n\t\t\t\tatom.setContextMenu(this.getFolderMenu());\n\t\t\t} else {\n\t\t\t\tatom.setContextMenu(this.getFileMenu());\n\t\t\t}\n\n\t\t\tatom.addListener('dragstart', function(e) {\n\t\t\t\tvar x = e.getDocumentLeft();\n\t\t\t\tvar y = e.getDocumentTop();\n\t\t\t\ty = y - 30;\n\t\t\t\tx = x + 1;\n\t\t\t\tthis.clipImage = e.getTarget().clone();\n\t\t\t\tif(desktop.SelectionManager.getInstance().hasSelection() && desktop.SelectionManager.getInstance().getSelection().length > 1) {\n\t\t\t\t\tthis.clipImage.setIcon('eyeos\/extern\/images\/48x48\/places\/document-multiple.png');\n\t\t\t\t\tthis.clipImage.setLabel(desktop.SelectionManager.getInstance().getSelection().length+ ' ' +tr('files'))\n\t\t\t\t}\n\t\t\t\tthis.clipImage.setOpacity(0.5);\n\t\t\t\tdocument.eyeDesktop.add(this.clipImage);\n\t\t\t\tthis.clipImage.set({\n\t\t\t\t\tzIndex: 100003\n\t\t\t\t});\n\t\t\t\tthis.clipImage.setMarginTop(y);\n\t\t\t\tthis.clipImage.setMarginLeft(x);\n\t\t\t\te.stopPropagation();\n\t\t\t}, this);\n\n\t\t\tatom.addListener('drag', function(e) {\n\t\t\t\tvar x = e.getDocumentLeft();\n\t\t\t\tvar y = e.getDocumentTop();\n\t\t\t\ty = y - 30;\n\t\t\t\tx = x + 1;\n\t\t\t\tthis.clipImage.setMarginTop(y);\n\t\t\t\tthis.clipImage.setMarginLeft(x);\n\t\t\t}, this);\n\n\t\t\tatom.addListener('dragend', function(e) {\n\t\t\t\tthis.clipImage.destroy();\n\t\t\t}, this);\n\n\t\t\tatom.addListener('drop', function(e) {\n\t\t\t\tvar item = e.getRelatedTarget();\n\t\t\t\tif (!item) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar path = item.getUserData('path');\n\t\t\t\tvar topath = file.absolutepath;\n\t\t\t\tvar dbus = eyeos.messageBus.getInstance();\n\t\t\t\t\/\/dirname from php.js\n\t\t\t\tdbus.send('files', 'delete', [path.replace(\/\\\\\/g, '\/').replace(\/\\\/[^\\\/]*\\\/?$\/, ''), [path]]);\n\t\t\t\teyeos.callMessage(checknum, 'moveFile', [path, topath], function(e) {\n\n\t\t\t\t\t}, this);\n\t\t\t\te.stopPropagation();\n\t\t\t}, this);\n\n\t\t\tif (alone) {\n\t\t\t\tatom.addListener('appear', function (e) {\n\t\t\t\t\tvar domele = this.getChildControl('label').getContainerElement().getDomElement();\n\t\t\t\t\tdomele.childNodes[0].style.fontFamily = 'Arial, Helvetica, Lucida Grande';\n\t\t\t\t\t\/\/                    domele.childNodes[0].style.fontSize = '12px';\n\t\t\t\t\tdomele.childNodes[0].style.textShadow =  '#000000 0px 1px 1px';\n\t\t\t\t\tdomele.childNodes[0].style.color = '#FFFFFF';\n\t\t\t\t\tdomele.childNodes[0].style.fontWeight = 'bold';\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tatom.setUserData('path', file.absolutepath);\n\t\t\tatom.setUserData('info', file);\n\t\t\tif (file.type == 'folder') {\n\t\t\t\tatom.setDroppable(true);\n\t\t\t\tatom.addListener('dblclick', function () {\n\t\t\t\t\teyeos.execute('files', checknum, [this.getUserData('path')]);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvar listenerFunction =  function () {\n\t\t\t\t\teyeos.openFile(this.getUserData('path'), checknum);\n\t\t\t\t};\n\t\t\t\tatom.addListener('dblclick', listenerFunction);\n\t\t\t}\n\n\t\t\t\/\/selecting stuff\n\t\t\tatom.addListener('click', function(e) {\n\t\t\t\tif(!this.controlKeyPressed) {\n\t\t\t\t\tdesktop.SelectionManager.getInstance().singleSelect(e.getTarget());\n\t\t\t\t} else {\n\t\t\t\t\tdesktop.SelectionManager.getInstance().addToSelection(e.getTarget());\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tatom.addListener('mousedown', function(e) {\n\t\t\t\tif(!this.controlKeyPressed) {\n\t\t\t\t\tdesktop.SelectionManager.getInstance().singleSelect(e.getTarget());\n\t\t\t\t} else {\n\t\t\t\t\tdesktop.SelectionManager.getInstance().addToSelection(e.getTarget());\n\t\t\t\t}\n\t\t\t});\n\n            \n\t\t\t\/\/we need a hack here...because there is nothing draw on the screen, but we need to calculate!\n\t\t\t\/\/so, we are going through dom...\n\t\t\tvar h = 0;\n\t\t\tif(document.innerHeight) {\n\t\t\t\th=document.innerHeight;\n\t\t\t} else if(document.documentElement.clientHeight) {\n\t\t\t\th=document.documentElement.clientHeight;\n\t\t\t} else if(document.body) {\n\t\t\t\th=document.body.clientHeight;\n\t\t\t}\n\n\t\t\tvar w = 0;\n\t\t\tif(document.innerWidth) {\n\t\t\t\tw=document.innerWidth;\n\t\t\t} else if(document.documentElement.clientWidth) {\n\t\t\t\tw=document.documentElement.clientWidth;\n\t\t\t} else if(document.body) {\n\t\t\t\tw=document.body.clientWidth;\n\t\t\t}\n\t\t\tw = w-100; \/\/we need some extra space for bars etc\n\t\t\t\n\t\t\tif(file.meta && file.meta.iconPositionY && file.meta.iconPositionX) {\n\t\t\t\twidgetContainer.add(atom);\n\t\t\t\tvar positionX = file.meta.iconPositionX;\n\t\t\t\tvar positionY = file.meta.iconPositionY;\n\n\t\t\t\tif(positionX > w) {\n\t\t\t\t\tpositionX = w - 90;\n\t\t\t\t}\n\n\t\t\t\tif(positionY > h) {\n\t\t\t\t\tpositionY = h - 220;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tatom.setUserBounds(positionX, positionY, 76, 92);\n\t\t\t\tatom.setUserData('manualPosition', true);\n\t\t\t} else {\n\t\t\t\tvar childrens = widgetContainer.getChildren();\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\t\n\n\n\t\t\t\t\n\n\n\t\t\t\tfor(var i in childrens) {\n\t\t\t\t\tif(childrens[i].classname == 'qx.ui.basic.Atom') {\n\t\t\t\t\t\tif(!childrens[i].getUserData('manualPosition')) {\n\t\t\t\t\t\t\ty = y + 102; \/\/92 + 10\n\t\t\t\t\t\t\tif(y + 150 > h)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\t\tx = x + 86; \/\/76 + 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tatom.setUserBounds(x, y, 76, 92);\n\n\t\t\t\twidgetContainer.add(atom);\n\t\t\t}\n\t\t}\n\t}\n});\n\nqx.Interface.define('desktop.widget.IWidget', {\n\tmembers: {\n\t\t\/**\n\t\t *\tThis method should implement a manager which, using a switch case,\n\t\t *\tshould be able to call the appropiate method for this items which\n\t\t *\tare declared as 'dynamics' cmd defined in the\n\t\t *\t{@see eyeos.ui.genericbar.IItems} extending class.\n\t\t *\/\n\t\tgetTitle: function(){}\n\t}\n});\n\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.SelectionManager', {\n    type: 'singleton',\n    extend: qx.core.Object,\n\n    members: {\n        singleSelect: function(item) {\n            this.clearSelection();\n\n            item.set({\n                backgroundColor:'#cccccc'\n            });\n\t\t\t\n            if(!this.selection) {\n                this.selection = [];\n            }\n            this.selection.push(item);\n        },\n\n        clearSelection: function() {\n            if(this.selection) {\n                for(var i in this.selection) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif(this.selection[i] && this.selection[i].isVisible()) {\n\t\t\t\t\t\t\tthis.selection[i].set({\n\t\t\t\t\t\t\t\tbackgroundColor:'transparent'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch(e) {\n\t\t\t\t\t\t\/\/ do nothing\n\t\t\t\t\t}\n                }\n                this.selection = [];\n            }\n\n        },\n\n        addToSelection: function(item) {\n            item.set({\n                backgroundColor:'#cccccc'\n            })\n            if(!this.selection) {\n                this.selection = [];\n            }\n            this.selection.push(item);\n        },\n\n        getSelection: function() {\n\t\t\tif(!this.selection) {\n\t\t\t\tthis.selection = [];\n\t\t\t}\n            return this.selection;\n        },\n\n        hasSelection: function() {\n            if(this.selection && this.selection.length > 0) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n});\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.actionManager', {\n    type: 'singleton',\n    extend: qx.core.Object,\n\n    properties: {\n        checknum: {\n            init: null\n        }\n    },\n\n    members: {\n        uploadFile: function() {\n\t\t\teyeos.execute('upload', this.getChecknum(), ['home:\/\/\/Desktop\/']);\n\t\t},\n\n\t\topenFile: function() {\n\t\t\tvar selection = desktop.SelectionManager.getInstance().getSelection();\n\t\t\teyeos.openFiles(selection, this.getChecknum());\n\t\t},\n\n\n\t\tdeleteFile: function() {\n\t\t\tvar selection = desktop.SelectionManager.getInstance().getSelection();\n\t\t\tvar deletedPaths = [];\n\t\t\tfor(var i in selection) {\n\t\t\t\ttry {\n\t\t\t\t\tdeletedPaths.push(selection[i].getUserData('path'));\n\t\t\t\t\tselection[i].destroy();\n\t\t\t\t}\n\t\t\t\tcatch(e) {\n\t\t\t\t\t\/\/ do nothing\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(deletedPaths);\n\t\t\tvar dbus = eyeos.messageBus.getInstance();\n\t\t\tdbus.send('files', 'delete', ['home:\/\/~' + eyeos.getCurrentUserName() + '\/Desktop', deletedPaths]);\n\t\t\t\/\/now, do the real deletion :)\n\t\t\teyeos.callMessage(this.getChecknum(), 'deleteFiles', deletedPaths, function(e) {\n\n\t\t\t}, this);\n\t\t},\n\n\t\tdownloadFile: function() {\n\t\t\tvar selection = desktop.SelectionManager.getInstance().getSelection();\n\t\t\tfor(var i in selection) {\n\t\t\t\teyeos.execute('download', this.getChecknum(), [selection[i].getUserData('path')]);\n\t\t\t}\n\t\t\t\n\t\t},\n\n                shareURLFile: function () {\n                   var selection = desktop.SelectionManager.getInstance().getSelection();\n                   for(var i in selection) {\n                    eyeos.execute('urlshare',  this.getChecknum(),  [selection[i].getUserData('path'),true]);\n                   }\n\n                },\n\n\t\topenSettings: function() {\n\t\t\teyeos.execute('newusersettings', this.getChecknum());\n\t\t},\n\n\t\teditFile: function() {\n\t\t\tvar selection = desktop.SelectionManager.getInstance().getSelection();\n\t\t\tif(selection.length > 1) {\n\t\t\t\talert(tr('You can not rename multiple files at once'));\n\t\t\t}\n\n\t\t\tvar file = selection[0];\n\n\t\t\tfile.getChildControl('label').exclude();\n\t\t\tvar textbox = new qx.ui.form.TextField(file.getChildControl('label').getValue());\n\t\t\ttextbox.setTextSelection(0, file.getChildControl('label').getValue().lastIndexOf('.'));\n\t\t\tfile._add(textbox);\n\t\t\ttextbox.focus();\n\n\t\t\ttextbox.setDraggable(true);\n\n\t\t\ttextbox.addListener('dblclick', function(e) {\n\t\t\t\te.stopPropagation();\n\t\t\t}, this);\n\n\t\t\ttextbox.addListener('click', function(e) {\n\t\t\t\te.stopPropagation();\n\t\t\t}, this);\n\n\t\t\ttextbox.addListener('dragstart', function(e) {\n\t\t\t\te.stopPropagation();\n\t\t\t}, this);\n\n\t\t\ttextbox.addListener('dragend', function(e) {\n\t\t\t\te.stopPropagation();\n\t\t\t}, this);\n\n\t\t\ttextbox.addListener('drag', function(e) {\n\t\t\t\te.stopPropagation();\n\t\t\t}, this);\n\t\t\tvar checknum = this.getChecknum();\n\t\t\tvar rename = function(e) {\n\t\t\t\tvar element = e.getTarget();\n\t\t\t\tvar oldname = element.getUserData('parent').getUserData('path');\n\t\t\t\tvar newname = element.getValue();\n\t\t\t\tvar parent = element.getUserData('parent');\n\t\t\t\tif(oldname == 'home:\/\/~'+eyeos.getCurrentUserName()+'\/Desktop\/'+newname) {\n\t\t\t\t\tparent.getChildControl('label').show();\n\t\t\t\t\telement.destroy();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(newname == \"\" || !newname) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(newname == \"sun will always shine in japan.txt\") {\n\t\t\t\t\teyeos.messageBus.getInstance().send('desktop', 'changeWallpaper', [\"image\",\"sys:\/\/\/extern\/images\/wallpapers\/nature\/Fuji.jpg\"]);\n\t\t\t\t}\n\t\t\t\teyeos.callMessage(checknum, 'renameFile', [oldname,'home:\/\/\/Desktop\/'+newname], function (results) {\n\t\t\t\t\tif(results == \"duplicated\") {\n\t\t\t\t\t\tparent.getChildControl('label').show();\n\t\t\t\t\t\telement.destroy();\n\t\t\t\t\t\talert(\"A file with the same name already exists!\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparent.getChildControl('label').show();\n\t\t\t\t\t\tparent.setLabel(newname);\n\t\t\t\t\t\tparent.setUserData('path', 'home:\/\/~'+eyeos.getCurrentUserName()+'\/Desktop\/'+newname);\n\t\t\t\t\t\tvar info = parent.getUserData('info');\n\t\t\t\t\t\tinfo.absolutepath = 'home:\/\/~'+eyeos.getCurrentUserName()+'\/Desktop\/'+newname;\n\t\t\t\t\t\tparent.setUserData('info', info)\n\t\t\t\t\t\telement.destroy();\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t};\n\t\t\t\n\t\t\ttextbox.addListener('blur', rename, this);\n\t\t\ttextbox.setUserData('parent',file);\n\t\t\ttextbox.addListener('keypress', function(e) {\n\t\t\t\tif (e.getKeyIdentifier().toLowerCase() == 'enter') {\n\t\t\t\t\tif(this.getValue()) {\n\t\t\t\t\t\tthis.exclude();\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tnewFolder: function() {\n\t\t\teyeos.callMessage(this.getChecknum(), 'createFolder', ['home:\/\/\/Desktop\/New Folder'], function (results) {\n\t\t\t\tvar dBus = eyeos.messageBus.getInstance();\n\t\t\t\tdBus.send('files', 'new', ['home:\/\/~' + eyeos.getCurrentUserName() + '\/Desktop', results]);\n\t\t\t}, this);\n\t\t},\n\n\t\tnewFile: function(param) {\n\t\t\teyeos.callMessage(this.getChecknum(), 'createFile', ['home:\/\/\/Desktop\/New File.'+param], function (results) {\n\t\t\t\tvar dBus = eyeos.messageBus.getInstance();\n\t\t\t\tdBus.send('files', 'new', ['home:\/\/~' + eyeos.getCurrentUserName() + '\/Desktop', results]);\n\t\t\t}, this);\n\t\t},\n\n\t\tnewLink: function() {\n\t\t\teyeos.execute('newLink', this.getChecknum(), ['home:\/\/~' + eyeos.getCurrentUserName() + '\/Desktop']);\n\t\t}\n\t}\n});\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.chatManager', {\n\ttype: 'singleton',\n\textend: qx.core.Object,\n\n\tproperties: {\n\t\tchecknum: {\n\t\t\tinit: null\n\t\t},\n\t\thasFocus: {\n\t\t\tinit: true\n\t\t}\n\t},\n\n\tmembers: {\n\t\tregisterListeners: function(app) {\n\t\t\tvar self = this;\n\t\t\tthis.timer = null;\n\t\t\twindow.onblur = function(){\n\t\t\t\tself.setHasFocus(false);\n\t\t\t}\n\n\t\t\twindow.onfocus = function(){\n\t\t\t\tself.setHasFocus(true);\n\t\t\t\tclearInterval(self.timer);\n\t\t\t\tdocument.title = eyeos.getCurrentUserName() +' @ eyeOS ' + eyeos.version;\n\t\t\t}\n\t\t\t\n\t\t\tthis.activeChats = {};\n\t\t\tthis.app = app;\n\t\t\tvar dbus = eyeos.messageBus.getInstance();\n\t\t\tdbus.addListener('eyeos_chat_requestchat', function (e) {\n\t\t\t\tif(!this.activeChats[e.getData().getNickname()]) {\n\t\t\t\t\tthis.createChat(e.getData());\n\t\t\t\t} else {\n\t\t\t\/\/this.activeChats.focus();\n\t\t\t}\n\t\t\t}, this);\n\n\t\t\tdbus.addListener('eyeos_chat_message', function (e) {\n\t\t\t\tvar data = qx.util.Json.parse(e.getData());\n\t\t\t\tvar who = data[0];\n\t\t\t\t\/\/extract user info with CM\n\t\t\t\tvar text = data[1];\n\t\t\t\teyeos.contacts.ContactManager.getInstance().getContactsByNicknames([who], function(e) {\n\t\t\t\t\tvar infoUser = e[0];\n\t\t\t\t\tif(!this.activeChats[who]) {\n\t\t\t\t\t\tthis.createChat(infoUser, text);\n\t\t\t\t\t\tdocument.audio.play();\n\t\t\t\t\t\tif(this.getHasFocus()) {\n\t\t\t\t\t\t\teyeos.messageBus.getInstance().send('desktop', 'showDesktopNotification', [who + ': ' + text]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.oldTitle = eyeos.getCurrentUserName() +' @ eyeOS ' + eyeos.version; \/\/copuling here, there are problems\n\t\t\t\t\t\t\t\/\/with some browsers getting document.title\n\t\t\t\t\t\t\tvar self = this;\n\t\t\t\t\t\t\tclearInterval(this.timer);\n\t\t\t\t\t\t\tthis.timer = setInterval(function() {\n\t\t\t\t\t\t\t\tif(document.title == self.oldTitle) {\n\t\t\t\t\t\t\t\t\tdocument.title = who+ ' is messaging you';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdocument.title = self.oldTitle;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!this.activeChats[who].isActive() && this.getHasFocus()) {\n\t\t\t\t\t\t\tdocument.audio.play();\n\t\t\t\t\t\t\teyeos.messageBus.getInstance().send('desktop', 'showDesktopNotification', [who + ': ' + text]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(!this.getHasFocus()) {\n\t\t\t\t\t\t\tdocument.audio.play();\n\t\t\t\t\t\t\tthis.oldTitle = eyeos.getCurrentUserName() +' @ eyeOS ' + eyeos.version; \/\/copuling here, there are problems\n\t\t\t\t\t\t\tclearInterval(this.timer);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/with some browsers getting document.title\n\t\t\t\t\t\t\tvar self = this;\n\t\t\t\t\t\t\tthis.timer = setInterval(function() {\n\t\t\t\t\t\t\t\tif(document.title == self.oldTitle) {\n\t\t\t\t\t\t\t\t\tdocument.title = who+ ' is messaging you';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdocument.title = self.oldTitle;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar messagesText = this.activeChats[who].getUserData('messages');\n\t\t\t\t\t\tvar safeText = this.htmlEntities(text);\n\t\t\t\t\t\tvar exp = \/(\\b(https?:\\\/\\\/|ftp:\\\/\\\/|file:\\\/\\\/|www\\.)[-A-Z0-9+&@#\\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\\/%=~_|])\/ig;\n\t\t\t\t\t\tsafeText = safeText.replace(exp,\"<a target='_new' href='$1'>$1<\/a>\"); \n\t\t\t\t\t\tsafeText = safeText.replace(\"<a target='_new' href='www\", \"<a target='_new' href='http:\/\/www\");\n\t\t\t\t\t\tif(messagesText.getUserData('last') == who) {\n\t\t\t\t\t\t\tvar message = '<div style=\"color:#222222;padding-left:6px\">'+safeText+'<\/div>';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\/\/change roles!\n\t\t\t\t\t\t\t\/\/leave a little space between last message\n\t\t\t\t\t\t\tvar message = '<div style=\"color:#222222;padding-left:6px;padding-top:6px\"><strong style=\"padding-bottom:6px\">'+this.htmlEntities(who)+': <\/strong><div>'+safeText+'<\/div><\/div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmessagesText.setUserData('last', who);\n\t\t\t\t\t\tmessagesText.setValue(messagesText.getValue()+message);\n\t\t\t\t\t\tmessagesText.getLayoutParent().getLayoutParent().scrollByY(900000);\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t}, this);\n\n\t\t\tdbus.addListener('eyeos_people_userDisconnected', function (e) {\n\t\t\t\tvar contactName = e.getData().getNickname();\n\n\t\t\t\tif (this.activeChats[contactName]) {\n\t\t\t\t\tthis.disableChat(this.activeChats[contactName]);\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tdbus.addListener('eyeos_people_userConnected', function (e) {\n\t\t\t\tvar contactName = e.getData().getNickname();\n\n\t\t\t\tif (this.activeChats[contactName]) {\n\t\t\t\t\tthis.enableChat(this.activeChats[contactName]);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\tcreateChat: function(principal, text) {\n\t\t\tvar displayName = principal.getMetadataInstance().getAllMeta()['eyeos.user.firstname'] + ' ' + principal.getMetadataInstance().getAllMeta()['eyeos.user.lastname'];\n\t\t\tvar mainWindow = new eyeos.ui.ChatWindow(this.app, tr('Chat with') + ' ' + displayName).set({\n\t\t\t\twidth: 300,\n\t\t\t\theight: 460,\n\t\t\t\tlayout: new qx.ui.layout.VBox(),\n\t\t\t\tcontentPadding:10\n\t\t\t});\n\t\t\t\n\t\t\tthis.activeChats[principal.getNickname()] = mainWindow;\n\t\t\tmainWindow.addListener('beforeClose', function(e) {\n\t\t\t\tthis.activeChats[principal.getNickname()] = null;\n\t\t\t}, this);\n\n\t\t\tvar messagesArea = new qx.ui.container.Composite(new qx.ui.layout.VBox());\n\n\t\t\tvar value = \"\";\n\t\t\tvar messagesText = new qx.ui.basic.Label().set({\n\t\t\t\trich: true,\n\t\t\t\tselectable: true\n\t\t\t});\n\t\t\tmainWindow.setUserData('messages', messagesText);\n\t\t\tmainWindow.setUserData('chatEnabled', true);\n\t\t\t\n\n\t\t\tif(text) {\n\t\t\t\tvar safeText = this.htmlEntities(text);\n\t\t\t\tvar exp = \/(\\b(https?:\\\/\\\/|ftp:\\\/\\\/|file:\\\/\\\/|www\\.)[-A-Z0-9+&@#\\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\\/%=~_|])\/ig;\n\t\t\t\tsafeText = safeText.replace(exp,\"<a target='_new' href='$1'>$1<\/a>\"); \n\t\t\t\tsafeText = safeText.replace(\"<a target='_new' href='www\", \"<a target='_new' href='http:\/\/www\");\n\t\t\t\tmessagesText.setUserData('last', principal.getNickname());\n\t\t\t\tvalue += '<div style=\"color:#222222;padding-left:6px;padding-top:6px\"><strong style=\"padding-bottom:6px\">' + this.htmlEntities(principal.getNickname()) + ': <\/strong><div>' + safeText + '<\/div><\/div>';\n\t\t\t}\n\t\t\tmessagesText.setValue(value);\n\t\t\tmessagesArea.add(messagesText, {\n\t\t\t\tflex: 1\n\t\t\t});\n\t\t\tvar writeArea = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({\n\t\t\t\theight:50\n\t\t\t});\n\n\t\t\tvar tarea = new qx.ui.form.TextArea();\n\t\t\tmainWindow.setUserData('textArea', tarea);\n\n\t\t\tvar sendButton = new qx.ui.form.Button(tr('Send')).set({\n\t\t\t\tmarginTop:2,\n\t\t\t\tmarginBottom:2,\n\t\t\t\tshadow:null\n\t\t\t});\n\t\t\tmainWindow.setUserData('sendButton', sendButton)\n\t\t\tvar scroller = new qx.ui.container.Scroll(messagesArea).set({\n\t\t\t\tmarginBottom: 7,\n\t\t\t\tdecorator: new qx.ui.decoration.Single(1, 'solid', '#C5C5C5')\n\t\t\t});\n\t\t\tvar self = this;\n\t\t\tvar sendMessage = function() {\n\t\t\t\tvar origmessage = tarea.getValue();\n\t\t\t\ttarea.setValue(\"\");\n\t\t\t\tif(origmessage == \"\" || mainWindow.getUserData('chatEnabled') == false ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar safeText = self.htmlEntities(origmessage);\n\t\t\t\tvar exp = \/(\\b(https?:\\\/\\\/|ftp:\\\/\\\/|file:\\\/\\\/|www\\.)[-A-Z0-9+&@#\\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\\/%=~_|])\/ig;\n\t\t\t\tsafeText = safeText.replace(exp,\"<a target='_new' href='$1'>$1<\/a>\");\n\t\t\t\tsafeText = safeText.replace(\"<a target='_new' href='www\", \"<a target='_new' href='http:\/\/www\");\n\t\t\t\t\/\/first, show it in the messagesArea\n\t\t\t\tif(messagesText.getUserData('last') == eyeos.getCurrentUserName()) {\n\t\t\t\t\tmessage = '<div style=\"background-color:#E6E6E6;color:#222222;padding-left:6px\">' + safeText + '<\/div>';\n\t\t\t\t} else {\n\t\t\t\t\tmessage = '<div style=\"background-color:#E6E6E6;color:#222222;padding-left:6px;padding-top:6px\"><strong style=\"padding-bottom:6px\">' + self.htmlEntities(eyeos.getCurrentUserName()) + ': <\/strong><div>' + safeText + '<\/div><\/div>';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmessagesText.setUserData('last', eyeos.getCurrentUserName());\n\t\t\t\tmessagesText.setValue(messagesText.getValue()+message);\n\t\t\t\tscroller.scrollByY(900000);\n\n\t\t\t\tvar dest = principal.getId();\n\t\t\t\tvar netSync = eyeos.netSync.NetSync.getInstance();\n\t\t\t\tvar message = new eyeos.netSync.Message({\n\t\t\t\t\ttype: 'chat',\n\t\t\t\t\tname: 'message',\n\t\t\t\t\tto: dest,\n\t\t\t\t\tdata: [eyeos.getCurrentUserName(), origmessage]\n\t\t\t\t});\n\t\t\t\tnetSync.send(message);\n\t\t\t\ttarea.focus();\n\t\t\t}\n\t\t\t\n\t\t\ttarea.addListener('keyup', function(e) {\n\t\t\t\tif (e.getKeyIdentifier() == 'Enter') {\n\t\t\t\t\tsendMessage();\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tsendButton.addListener('click', sendMessage, this);\n\n\t\t\tvar infoArea = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({\n\t\t\t\t});\n\n\t\t\tvar userId = eyeos.getCurrentUserData().id;\n\t\t\tvar image = new qx.ui.basic.Image('index.php?checknum=' + this.getChecknum() + '&message=__UserInfo_getAvatarPicture&params[userId]='+principal.getId());\n\t\t\timage.set({\n\t\t\t\tscale: true,\n\t\t\t\twidth: 50,\n\t\t\t\theight: 50,\n\t\t\t\tmarginRight:4,\n\t\t\t\tmarginBottom:10\n\t\t\t});\n\n\t\t\t\/\/user part\n\t\t\tvar userBox = new qx.ui.container.Composite(new qx.ui.layout.VBox());\n\n\t\t\tvar label = new qx.ui.basic.Label().set({\n\t\t\t\tvalue:displayName,\n\t\t\t\tfont: new qx.bom.Font(16, ['Arial']),\n\t\t\t\ttextColor: '#333333'\n\t\t\t});\n\n\t\t\tthis.labelInfo = new qx.ui.basic.Label().set({\n\t\t\t\tvalue:'On-line',\n\t\t\t\tfont: new qx.bom.Font(12, ['Arial']),\n\t\t\t\ttextColor: '#6F8E0D',\n\t\t\t\tmarginTop:0\n\t\t\t});\n\n\t\t\tuserBox.add(label);\n\t\t\tuserBox.add(this.labelInfo);\n\t\t\tthis.userBox = userBox;\n\t\t\tinfoArea.add(image);\n\t\t\tinfoArea.add(userBox);\n\t\t\twriteArea.add(tarea, {\n\t\t\t\tflex:1\n\t\t\t});\n\t\t\twriteArea.add(sendButton);\n\t\t\tmainWindow.add(infoArea);\n\t\t\tmainWindow.add(scroller, {\n\t\t\t\tflex:1\n\t\t\t});\n\t\t\tmainWindow.add(writeArea);\n\t\t\tmainWindow.open();\n\t\t\ttarea.focus();\n\t\t\t\n\t\t\t\/\/size\n\t\t\tscroller.addListener('appear', function(e) {\n\t\t\t\tvar bounds = e.getTarget().getBounds();\n\t\t\t\tvar offset = 2; \/\/2 = 1+1 px border from right and left\n\n\t\t\t\tmessagesArea.setMinWidth(bounds.width-offset); \n\t\t\t\tmessagesText.setMinWidth(bounds.width-offset);\n\t\t\t}, this);\n\t\t\t\n\t\t\tscroller.getChildControl('scrollbar-y').addListener('appear', function(e) {\n\t\t\t\tvar bounds = scroller.getBounds();\n\t\t\t\tvar offset = e.getTarget().getBounds().width+2;\n\t\t\t\tmessagesArea.setMinWidth(bounds.width-offset); \n\t\t\t\tmessagesText.setMinWidth(bounds.width-offset);\n\t\t\t}, this);\n\t\t\t\n\t\t\tscroller.addListener('resize', function(e) {\n\t\t\t\tvar bounds = e.getTarget().getBounds();\n\t\t\t\tvar offset = 2; \/\/2 = 1+1 px border from right and left\n\t\t\t\tif(e.getTarget().getChildControl('scrollbar-y').getVisibility() == 'visible') {\n\t\t\t\t\toffset = e.getTarget().getChildControl('scrollbar-y').getBounds().width+2;\n\t\t\t\t}\n\t\t\t\tmessagesArea.setMinWidth(bounds.width-offset); \n\t\t\t\tmessagesText.setMinWidth(bounds.width-offset);\n\t\t\t}, this);\n\t\t},\n\n\t\tdisableChat: function (chatWindow) {\n\t\t\tif (chatWindow.getUserData('chatEnabled') == true) {\n\t\t\t\tchatWindow.setUserData('chatEnabled', false);\n\t\t\t\tvar messageArea = chatWindow.getUserData('messages');\n\t\t\t\tvar message = '<div style=\"color:red\"><i>User goes offline<\/i><\/div>';\n\t\t\t\tmessageArea.setValue(messageArea.getValue() + message);\n\n\t\t\t\tvar sendButton = chatWindow.getUserData('sendButton');\n\t\t\t\tsendButton.setEnabled(false);\n\t\t\t\t\n\t\t\t\tthis.labelInfo.destroy();\n\t\t\t\tthis.labelInfo = new qx.ui.basic.Label().set({\n\t\t\t\t\tvalue:'Off-line',\n\t\t\t\t\tfont: new qx.bom.Font(12, ['Arial']),\n\t\t\t\t\ttextColor: '#999999',\n\t\t\t\t\tmarginTop:0\n\t\t\t\t});\n\t\t\t\tthis.userBox.add(this.labelInfo);\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\tenableChat: function (chatWindow) {\n\t\t\tif (chatWindow.getUserData('chatEnabled') == false) {\n\t\t\t\tchatWindow.setUserData('chatEnabled', true);\n\t\t\t\tvar messageArea = chatWindow.getUserData('messages');\n\t\t\t\tvar message = '<div style=\"color:green\"><i>User is now online<\/i><\/div>';\n\t\t\t\tmessageArea.setValue(messageArea.getValue() + message);\n\t\t\t\t\n\t\t\t\tvar sendButton = chatWindow.getUserData('sendButton');\n\t\t\t\tsendButton.setEnabled(true);\n\t\t\t\t\n\t\t\t\tthis.labelInfo.destroy();\n\t\t\t\tthis.labelInfo = new qx.ui.basic.Label().set({\n\t\t\t\t\tvalue:'On-line',\n\t\t\t\t\tfont: new qx.bom.Font(12, ['Arial']),\n\t\t\t\t\ttextColor: '#6F8E0D',\n\t\t\t\t\tmarginTop:0\n\t\t\t\t});\n\t\t\t\tthis.userBox.add(this.labelInfo);\n\t\t\t}\n\t\t},\n\t\thtmlEntities: function (text) {\n\t\t\treturn text.replace(\/&\/g,'&amp;').replace(\/<\/g,'&lt;').replace(\/>\/g,'&gt;');\n\t\t}\n\n\t}\n});\n\nqx.Class.define('eyeos.ui.ChatWindow', {\n\textend: eyeos.ui.Window,\n\n\t\/**\n\t * @param application {eyeos.system.EyeApplication}\n\t * @param caption {String}\n\t * @param icon {String}\n\t * @param fakeMinimize {Boolean ? false}\n\t * @param fakeClose {Boolean ? false}\n\t *\/\n\tconstruct: function(application, caption, icon, fakeMinimize, fakeClose) {\n\t\targuments.callee.base.call(this, application, caption, icon, fakeMinimize, fakeClose);\n\t},\n\n\tmembers: {\n\t\t_onClose: function(e) {\n\n\t\t}\n\t}\n});\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.widget.events', {\n    extend: qx.core.Object,\n    implement: [desktop.widget.IWidget],\n\n    construct: function (checknum, id) {\n        this.setChecknum(checknum);\n        this.setId(id);\n    },\n\n    properties: {\n        checknum: {\n            init: null\n        },\n        id: {\n           init: null\n        },\n        settings: {\n           init: null\n        },\n        internalWidget: {\n            init:null\n        }\n    },\n\n    members: {\n        settings: null,\n\n        getTitle: function() {\n            return \"Events\";\n        },\n\n        createWidget: function() {\n            if (this.getSettings() == null) {\n                var settings = '';\n            } else {\n                var settings = this.getSettings();\n            }\n\n            var checknum = this.getChecknum();\n            var id = this.getId();\n\n             var widget = new eyeos.dashboard.Widget(tr('Events'), id, '', false, checknum).set({\n                icon: 'index.php?extern=\/images\/events\/activity_16x16.png'\n            });\n\n            if(settings.minimized) {\n                widget.toggleMinimize();\n            }\n\n            var buttonsLayout = new qx.ui.container.Composite().set({\n                layout: new qx.ui.layout.HBox(),\n                backgroundColor: '#eeeeee',\n                marginTop: 10,\n                marginLeft: 10,\n                marginRight: 10,\n                padding: 3\n            });\n            widget.addContent(buttonsLayout);\n\n            var widgetScroll = new qx.ui.container.Scroll().set({\n                height: 160,\n                allowGrowY: false\n            });\n            widget.addContent(widgetScroll, {\n                flex: 1\n            });\n\n            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({\n                padding: 5\n            });\n\n            if (settings && settings.items) {\n                var numberOfItems = parseInt(settings.items);\n            } else {\n                var numberOfItems = 5;\n            }\n\n            widget.setUserData('container', widgetContainer);\n            widgetScroll.add(widgetContainer);\n\n            var actualButtonSelected = 'All';\n\n            createButtons(checknum);\n            createSettingsForm();\n            createContent(widgetContainer, actualButtonSelected, numberOfItems);\n            addListeners();\n\n            function addListeners() {\n                var bus = eyeos.messageBus.getInstance();\n\n                bus.addListener('eyeos_events_newEvent', function() {\n                    createContent(widgetContainer, actualButtonSelected, numberOfItems);\n                }, this);\n\n                bus.addListener('eyeos_events_updateEvent', function() {\n                    createContent(widgetContainer, actualButtonSelected, numberOfItems);\n                }, this);\n            }\n\n            function createSettingsForm() {\n                var form = widget._widgetSettingsPanelForm;\n                var itemsLabel = new qx.ui.basic.Label(tr('number of items'));\n                form.add(itemsLabel, {\n                    row: 0,\n                    column: 0\n                });\n\n                var itemsSpinner = new qx.ui.form.Spinner(1, numberOfItems, 20);\n                form.add(itemsSpinner, {\n                    row: 0,\n                    column: 1\n                });\n\n                form.setUserData('settings_items', itemsSpinner);\n\n                widget._widgetSettingsPanelButtonSave.addListener('execute', function() {\n                    var params = new Array();\n                    var settings = new Array();\n\n                    settings = {\n                        items: widget._widgetSettingsPanelForm.getUserData('settings_items').getValue()\n                    };\n\n                    params = {\n                        widget: 'events',\n                        settings: settings\n                    };\n\n                    eyeos.callMessage(checknum, 'saveSettingsWidget', params, function() {\n                        numberOfItems = settings['items'];\n                        createContent(widgetContainer, null, numberOfItems);\n                    });\n                });\n                widget._widgetSettingsPanelButtonCancel.addListener('execute', function() {\n                    itemsSpinner.setValue(numberOfItems);\n                });\n\n            }\n\n            function createButtons (checknum) {\n                buttonsLayout.removeAll();\n                \/\/\tdecorator rounded all borders\n                var borderAll = new qx.ui.decoration.RoundBorderBeveled().set({\n                    leftTopR: 3,\n                    rightTopR: 3,\n                    leftBottomR: 3,\n                    rightBottomR: 3\n                });\n\n                createButton('All');\n                createButton('Pending');\n                createButton('Files');\n                createButton('People');\n                createButton('Groups');\n\n                function createButton (name) {\n\n                    var button = new qx.ui.container.Composite(new qx.ui.layout.HBox(0));\n                    button.set({\n                        decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)\n                    })\n                    button.setHeight(18);\n                    button.setMaxHeight(18);\n                    var buttonLabel = new qx.ui.basic.Label(tr(name));\n                    buttonLabel.setPadding(2);\n                    buttonLabel.setFont(new qx.bom.Font(11, [\"Lucida Grande\", \"Verdana\"]));\n                    button.add(buttonLabel);\n                    if (actualButtonSelected == name) {\n                        button.setBackgroundColor(\"#61676d\");\n                        buttonLabel.setTextColor('#ffffff');\n\n                    } else {\n                        buttonLabel.setTextColor(\"#000000\");\n                        button.addListener(\"mouseout\", function (e) {\n                            if (!qx.ui.core.Widget.contains(button, e.getRelatedTarget())) {\n                                button.setBackgroundColor(\"#eeeeee\");\n                                buttonLabel.setTextColor('#000000');\n                            }\n                        });\n                    }\n\n                    button.addListener(\"mouseover\", function () {\n                        button.setBackgroundColor(\"#61676d\");\n                        buttonLabel.setTextColor('#ffffff');\n                    });\n\n                    button.addListener(\"click\", function () {\n                        actualButtonSelected = name;\n                        createButtons(checknum);\n                        createContent(widgetContainer, actualButtonSelected, numberOfItems);\n                    });\n\n                    buttonsLayout.add(button);\n                }\n\n                \/\/create clear All button\n                buttonsLayout.add(new qx.ui.core.Spacer(), {\n                    flex: 1\n                });\n\n                var clearAllButton = new qx.ui.container.Composite(new qx.ui.layout.HBox(0));\n                clearAllButton.set({\n                    decorator: borderAll,\n                    alignX: 'right'\n                })\n                clearAllButton.setHeight(18);\n                clearAllButton.setMaxHeight(18);\n                var clearAllLabel = new qx.ui.basic.Label(tr(\"clear\"));\n                clearAllLabel.setTextColor(\"#000000\");\n                clearAllLabel.setPadding(2);\n                clearAllLabel.setFont(new qx.bom.Font(11, [\"Lucida Grande\", \"Verdana\"]));\n                clearAllButton.add(clearAllLabel);\n                clearAllButton.addListener(\"mouseover\", function () {\n                    clearAllButton.setBackgroundColor(\"#61676d\");\n                    clearAllLabel.setTextColor('#ffffff');\n                });\n                clearAllButton.addListener(\"mouseout\", function (e) {\n                    if (!qx.ui.core.Widget.contains(clearAllButton, e.getRelatedTarget())) {\n                        clearAllButton.setBackgroundColor(\"#eeeeee\");\n                        clearAllLabel.setTextColor('#000000');\n                    }\n                });\n\n                clearAllButton.addListener(\"click\", function () {\n                    var childrens = widgetContainer.getChildren();\n                    var arrayItems = new Array();\n                    for (var i = 0; i < childrens.length; ++i) {\n                        if (childrens[i].getUserData('isQuestion') == 0 || childrens[i].getUserData('hasEnded') == 1) {\n                            arrayItems.push(parseInt(childrens[i].getUserData('id')));\n                        }\n                    }\n                    var params = {\n                        'id': arrayItems\n                    };\n                    eyeos.callMessage(checknum,\t\"__Events_deleteEvents\", params, function (results) {\n                        createContent(widgetContainer, actualButtonSelected, numberOfItems);\n                    });\n                }, this);\n\n                buttonsLayout.add(clearAllButton);\n            }\n\n            function createContent(widgetContainer, action, numberItems) {\n                if (numberItems == null) {\n                    numberItems = parseInt(settings.items);\n                }\n                \/\/delete all items\n                widgetContainer.removeAll();\n\n                if (action == null || action == 'All') {\n                    var params = {\n                        from: 0,\n                        to: parseInt(numberItems)\n                    };\n                    eyeos.callMessage(checknum,\t\"__Events_retrieveAllEventNotifications\", params, function (results) {\n                        for (var i = 0; i < results.length; ++i) {\n                            createItem(results[i], i);\n                        }\n                    });\n                } else {\n                    var params = {\n                        from: 0,\n                        to: parseInt(numberItems),\n                        type: action\n                    }\n                    eyeos.callMessage(checknum,\t\"__Events_retrieveAllEventsByType\", params, function (results) {\n                        for (var i = 0; i < results.length; ++i) {\n                            createItem(results[i], i);\n                        }\n                    });\n                }\n            }\n\n            function createItem(result, num) {\n                var backColor = num%2 == 0 ? '#FFFFFF' : '#F0F0F0';\n                var type = result.type;\n\n                type = type.substring(0, type.indexOf('_'));\n                var item = new qx.ui.container.Composite().set({\n                    layout: new qx.ui.layout.VBox(),\n                    marginRight: 5,\n                    paddingRight: 5,\n                    marginLeft: 5,\n                    paddingLeft: 5,\n                    paddingBottom: 5,\n                    backgroundColor: backColor,\n                    alignY: 'middle'\n                });\n                item.setUserData('id', result.id);\n                item.setUserData('availableAnswers', result.availableAnswers);\n                item.setUserData('isQuestion', result.isQuestion);\n                item.setUserData('hasEnded', result.hasEnded);\n\n                var cmpDate = new qx.ui.container.Composite().set({\n                    layout: new qx.ui.layout.HBox()\n                });\n                var path = 'index.php?extern=images\/events\/activ_base-12x12.png';\n                if (type == 'Files') {\n                    path = 'index.php?extern=images\/events\/activ_files-12x12.png'\n                }\n                else if (type == 'Dashboard') {\n                    path = 'index.php?extern=images\/events\/activ_dashboard-12x12.png'\n                }\n                else if (type == 'Applications') {\n                    path = 'index.php?extern=images\/events\/activ_appli-12x12.png'\n                }\n                else if (type == 'People') {\n                    path = 'index.php?extern=images\/events\/activ_people-12x12.png'\n                }\n                else if (type == 'Groups') {\n                    path = 'index.php?extern=images\/events\/activ_groups-12x12.png'\n                }\n\n                var eventIcon = new qx.ui.basic.Image(path).set({\n                    alignY : 'middle',\n                    alignX : 'left',\n                    paddingLeft : 3,\n                    paddingRight : 3,\n                    paddingTop : 0\n                });\n                var dt = new Date(result.creationDate * 1000);\n                function checkTime(i)\n                {\n                    if (i<10)\n                    {\n                        i=\"0\" + i;\n                    }\n                    return i;\n                }\n\n                var labelDate = new qx.ui.basic.Label().set({\n                    value: dt.getDate() + \"\/\" + (dt.getMonth() + 1) + \"\/\" + dt.getFullYear() + \" \" + dt.getHours() + \":\" + checkTime(dt.getMinutes()),\n                    rich: false,\n                    paddingTop: 3,\n                    marginRight: 0,\n                    textAlign: 'right',\n                    font: new qx.bom.Font(11, [\"Lucida Grande\", \"Verdana\"])\n                });\n                var buttons = new qx.ui.container.Composite(new qx.ui.layout.HBox(10)).set({\n                    marginLeft: 20\n                });\n                if (result.isQuestion && !result.hasEnded) {\n                    var actionsButtons = result.availableAnswers.split('#');\n                    if (actionsButtons.length > 0) {\n                        for (var i = 0; i < actionsButtons.length; ++i) {\n                            var text = actionsButtons[i];\n                            var button = new qx.ui.form.Button(text).set({\n                                paddingTop: 0,\n                                paddingBottom: 0,\n                                paddingLeft: 2,\n                                paddingRight: 2\n                            });\n\n                            button.addListener(\"click\", function () {\n                                var params = {\n                                    id: parseInt(result.id),\n                                    answer: this.getLabel()\n                                };\n                                eyeos.callMessage(checknum,\t\"__Events_handleAnswer\", params, function (results) {\n                                    createContent(widgetContainer, name);\n                                });\n                            });\n\n                            buttons.add(button);\n                        }\n                    }\n                }\n\n                var deleteIcon = new qx.ui.basic.Image('index.php?extern=images\/clear.png').set({\n                    alignY : 'middle',\n                    alignX : 'right',\n                    paddingLeft : 3,\n                    paddingRight : 0,\n                    paddingTop : 0\n                });\n                deleteIcon.hide();\n                deleteIcon.addListener(\"click\", function () {\n                    if (result.isQuestion == 0 || result.hasEnded == 1) {\n                        var params = {\n                            'id' : parseInt(result.id)\n                        };\n                        eyeos.callMessage(checknum,\t\"__Events_deleteEvents\", params, function (results) {\n                            createContent(widgetContainer, actualButtonSelected, numberOfItems);\n                        });\n                    } else {\n                        alert(tr('Can\\'t delete the event'));\n                    }\n                }, this);\n\n                cmpDate.add(eventIcon);\n                cmpDate.add(labelDate);\n                cmpDate.add(buttons);\n                cmpDate.add(new qx.ui.core.Spacer(), {\n                    flex: 1\n                });\n                cmpDate.add(deleteIcon);\n                var infoData = qx.util.Json.parse(result.messageInformation);\n                var translatedInformation = tr(infoData[0], infoData[1]);\n                var labelSubject = new qx.ui.basic.Label().set({\n                    value: translatedInformation,\n                    rich: false,\n                    paddingTop: 3,\n                    paddingLeft: 17,\n                    \/\/marginRight: 8,\n                    font: new qx.bom.Font(11, [\"Lucida Grande\", \"Verdana\"])\n                });\n                item.addListener('mouseover', function () {\n                    deleteIcon.show();\n                });\n                item.addListener('mouseout', function () {\n                    deleteIcon.hide();\n                });\n                item.add(cmpDate);\n                item.add(labelSubject);\n                widgetContainer.add(item);\n            }\n\n            var container = settings.column? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);\n            var position = settings.position? parseInt(settings.position) : 0;\n            widget.openAndPlace(container, position);\n\n            this.setInternalWidget(widget);\n        }\n    }\n});\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.widget.favorites', {\n    extend: qx.core.Object,\n    implement: [desktop.widget.IWidget],\n\n    construct: function (checknum, id) {\n        this.setChecknum(checknum);\n        this.setId(id);\n    },\n\n    properties: {\n        checknum: {\n            init: null\n        },\n        id: {\n           init: null\n        },\n        settings: {\n           init: null\n        },\n        internalWidget: {\n            init:null\n        }\n    },\n\n    members: {\n        settings: null,\n\n        getTitle: function() {\n            return \"Favorites\";\n        },\n\n        createWidget: function() {\n            if (this.getSettings() == null) {\n                var settings = '';\n            } else {\n                var settings = this.getSettings();\n            }\n\n            var checknum = this.getChecknum();\n            var id = this.getId();\n\n            var widget = new eyeos.dashboard.Widget(tr('Favorite Applications'), id, '', false, checknum).set({\n                icon: 'index.php?extern=\/images\/16x16\/apps\/preferences-desktop-default-applications.png'\n            });\n\n            if(settings.minimized) {\n                widget.toggleMinimize();\n            }\n\n            \/\/this.value = value;\n            widget.container = new qx.ui.container.Composite(new qx.ui.layout.Flow()).set({\n                allowShrinkY: false,\n                padding: 5\n            });\n            widget.addContent(widget.container);\n\n            \/\/ in order to avoid qooxdoo bug...\n            widget.container.add(new qx.ui.container.Composite().set({\n                height: 50,\n                allowGrowY: false,\n                width: 1,\n                allowGrowX: false\n            }));\n\n            function createFavoriteItem(appName, displayName, imagePath, father) {\n                \/\/\t\t\t\tif (item instanceof qx.ui.EyeTaskButtonFavorite) {\n                \/\/ var appName = item.getLabel();\n                var app = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({\n                    alignX : 'center',\n                    alignY : 'middle',\n                    width : 76,\n                    height: 76,\n                    padding: 5,\n                    decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)\n                });\n                \/\/ app.setUserData('realName', item.getRealAppName());\n                app.setUserData('realName', displayName);\n                \/\/ var url = item.getIcon();\n                \/\/url = url +'&nocache=' + eyeos.utils.getRandomValue();\n                var image = new qx.ui.basic.Image(imagePath).set({\n                    width: 48,\n                    alignX : 'center',\n                    height: 48,\n                    allowGrowX: false,\n                    allowGrowY: false,\n                    margin: 3\n                \/\/scale: true\n                });\n                app.add(image);\n                var label = new qx.ui.basic.Label().set({\n                    rich: true,\n                    value: appName,\n                    alignX : 'center',\n                    paddingTop: 3,\n                    marginRight: 0,\n                    textAlign: 'center',\n                    font: new qx.bom.Font(11, ['Lucida Grande', 'Verdana'])\n                });\n                app.add(label);\n\n                app.addListener('dblclick', function() {\n                    eyeos.execute(this.getUserData('realName'), checknum);\n                });\n\n                app.addListener('mouseover', function () {\n                    this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, '#CCCCCC', 1, 5, 5, 5, 5));\n                });\n\n                app.addListener('mouseout', function (e) {\n                    if (!qx.ui.core.Widget.contains(app, e.getRelatedTarget())) {\n                        this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5));\n                    }\n                });\n\n                father.container.add(app);\n            \/\/\t\t\t\t}\n            }\n\n            if ((this instanceof Object) && (widget instanceof eyeos.dashboard.Widget)) {\n                eyeos.callMessage(checknum, 'getFavoriteApplications', '', function (results) {\n                    for (var i=0; i < results.length; ++i) {\n                        var name = results[i]['name'];\n                        var imagePath = results[i]['imagePath'] +'&nocache=' + eyeos.utils.getRandomValue();\n\n                        var appName = results[i]['displayName'];\n\n                        createFavoriteItem(appName, name, imagePath, this);\n                    }\n                }, widget);\n            }\n\n\n            var dbus = eyeos.messageBus.getInstance();\n            dbus.addListener('eyeos_application_toggleFavorite', function (e) {\n                var name = e.getData()[0];\n                var appRealName = e.getData()[1];\n                var isFavorite = e.getData()[2];\n                var imagePath = e.getData()[3];\n\n                var items = this.container.getChildren();\n\n                if (!isFavorite) {\n                    for (var i = 0; i < items.length; ++i) {\n                        if ((items[i] instanceof qx.ui.container.Composite)) {\n                            if (items[i].getUserData('realName') == appRealName) {\n                                this.container.remove(items[i]);\n                            }\n                        }\n                    }\n                } else {\n                    createFavoriteItem(name, appRealName, imagePath, this);\n                }\n            }, widget);\n\n            var container = settings.column? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);\n            var position = settings.position? parseInt(settings.position) : 0;\n            widget.openAndPlace(container, position);\n            \n            this.setInternalWidget(widget);\n        }\n    }\n});\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.widget.files', {\n    extend: qx.core.Object,\n    implement: [desktop.widget.IWidget],\n\n    construct: function (checknum, id) {\n        this.setChecknum(checknum);\n        this.setId(id);\n    },\n\n    properties: {\n        checknum: {\n            init: null\n        },\n        id: {\n           init: null\n        },\n        settings: {\n           init: null\n        },\n        internalWidget: {\n            init:null\n        }\n    },\n\n    members: {\n        settings: null,\n\n        getTitle: function() {\n            return \"Files\";\n        },\n\n        createWidget: function() {\n\n            if (this.getSettings() == null) {\n                var settings = '';\n            } else {\n                var settings = this.getSettings();\n            }\n\n            var checknum = this.getChecknum();\n\n            var self = this;\n\n            var widget = new eyeos.dashboard.Widget(tr('Files'), this.getId(), 'files', false, this.getChecknum()).set({\n                icon: 'index.php?extern=\/images\/16x16\/apps\/system-file-manager.png'\n            });\n\n            if(settings.minimized) {\n                widget.toggleMinimize();\n            }\n\n            var buttonsLayout = new qx.ui.container.Composite().set({\n                layout: new qx.ui.layout.HBox(),\n                backgroundColor: '#eeeeee',\n                marginLeft: 10,\n                marginRight: 10,\n                marginTop: 10,\n                padding: 3\n            });\n            widget.addContent(buttonsLayout);\n            createButtons(checknum);\n            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Flow()).set({\n                'allowShrinkY': false,\n                padding: 5\n            });\n            widget.setUserData('container', widgetContainer);\n\n            function createButtons (checknum) {\n                buttonsLayout.removeAll();\n                \/\/\tdecorator rounded all borders\n                var borderAll = new qx.ui.decoration.RoundBorderBeveled().set({\n                    leftTopR: 3,\n                    rightTopR: 3,\n                    leftBottomR: 3,\n                    rightBottomR: 3\n                });\n\n                createButton(tr('Home'), 'home:\/\/\/');\n                createButton(tr('Documents'), 'home:\/\/\/Documents');\n                createButton(tr('Music'), 'home:\/\/\/Music');\n                createButton(tr('Images'), 'home:\/\/\/Images');\n                \/\/createButton(tr('Shared'), 'path');\n\n                function createButton (name, path) {\n                    var selected = 'home';\n                    var button = new qx.ui.container.Composite(new qx.ui.layout.HBox(0));\n                    button.set({\n                        decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)\n                    })\n                    button.setHeight(18);\n                    button.setMaxHeight(18);\n                    var buttonLabel = new qx.ui.basic.Label(tr(name));\n                    buttonLabel.setPadding(2);\n                    buttonLabel.setFont(new qx.bom.Font(11, [\"Lucida Grande\", \"Verdana\"]));\n                    button.setUserData('path', path);\n                    button.add(buttonLabel);\n                    if (selected == name) {\n                        button.setBackgroundColor(\"#61676d\");\n                        buttonLabel.setTextColor('#ffffff');\n\n                    } else {\n                        buttonLabel.setTextColor(\"#000000\");\n                        button.addListener(\"mouseout\", function (e) {\n                            if (!qx.ui.core.Widget.contains(button, e.getRelatedTarget())) {\n                                button.setBackgroundColor(\"#eeeeee\");\n                                buttonLabel.setTextColor('#000000');\n                            }\n                        });\n                    }\n\n                    button.addListener(\"mouseover\", function () {\n                        button.setBackgroundColor(\"#61676d\");\n                        buttonLabel.setTextColor('#ffffff');\n                    });\n\n                    button.addListener(\"click\", function () {\n                        selected = name;\n                        createButtons(checknum);\n                        createContent(checknum, this.getUserData('path'));\n                    });\n\n                    buttonsLayout.add(button);\n                }\n\n                \/\/create UPLOAD button\n                buttonsLayout.add(new qx.ui.core.Spacer(), {\n                    flex: 1\n                });\n\n                var uploadButton = new qx.ui.container.Composite(new qx.ui.layout.HBox(0));\n                uploadButton.set({\n                    decorator: borderAll,\n                    alignX: 'right'\n                })\n                uploadButton.setHeight(18);\n                uploadButton.setMaxHeight(18);\n                var uploadLabel = new qx.ui.basic.Label(tr(\"Upload\"));\n                uploadLabel.setTextColor(\"#000000\");\n                uploadLabel.setPadding(2);\n                uploadLabel.setFont(new qx.bom.Font(11, [\"Lucida Grande\", \"Verdana\"]));\n                uploadButton.add(uploadLabel);\n                uploadButton.addListener(\"mouseover\", function () {\n                    uploadButton.setBackgroundColor(\"#61676d\");\n                    uploadLabel.setTextColor('#ffffff');\n                });\n                uploadButton.addListener(\"mouseout\", function (e) {\n                    if (!qx.ui.core.Widget.contains(uploadButton, e.getRelatedTarget())) {\n                        uploadButton.setBackgroundColor(\"#eeeeee\");\n                        uploadLabel.setTextColor('#000000');\n                    }\n\n                });\n                uploadButton.addListener(\"click\", function () {\n                    eyeos.execute('upload',checknum);\n                }, this);\n\n                buttonsLayout.add(uploadButton);\n            }\n\n\n            widget.addContent(widgetContainer);\n            createContent(checknum);\n\n            var dbus = eyeos.messageBus.getInstance();\n\n            dbus.addListener('eyeos_files_new', function (e) {\n                var sourcePath = e.getData()[0];\n                var newFiles = e.getData()[1];\n                if (this.getUserData('path') == sourcePath) {\n                    self.createInnerContent(this, newFiles, false);\n                }\n            }, widgetContainer);\n\n            dbus.addListener('eyeos_files_delete', function (e) {\n                var sourcePath = e.getData()[0];\n                var newFiles = e.getData()[1];\n                var widgetChildrens = this.getChildren();\n                var widgetPaths = new Array();\n\n                for (var i = 0; i < widgetChildrens.length; ++i) {\n                    widgetPaths.push(widgetChildrens[i].getUserData('path'));\n                }\n\n                for (var i = 0; i < newFiles.length; ++i) {\n                    var index = widgetPaths.indexOf(newFiles[i]);\n                    if (index != -1 && widgetChildrens[index] != undefined) {\n                        widgetChildrens[index].destroy();\n                    }\n                }\n            }, widgetContainer);\n\n            dbus.addListener('eyeos_files_rename', function (e) {\n                var sourcePath = e.getData()[0].replace(\/\\\\\/g,'\/').replace(\/\\\/[^\\\/]*\\\/?$\/, '')+'\/';\n                if (this.getUserData('path') == sourcePath) {\n                    eyeos.callMessage(\n                        checknum,\n                        \"__FileSystem_browsePath\",\n                        new Array(sourcePath, null, this._browseOptions),\n                        function (results) {\n                            widgetContainer.removeAll();\n                            var files = results.files;\n                            for (var i = 0; i < files.length; ++i) {\n                                self.createInnerContent(widgetContainer, files[i]);\n                            }\n                        },\n                        document.DesktopApplication\n                        );\n                }\n            }, widgetContainer);\n\n            function createContent(checknum, path) {\n                if (path == null) {\n                    path = 'home:\/\/~' + eyeos.getCurrentUserName() + '\/';\n                }\n                widgetContainer.setUserData('path', path);\n                eyeos.callMessage(\n                    checknum,\n                    \"__FileSystem_browsePath\",\n                    new Array(path, null, this._browseOptions),\n                    function (results) {\n                        widgetContainer.removeAll();\n                        var files = results.files;\n                        for (var i = 0; i < files.length; ++i) {\n                            self.createInnerContent(widgetContainer, files[i]);\n                        }\n                    },\n                    document.DesktopApplication\n                    );\n            }\n\n            var container = settings.column ? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);\n            var position = settings.position? parseInt(settings.position) : 0;\n            widget.openAndPlace(container, position);\n            this.setInternalWidget(widget);\n        },\n\n        createInnerContent: function (widgetContainer, file, alone) {\n            var checknum = this.getChecknum();\n\n            var imageExtensions = ['JPG', 'JPEG', 'PNG', 'GIF'];\n            var videoExtensions = ['FLV'];\n            var musicExtensions = ['MP3', 'M4A'];\n            var docExtensions = ['EDOC', 'DOC', 'TXT', 'XLS', 'ODS'];\n            var zipExtensions = ['ZIP'];\n            var image = null;\n            if (file.type == 'folder') {\n                image = 'index.php?extern=images\/48x48\/places\/folder.png';\n            } else if (docExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/application-msword.png';\n            } else if (imageExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/image-x-generic.png';\n            } else if (musicExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/audio-x-generic.png';\n            } else if (videoExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/audio-vnd.rn-realvideo.png';\n            }else if (zipExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/application-x-gzip.png';\n            } else if(file.extension == 'LNK') {\n                var info = qx.util.Json.parse(file.content);\n                image = info.icon;\n            }else {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/application-x-zerosize.png';\n            }\n            var name = file.name;\n            if(file.extension == 'LNK') {\n                name = name.substr(0, name.length-4);\n            }\n            var atom = new qx.ui.basic.Atom(name, image).set({\n                rich: true,\n                'iconPosition': 'top',\n                \/\/'font': new qx.bom.Font(12, ['Helvetica', 'Arial', 'Sans-serif']),\n                \/\/'textColor': '#FFFFFF',\n                'width': 76,\n                'padding': 5,\n                decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)\n            });\n\n            if (alone) {\n                atom.addListener('appear', function (e) {\n                    var domele = this.getChildControl('label').getContainerElement().getDomElement();\n                    domele.childNodes[0].style.fontFamily = 'Helvetica';\n                    domele.childNodes[0].style.fontSize = '12px';\n                    domele.childNodes[0].style.textShadow =  '#000000 0px 0px 1px';\n                    domele.childNodes[0].style.color = '#FFFFFF';\n                    domele.childNodes[0].style.fontWeight = 'bold';\n                });\n            }\n\n            \/\/\t\t\tatom.getChildControl('label').set({\n            \/\/\t\t\t\t'shadow': new qx.ui.decoration.Single(1, 'solid', '#404040')\n            \/\/\t\t\t});\n\n            atom.setUserData('path', file.absolutepath);\n            if (file.type == 'folder') {\n                atom.addListener('dblclick', function () {\n                    eyeos.execute('files', checknum, [this.getUserData('path')]);\n                });\n            } else {\n                var listenerFunction =  function () {\n                    eyeos.openFile(this.getUserData('path'), checknum);\n                };\n                atom.addListener('dblclick', listenerFunction);\n            }\n            atom.addListener('mouseover', function () {\n                this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, '#CCCCCC', 1, 5, 5, 5, 5));\n            });\n\n            atom.addListener('mouseout', function (e) {\n                if (!qx.ui.core.Widget.contains(atom, e.getRelatedTarget())) {\n                    this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5));\n                }\n            });\n            widgetContainer.add(atom);\n        }\n    }\n});\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.widget.groups', {\n    extend: qx.core.Object,\n    implement: [desktop.widget.IWidget],\n\n    construct: function (checknum, id) {\n        this.setChecknum(checknum);\n        this.setId(id);\n    },\n\n    properties: {\n        checknum: {\n            init: null\n        },\n        id: {\n           init: null\n        },\n        settings: {\n           init: null\n        },\n        internalWidget: {\n            init:null\n        }\n    },\n\n    members: {\n        settings: null,\n\n        getTitle: function() {\n            return \"My Groups\";\n        },\n\n        createWidget: function() {\n            if (this.getSettings() == null) {\n                var settings = '';\n            } else {\n                var settings = this.getSettings();\n            }\n\n            var checknum = this.getChecknum();\n            var id = this.getId();\n\n            function createMyGroupItem (name, id) {\n                \/\/ events are quiet out of control right now, we need a totally\n                \/\/ revision about the events framework, how the components use it,\n                \/\/ how we manage the Adapters and so on. Right now, it's a quick\n                \/\/ fix to avoid duplicated events....\n                var children = widgetContainer.getChildren();\n                for(var foo = 0; foo < children.length; ++foo) {\n                    if(children[foo].getUserData('id') == id) {\n                        return;\n                    }\n                }\n\n                var groupName = name;\n                var group = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({\n                    alignX : 'center',\n                    alignY : 'middle',\n                    width : 76,\n                    height: 76,\n                    padding: 5,\n                    decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)\n                });\n                group.setUserData('id', id);\n                var image = new qx.ui.basic.Image('index.php?checknum=' + checknum + '&message=__Workgroups_getWorkgroupPicture&params[workgroupId]=' + id + '&refresh=' + new Date().getTime()).set({\n                    width: 48,\n                    alignX : 'center',\n                    height: 48,\n                    allowGrowX: false,\n                    allowGrowY: false,\n                    margin: 3,\n                    scale: true\n                });\n                group.add(image);\n                var label = new qx.ui.basic.Label().set({\n                    value: groupName,\n                    alignX : 'center',\n                    rich: false,\n                    paddingTop: 3,\n                    marginRight: 0,\n                    textAlign: 'center',\n                    font: new qx.bom.Font(11, [\"Lucida Grande\", \"Verdana\"])\n                });\n                group.add(label);\n\n                group.addListener('mouseover', function () {\n                    this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, '#CCCCCC', 1, 5, 5, 5, 5));\n                });\n\n                group.addListener(\"mouseout\", function(e) {\n                    if (!qx.ui.core.Widget.contains(group, e.getRelatedTarget())) {\n                        group.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5));\n                    }\n                }, this);\n\n                group.addListener(\"dblclick\", function () {\n                    eyeos.execute('files', checknum, ['workgroup:\/\/~' + groupName], null);\n                }, this);\n\n                widgetContainer.add(group);\n            }\n\n\n            var widget = new eyeos.dashboard.Widget(tr('My Groups'), id, '', false, checknum).set({\n                icon: 'index.php?extern=\/images\/16x16\/apps\/system-users.png'\n            });\n\n            if(settings.minimized) {\n                widget.toggleMinimize();\n            }\n\n            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Flow()).set({\n                'allowShrinkY': false,\n                padding: 5\n            });\n\n            widget.setUserData('container', widgetContainer);\n            widget.addContent(widgetContainer);\n\n            \/*\n\t\t\t\t * Populate Groups\n\t\t\t\t *\/\n\n            eyeos.callMessage(checknum, '__Workgroups_getAllWorkgroupsByUser', {\n                includeMeta: 'true'\n            }, function (groups) {\n                for (var i = 0; i < groups.length; ++i) {\n                    if (groups[i].status == eyeos.ui.tabs.GroupAll.STATUS_MEMBER) {\n                        createMyGroupItem(groups[i]['workgroup'].name, groups[i]['workgroup'].id);\n                    }\n                }\n            }, this);\n\n            \/*\n\t\t\t\t * LISTENERS\n\t\t\t\t *\/\n\n            \/\/Adding A Group, eyeos_workgroup_Group\n            var bus = eyeos.messageBus.getInstance();\n\n            bus.addListener('eyeos_workgroup_updateGroup', function (e) {\n                \/\/ removing old widget's element...\n                widgetContainer.getChildren().forEach(function(child) {\n                    if(child.getUserData('id') == e.getData().id) {\n                        widgetContainer.remove(child);\n                    }\n                }, this);\n\n                \/\/ and creating a new one with the updated parameters...\n                createMyGroupItem(e.getData().title, e.getData().id);\n            }, this);\n\n            bus.addListener('eyeos_workgroup_createGroup', function (e) {\n                var name = e.getData()[0];\n                var id = e.getData()[1];\n                createMyGroupItem(name, id);\n            }, this);\n\n            bus.addListener('eyeos_workgroup_joinGroup', function (e) {\n                var name = e.getData()[0];\n                var id = e.getData()[1];\n                createMyGroupItem(name, id);\n            }, this);\n\n            bus.addListener('eyeos_workgroup_deleteGroup', function (e) {\n                widgetContainer.getChildren().forEach(function(child) {\n                    if(child.getUserData('id') == e.getData()) {\n                        widgetContainer.remove(child);\n                    }\n                }, this);\n            }, this);\n\n            bus.addListener('eyeos_workgroup_leaveGroup', function (e) {\n                widgetContainer.getChildren().forEach(function(child) {\n                    if(child.getUserData('id') == e.getData()) {\n                        widgetContainer.remove(child);\n                    }\n                }, this);\n            }, this);\n\n            var container = settings.column? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);\n            var position = settings.position? parseInt(settings.position) : 0;\n            widget.openAndPlace(container, position);\n            this.setInternalWidget(widget);\n        }\n    }\n});\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.widget.notes', {\n    extend: qx.core.Object,\n    implement: [desktop.widget.IWidget],\n\n    construct: function (checknum, id) {\n        this.setChecknum(checknum);\n        this.setId(id);\n    },\n\n    properties: {\n        checknum: {\n            init: null\n        },\n        id: {\n           init: null\n        },\n        settings: {\n           init: null\n        },\n        internalWidget: {\n            init:null\n        }\n    },\n\n    members: {\n        settings: null,\n\n        getTitle: function() {\n            return \"Notes\";\n        },\n\n        createWidget: function() {\n            if (this.getSettings() == null) {\n                var settings = '';\n            } else {\n                var settings = this.getSettings();\n            }\n\n            var checknum = this.getChecknum();\n            var id = this.getId();\n\n            var widget = new eyeos.dashboard.Widget(tr('Notes'), id, 'notepad', false, checknum).set({\n                icon: 'index.php?extern=\/images\/16x16\/apps\/basket.png'\n            });\n\n            if(settings.minimized) {\n                widget.toggleMinimize();\n            }\n\n            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Grow()).set({\n                height: 150\n            });\n\n            widget.setUserData('container', widgetContainer);\n            widget.addContent(widgetContainer);\n\n            var content = '';\n            var richWidget = new qx.ui.form.TextArea(content);\n            eyeos.callMessage(checknum, 'readNotesWidget', '', function (results) {\n                content = results;\n                richWidget.setValue(results);\n            });\n\n            richWidget.set({\n                decorator: new qx.ui.decoration.Single(1, 'solid', '#A4A4A4').set({\n                    styleTop: null,\n                    styleRight: null,\n                    styleLeft: null,\n                    styleBottom: null\n                }),\n                backgroundColor: 'white',\n                padding: 10\n            });\n            var notesTimer = new qx.event.Timer(3000);\n            notesTimer.addListener('interval', function(e) {\n                notesTimer.stop();\n                eyeos.callMessage(checknum, 'writeNotesWidget', richWidget.getValue(), function (results) {\n                    });\n            });\n            richWidget.addListener('input', function(e) {\n                notesTimer.restart();\n            });\n            widgetContainer.add(richWidget);\n\n            var container = settings.column? document.eyeDashBoard.getContainer(settings.column) : document.eyeDashBoard.getContainer(1);\n            var position = settings.position? parseInt(settings.position) : 0;\n            widget.openAndPlace(container, position);\n            \n            this.setInternalWidget(widget);\n        }\n    }\n});\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nqx.Class.define('desktop.widget.desktop', {\n    extend: qx.core.Object,\n    implement: [desktop.widget.IWidget],\n\n    construct: function (checknum, id) {\n        this.setChecknum(checknum);\n        this.setId(id);\n    },\n\n    properties: {\n        checknum: {\n            init: null\n        },\n        id: {\n           init: null\n        },\n        settings: {\n           init: null\n        },\n        internalWidget: {\n            init:null\n        }\n    },\n\n    members: {\n        settings: null,\n        \n        getTitle: function() {\n            return \"Desktop\";\n        },\n\n        createWidget: function() {\n            var widget = new eyeos.dashboard.Widget(tr('Desktop'), this.getId(), 'files', false, this.getChecknum()).set({\n                icon: 'index.php?extern=\/images\/16x16\/apps\/system-file-manager.png'\n            });\n\n            widget.setExecuteFullAppParameters(new Array(\"home:\/\/~root\/Desktop\"));\n\n            var widgetContainer = new qx.ui.container.Composite(new qx.ui.layout.Flow()).set({\n                'allowShrinkY': false,\n                padding: 5\n            });\n            widget.setUserData('container', widgetContainer);\n            widget.addContent(widgetContainer);\n            var path = 'home:\/\/~' + eyeos.getCurrentUserName() + '\/Desktop';\n\n            widgetContainer.setUserData('path', path);\n            eyeos.callMessage(\n                this.getChecknum(),\n                \"__FileSystem_browsePath\",\n                new Array(path, null, this._browseOptions), \/\/???????????\n                function (results) {\n                    widgetContainer.removeAll();\n                    var files = results.files;\n                    for (var i = 0; i < files.length; ++i) {\n                        this.createInnerContent(widgetContainer, files[i], false);\n                    }\n            }, this);\n\n            var dbus = eyeos.messageBus.getInstance();\n            var self = this;\n\n            dbus.addListener('eyeos_files_new', function (e) {\n                var sourcePath = e.getData()[0];\n                var newFiles = e.getData()[1];\n                if (this.getUserData('path') == sourcePath) {\n                    self.createInnerContent(this, newFiles, false);\n                }\n            }, widgetContainer);\n\n            dbus.addListener('eyeos_files_delete', function (e) {\n                var sourcePath = e.getData()[0];\n                var newFiles = e.getData()[1];\n                var widgetChildrens = this.getChildren();\n                var widgetPaths = new Array();\n\n                for (var i = 0; i < widgetChildrens.length; ++i) {\n                    widgetPaths.push(widgetChildrens[i].getUserData('path'));\n                }\n\n                for (var i = 0; i < newFiles.length; ++i) {\n                    var index = widgetPaths.indexOf(newFiles[i]);\n                    if (index != -1 && widgetChildrens[index] != undefined) {\n                        widgetChildrens[index].destroy();\n                    }\n                }\n            }, widgetContainer);\n\n            widget.openAndPlace(document.eyeDashBoard.getFirstContainer(), 0);\n            this.setInternalWidget(widget);\n        },\n\n        createInnerContent: function (widgetContainer, file, alone) {\n            var checknum = this.getChecknum();\n            var imageExtensions = ['JPG', 'JPEG', 'PNG', 'GIF'];\n            var videoExtensions = ['FLV'];\n            var musicExtensions = ['MP3', 'M4A'];\n            var docExtensions = ['EDOC', 'DOC', 'TXT', 'XLS', 'ODS'];\n            var zipExtensions = ['ZIP'];\n            var image = null;\n            if (file.type == 'folder') {\n                image = 'index.php?extern=images\/48x48\/places\/folder.png';\n            } else if (docExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/application-msword.png';\n            } else if (imageExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/image-x-generic.png';\n            } else if (musicExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/audio-x-generic.png';\n            } else if (videoExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/audio-vnd.rn-realvideo.png';\n            }else if (zipExtensions.indexOf(file.extension) != -1) {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/application-x-gzip.png';\n            } else if(file.extension == 'LNK') {\n                var info = qx.util.Json.parse(file.content);\n                image = info.icon;\n            }else {\n                image = 'index.php?extern=images\/48x48\/mimetypes\/application-x-zerosize.png';\n            }\n            var name = file.name;\n            if(file.extension == 'LNK') {\n                name = name.substr(0, name.length-4);\n            }\n            var atom = new qx.ui.basic.Atom(name, image).set({\n                rich: true,\n                'iconPosition': 'top',\n                \/\/'font': new qx.bom.Font(12, ['Helvetica', 'Arial', 'Sans-serif']),\n                \/\/'textColor': '#FFFFFF',\n                'width': 76,\n                'padding': 5,\n                decorator: new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5)\n            });\n\n            if (alone) {\n                atom.addListener('appear', function (e) {\n                    var domele = this.getChildControl('label').getContainerElement().getDomElement();\n                    domele.childNodes[0].style.fontFamily = 'Helvetica';\n                    domele.childNodes[0].style.fontSize = '12px';\n                    domele.childNodes[0].style.textShadow =  '#000000 0px 0px 1px';\n                    domele.childNodes[0].style.color = '#FFFFFF';\n                    domele.childNodes[0].style.fontWeight = 'bold';\n                });\n            }\n\n            \/\/\t\t\tatom.getChildControl('label').set({\n            \/\/\t\t\t\t'shadow': new qx.ui.decoration.Single(1, 'solid', '#404040')\n            \/\/\t\t\t});\n\n            atom.setUserData('path', file.absolutepath);\n            if (file.type == 'folder') {\n                atom.addListener('dblclick', function () {\n                    eyeos.execute('files', checknum, [this.getUserData('path')]);\n                });\n            } else {\n                var listenerFunction =  function () {\n                    eyeos.openFile(this.getUserData('path'), checknum);\n                };\n                atom.addListener('dblclick', listenerFunction);\n            }\n            atom.addListener('mouseover', function () {\n                this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, '#CCCCCC', 1, 5, 5, 5, 5));\n            });\n\n            atom.addListener('mouseout', function (e) {\n                if (!qx.ui.core.Widget.contains(atom, e.getRelatedTarget())) {\n                    this.setDecorator(new qx.ui.decoration.RoundBorderBeveled(null, null, 1, 5, 5, 5, 5));\n                }\n            });\n            widgetContainer.add(atom);\n        }\n    }\n});\n\/*\n*                 eyeos - The Open Source Cloud's Web Desktop\n*                               Version 2.0\n*                   Copyright (C) 2007 - 2010 eyeos Team\n*\n* This program is free software; you can redistribute it and\/or modify it under\n* the terms of the GNU Affero General Public License version 3 as published by the\n* Free Software Foundation.\n*\n* This program is distributed in the hope that it will be useful, but WITHOUT\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n* FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n* details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* version 3 along with this program in the file \"LICENSE\".  If not, see\n* <http:\/\/www.gnu.org\/licenses\/agpl-3.0.txt>.\n*\n* See www.eyeos.org for more details. All requests should be sent to licensing@eyeos.org\n*\n* The interactive user interfaces in modified source and object code versions\n* of this program must display Appropriate Legal Notices, as required under\n* Section 5 of the GNU Affero General Public License version 3.\n*\n* In accordance with Section 7(b) of the GNU Affero General Public License version 3,\n* these Appropriate Legal Notices must retain the display of the \"Powered by\n* eyeos\" logo and retain the original copyright notice. If the display of the\n* logo is not reasonably feasible for technical reasons, the Appropriate Legal Notices\n* must display the words \"Powered by eyeos\" and retain the original copyright notice.\n*\/\n\nfunction desktop_application(checknum, pid, args) {\n    var application = new eyeos.application.Desktop(checknum, pid);\n    application.initApplication(checknum, args);\n\n    tinyMCE_GZ.init({\n        theme: 'advanced',\n        plugins: 'table, safari, spellchecker, searchreplace, noneditable',\n        languages : 'en',\n        disk_cache : true,\n        debug : false\n    }, function () {\n        tinyMCE.init({\n            strict_loading_mode : true,\n            theme: 'advanced',\n            plugins: 'table, safari, spellchecker, searchreplace, noneditable',\n            spellchecker_languages : '+English=en',\n            theme_advanced_buttons1 : \"\",\n            theme_advanced_buttons2 : \"\",\n            theme_advanced_buttons3 : \"\",\n            theme_advanced_buttons3_add : 'tablecontrols',\n            preformatted : true,\n            fix_table_elements: 0\n        });\n    });\n\n\t\/\/load audio files\n\tdocument.audio = document.createElement('audio');\n\tdocument.audio.setAttribute('src', 'eyeos\/extern\/chat.ogg');\n}\n\nqx.Class.define('eyeos.application.Desktop', {\n    extend: eyeos.system.EyeApplication,\n\n    construct: function (checknum, pid) {\n        arguments.callee.base.call(this, 'desktop', checknum, pid);\n\n\t\tthis.addListeners();\n    },\n\n    properties: {\n\n    },\n\n    members: {\n\n\t\taddListeners: function () {\n\t\t\tvar bus = eyeos.messageBus.getInstance();\n\t\t\tbus.addListener('eyeos_netsync_forceRefresh', function () {\n\t\t\t\tvar optionPane = new eyeos.dialogs.OptionPane(\n\t\t\t\t\t\"<b>\" + tr('There was a problem with your connection, we recommend you to save your work and refresh the page\\n\\n\\\n\t\t\t\t\t\t\t\tDo you want to refresh the page now?') + \"<\/b>\",\n\t\t\t\t\teyeos.dialogs.OptionPane.QUESTION_MESSAGE,\n\t\t\t\t\teyeos.dialogs.OptionPane.OK_CANCEL_OPTION);\n\n\t\t\t\t\tvar dialog = optionPane.createDialog(this, tr('Connection Problem'), function(result) {\n\t\t\t\t\t\tif (result == eyeos.dialogs.OptionPane.OK_OPTION) {\n\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this);\n\n\t\t\t\t\tdialog.open();\n\t\t\t}, this);\n\t\t},\n\n        initApplication: function(checknum, args) {\n            \/\/in the __run of desktop.php, user is appended into args[0]\n            var user = args[0];\n            var files = args[1];\n\n\t\t\tdocument.title = eyeos.getCurrentUserName() +' @ eyeOS ' + eyeos.version;\n\n            \/\/we create a composite called screen. this is a top level layer\n            \/\/filling all the screen.\n            \/\/it have vbox layout because inside screen there is desktop and at the bottom\n            \/\/there is the taskbar\n            var screen = new qx.ui.container.Composite(new qx.ui.layout.VBox(0));\n\t\t\tscreen.setBackgroundColor('#f2f2f2');\n\n\t\t\t\/\/add screen to the root of the browser\n            qx.core.Init.getApplication().getRoot().add(screen , {\n                edge: 0\n            });\n\t\t\t\n            \/\/inside screen, we create desktop, that is a normal qx.ui.window.Manager, see qooxdoo\n            \/\/reference to get and idea of what eyeDesktop does\n            var eyeDesktop = new qx.ui.EyeDesktop(new qx.ui.window.Manager());\n\n            \/\/by default, eyeDesktop should be grey\n            eyeDesktop.setBackgroundColor('#f2f2f2');\n\n            \/\/we add eyeDesktop to screen, with flex 1, so it will fill the maximum of screen\n            \/\/as it can.\n            screen.add(eyeDesktop, {\n                flex: 1\n            });\n\n            \/\/when a new eyeWindow is created, a message thorugh dbus is send in eyeos.ui.Window\n            \/\/with category interface and eventName windowCreated\n            var bus = eyeos.messageBus.getInstance();\n            bus.addListener('eyeos_interface_windowCreated', function (e) {\n                \/\/get the received window and add it to eyeDesktop\n                var window = e.getData();\n                eyeDesktop.add(window);\n            }, this);\n\n            \/\/we need to store screen and eyeDesktop inside dbus, using store\n            \/\/so other parts of the system can access them.\n            bus.store('screen', screen);\n            bus.store('eyeDesktop', eyeDesktop);\n            bus.store('user', user);\n\n            \/\/we create the dashboard\n            \/\/dashboard is created ever, even if the user has selected classic desktop\n            \/\/because classic desktop is dashboard with a single fullscreen widget\n            var dashboard = new eyeos.dashboard.Board();\n\n            eyeDesktop.add(dashboard, {\n                edge: 0\n            });\n\n            \/\/notifications part\n            var notificationsPanel = new qx.ui.container.Composite(new qx.ui.layout.VBox());\n            notificationsPanel.set({\n                zIndex: 9000000\n            });\n\n            bus.store('notificationsPanel', notificationsPanel);\n\n            bus.addListener('eyeos_desktop_showDesktopNotification', function (e) {\n                var text = e.getData()[0];\n\t\t\t\tif(e.getData().length > 1 && e.getData()[1]) {\n\t\t\t\t\tvar type = e.getData()[1];\n\t\t\t\t} else {\n\t\t\t\t\tvar type = 'info';\n\t\t\t\t}\n\n                var notification = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({\n                    width: 200,\n                    minHeight: 50,\n                    backgroundColor: '#232D34',\n                    \/\/\tdecorator rounded all borders\n                    decorator: new qx.ui.decoration.RoundBorderBeveled().set({\n                        leftTopR: 5,\n                        rightTopR: 5,\n                        leftBottomR: 5,\n                        rightBottomR: 5\n                    }),\n                    opacity: 0,\n                    marginBottom: 10\n                });\n\n\t\t\t\tif (navigator.appName == 'Microsoft Internet Explorer') {\n\t\t\t\t\tnotification.setDecorator(null);\n\t\t\t\t}\n\t\t\t\t\n                var informationName = new qx.ui.basic.Label().set({\n                    value: '<b style=\"color:white\">'+escapeHtml(tr(text))+'<\/b>',\n                    rich: true,\n                    padding: 10\n                });\n                notification.add(informationName, {\n                    flex: true\n                });\n\n\t\t\t\tif(type == 'wait') {\n\t\t\t\t\tvar icon = new qx.ui.basic.Image();\n\t\t\t\t\ticon.setSource('eyeos\/extern\/images\/Loading_animation.gif');\n\t\t\t\t\ticon.set({\n\t\t\t\t\t\tmarginLeft: 10,\n\t\t\t\t\t\tmarginBottom: 10\n\t\t\t\t\t});\n\t\t\t\t\tnotification.add(icon);\n\t\t\t\t}\n\n                notificationsPanel.addAt(notification, 0);\n\n                var timer = new qx.event.Timer(30);\n                timer.addListener(\"interval\", function() {\n                    var currentOpacity = notification.getOpacity();\n                    if(parseFloat(currentOpacity) >= '1') {\n                        timer.stop();\n                        \/\/we wait 5 secons, and start the second timer\n\t\t\t\t\t\tif(type == 'info') {\n\t\t\t\t\t\t\tqx.event.Timer.once(function(e) {\n\t\t\t\t\t\t\t\tvar timerfinal = new qx.event.Timer(30);\n\t\t\t\t\t\t\t\ttimerfinal.addListener(\"interval\", function() {\n\t\t\t\t\t\t\t\t\tvar currentOpacity = notification.getOpacity();\n\t\t\t\t\t\t\t\t\tif(parseFloat(currentOpacity) < 0.1) {\n\t\t\t\t\t\t\t\t\t\ttimerfinal.stop();\n\t\t\t\t\t\t\t\t\t\tnotification.destroy();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnotification.setOpacity(parseFloat(currentOpacity)-0.1)\n\t\t\t\t\t\t\t\t}, this);\n\t\t\t\t\t\t\t\ttimerfinal.start();\n\t\t\t\t\t\t\t}, this, 5000);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(!this.wait) {\n\t\t\t\t\t\t\t\tthis.wait = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.wait[e.getData()[2]] = notification;\n\t\t\t\t\t\t}\n\n                    }\n                    notification.setOpacity(parseFloat(currentOpacity)+0.1)\n                }, this)\n\n                timer.start();\n\n            }, this);\n\n            bus.addListener('eyeos_desktop_removeDesktopNotification', function (e) {\n                var id = e.getData()[0];\n\t\t\t\tthis.wait[id].destroy();\n            }, this);\n            \n            eyeDesktop.add(notificationsPanel, {\n                right: 10,\n                bottom: 20\n            });\n\n            \/\/detect browser window resize\n            eyeDesktop.addListener('resize', function() {\n                var bounds = eyeDesktop.getBounds();\n\n                if (this._imageContainer != undefined && this._dashImage != undefined) {\n                    this._imageContainer.set({\n                        width: bounds.width,\n                        height: bounds.height\n                    });\n                    \/\/\n                    this._dashImage.set({\n                        width: bounds.width,\n                        height: bounds.height\n                    });\n                }\n            }, this);\n\n            \/\/store the user metadata inside a object for later usage\n            var meta = eyeos.getCurrentUserData().metadata;\n\n            \/\/when eyeDesktop appeared, its time to load wallpaper and launch autorun applications\n            eyeDesktop.addListener(\"appear\",function(){\n                \/\/ BACKGROUND & WALLPAPER\n                this._imageContainer = new qx.ui.container.Composite(new qx.ui.layout.Canvas());\n                this._dashImage = new qx.ui.basic.Image().set({\n\t\t\t\t\t\n                });\n\n                if (meta['eyeos.user.desktop.wallpaperMode'] == undefined) {\n                    this._dashImage.setBackgroundColor('#F4F4F4');\n                } else {\n                    if (meta['eyeos.user.desktop.wallpaperMode'] == 'color') {\n                        var colors = meta['eyeos.user.desktop.backgroundColors'];\n                        for (var i in colors) {\n                            if (colors[i] == 'true') {\n                                this._dashImage.setBackgroundColor(i);\n                            }\n                        }\n                    } else {\n                        this._dashImage.setBackgroundColor('white');\n                        var splitted = meta['eyeos.user.desktop.wallpaper'].split('\/');\n                        if(meta['eyeos.user.desktop.wallpaper']) {\n                            if (splitted[0] == 'sys:') {\n                                this._dashImage.setSource('index.php?extern=images\/wallpapers\/' + splitted[splitted.length - 2] + '\/' + splitted[splitted.length - 1]);\n                            } else {\n                                this._dashImage.setSource('index.php?checknum=' + this.getChecknum() + '&message=__FileSystem_readFile&params[path]=' + meta['eyeos.user.desktop.wallpaper']);\n                            }\n                        } else {\n                            this._dashImage.setSource('index.php?extern=images\/wallpapers\/nature\/default.jpg');\n                        }\n\n                    }\n                }\n\n\t\t\t\tif(this._dashImage.getSource() == 'index.php?extern=images\/wallpapers\/nature\/default.jpg') {\n\t\t\t\t\tthis._dashImage.addListener('loaded', function(e) {\n\t\t\t\t\t\tvar ele = e.getTarget().getContentElement();\n\t\t\t\t\t\tele.setStyle('backgroundPosition', 'bottom right');\n\t\t\t\t\t}, this);\n\t\t\t\t}\n\n                var bounds = eyeDesktop.getBounds();\n                \/\/\n                this._imageContainer.set({\n                    width: bounds.width,\n                    height: bounds.height,\n                    allowGrowX: true,\n                    allowStretchX: true,\n                    allowStretchY: true,\n                    allowGrowY: true\n                });\n                \/\/\n                this._dashImage.set({\n                    width: bounds.width,\n                    height: bounds.height,\n                    allowGrowX: true,\n                    allowStretchX: true,\n                    allowStretchY: true,\n                    allowGrowY: true\n                });\n                this._imageContainer.add(this._dashImage);\n                eyeDesktop.add(this._imageContainer);\n                this._dashImage.set({\n                    zIndex: 10\n                });\n\n\n                \/\/ LOGIN APPLICATIONS\n\n                if (meta['eyeos.user.applications.onLogin'] != undefined) {\n                    var onLoginApps = meta['eyeos.user.applications.onLogin'];\n                    for (var i in onLoginApps) {\n                        if (onLoginApps[i] == 'true') {\n                            eyeos.execute(i, this.getChecknum());\n                        }\n                    }\n                }\n\n\n\t\t\t\t\/\/ Welcome Message\n\n\t\t\t\tif(meta['eyeos.user.desktop.showWelcome'] == undefined || meta['eyeos.user.desktop.showWelcome'] != 'false' ) {\n\t\t\t\t\teyeos.execute('welcomepage', this.getChecknum());\n\t\t\t\t}\n\n            },this);\n\n            bus.store('eyeDashBoard', dashboard);\n\n            \/\/it is needed to check what have the user configured.\n            \/\/if the user have classic desktop, set the columns to 1, rebouild dashboard (apply)\n            \/\/and then remove all widgets\n            \/\/if the user have dashboard selected, set columns to the value desired by the user\n            \/\/and rebuild\n            if (eyeos.getCurrentUserData().metadata['eyeos.desktop.mode'] != undefined) {\n                var widgetManager = desktop.WidgetManager.getInstance();\n                if (eyeos.getCurrentUserData().metadata['eyeos.desktop.mode'] == 'classic') {\n                    dashboard.setDesktopMode('classic');\n                    dashboard.setContainerNumber(1);\n                    dashboard.rebuild();\n                    dashboard.removeAllWidgets();\n                    widgetManager.createDesktopWidgetAlone(this.getChecknum(), files);\n                } else {\n                    dashboard.setDesktopMode('dashboard');\n                    dashboard.setContainerNumber(eyeos.getCurrentUserData().metadata['eyeos.desktop.dashboard.nbcolumns']);\n                    dashboard.rebuild();\n                    widgetManager.loadWidgets(this.getChecknum());\n                }\n            }\n            \n            var dbus = eyeos.messageBus.getInstance();\n            var self = this;\n            dbus.addListener('eyeos_desktop_changesDashboard', function (e) {\n                var widgetManager = desktop.WidgetManager.getInstance();\n                if (e.getData()[0] == 'classic') {\n                    this.setDesktopMode('classic');\n                    this.setContainerNumber(1);\n                    this.rebuild();\n                    this.removeAllWidgets();\n                    widgetManager.createDesktopWidgetAlone(self.getChecknum());\n                } else {\n                    this.setDesktopMode('dashboard');\n                    this.setContainerNumber(e.getData()[2]);\n                    this.rebuild();\n                    if (e.getData()[1] != e.getData()[0]) {\n                        this.removeAllWidgets();\n                        var widgetManager = desktop.WidgetManager.getInstance();\n                        widgetManager.loadWidgets(self.getChecknum());\n                    }\n                }\n            }, dashboard);\n\n            \/\/when the wallpaper is changed, we need to refresh the desktop\n            \/\/to show the selected walpaper\/color\n            dbus.addListener('eyeos_desktop_changeWallpaper', function (e) {\n                var mode = e.getData()[0];\n                var item = e.getData()[1];\n\n                if (mode != undefined && item != undefined) {\n                    if (mode == 'color') {\n                        this._dashImage.setSource(null);\n                        this._dashImage.setBackgroundColor(item);\n                    } else {\n                        this._dashImage.setBackgroundColor('transparent');\n                        var splitted = item.split('\/');\n                        if (splitted[0] == 'sys:') {\n                            this._dashImage.setSource('index.php?extern=images\/wallpapers\/' + splitted[splitted.length - 2] + '\/' + splitted[splitted.length - 1]);\n                        } else {\n                            this._dashImage.setSource('index.php?checknum=' + this.getChecknum() + '&message=__FileSystem_readFile&params[path]=' + item);\n                        }\n                    }\n                }\n            }, this);\n\n\t\t\tdesktop.actionManager.getInstance().setChecknum(this.getChecknum());\n\t\t\tdesktop.chatManager.getInstance().setChecknum(this.getChecknum());\n\t\t\tdesktop.chatManager.getInstance().registerListeners(this);\n\n\t\t\twindow.onbeforeunload = function(e) {\n\t\t\t\treturn \"You are about to leave your eyeOS session, are you sure you want to continue?\";\n\t\t\t};\n\n\t\t\teyeos.execute('taskbar', this.getChecknum());\n\t\t\teyeos.execute('topmenu', this.getChecknum());\n        }\n    }\n});\ndesktop_application(285516006, 5499, [\"username\",{\"absolutepath\":\"home:\\\/\\\/~username\\\/Desktop\",\"paths\":[\"home:\\\/\\\/~username\\\/\",\"home:\\\/\\\/~username\\\/Desktop\"],\"files\":[{\"class\":\"EyeUserFile\",\"type\":\"file\",\"extension\":\"LNK\",\"size\":101,\"permissions\":\"-rw-------\",\"owner\":\"username\",\"group\":\"users\",\"absolutepath\":\"home:\\\/\\\/~username\\\/Desktop\\\/Chat.lnk\",\"meta\":{\"owner\":\"username\",\"group\":\"users\",\"permissions\":\"-rw-------\"},\"content\":\"{\\\"app\\\":\\\"chat\\\",\\\"type\\\":\\\"application\\\",\\\"icon\\\":\\\"index.php?extern=\\\\\\\/images\\\\\\\/48x48\\\\\\\/apps\\\\\\\/konversation.png\\\"}\",\"name\":\"Chat.lnk\",\"virtual\":\"true\"},{\"class\":\"EyeUserFile\",\"type\":\"file\",\"extension\":\"LNK\",\"size\":100,\"permissions\":\"-rw-------\",\"owner\":\"username\",\"group\":\"users\",\"absolutepath\":\"home:\\\/\\\/~username\\\/Desktop\\\/Documents.lnk\",\"meta\":{\"owner\":\"username\",\"group\":\"users\",\"permissions\":\"-rw-------\"},\"content\":\"{\\\"app\\\":\\\"documents\\\",\\\"type\\\":\\\"application\\\",\\\"icon\\\":\\\"index.php?extern=\\\\\\\/images\\\\\\\/48x48\\\\\\\/apps\\\\\\\/okteta.png\\\"}\",\"name\":\"Documents.lnk\",\"virtual\":\"true\"},{\"class\":\"EyeUserFile\",\"type\":\"file\",\"extension\":\"LNK\",\"size\":109,\"permissions\":\"-rw-------\",\"owner\":\"username\",\"group\":\"users\",\"absolutepath\":\"home:\\\/\\\/~username\\\/Desktop\\\/Home.lnk\",\"meta\":{\"owner\":\"username\",\"group\":\"users\",\"permissions\":\"-rw-------\"},\"content\":\"{\\\"app\\\":\\\"files\\\",\\\"type\\\":\\\"application\\\",\\\"icon\\\":\\\"index.php?extern=\\\\\\\/images\\\\\\\/48x48\\\\\\\/apps\\\\\\\/system-file-manager.png\\\"}\",\"name\":\"Home.lnk\",\"virtual\":\"true\"},{\"class\":\"EyeUserFile\",\"type\":\"file\",\"extension\":\"LNK\",\"size\":107,\"permissions\":\"-rw-------\",\"owner\":\"username\",\"group\":\"users\",\"absolutepath\":\"home:\\\/\\\/~username\\\/Desktop\\\/How to use eyeOS.lnk\",\"meta\":{\"owner\":\"username\",\"group\":\"users\",\"permissions\":\"-rw-------\"},\"content\":\"{\\\"app\\\":\\\"howto\\\",\\\"type\\\":\\\"application\\\",\\\"icon\\\":\\\"index.php?extern=\\\\\\\/images\\\\\\\/48x48\\\\\\\/categories\\\\\\\/system-help.png\\\"}\",\"name\":\"How to use eyeOS.lnk\",\"virtual\":\"true\"},{\"class\":\"EyeUserFile\",\"type\":\"file\",\"extension\":\"LNK\",\"size\":111,\"permissions\":\"-rw-------\",\"owner\":\"username\",\"group\":\"users\",\"absolutepath\":\"home:\\\/\\\/~username\\\/Desktop\\\/Welcome.lnk\",\"meta\":{\"owner\":\"username\",\"group\":\"users\",\"permissions\":\"-rw-------\"},\"content\":\"{\\\"app\\\":\\\"welcomepage\\\",\\\"type\\\":\\\"application\\\",\\\"icon\\\":\\\"index.php?extern=\\\\\\\/images\\\\\\\/48x48\\\\\\\/apps\\\\\\\/welcome-manual.png\\\"}\\n\",\"name\":\"Welcome.lnk\",\"virtual\":\"true\"}]}]);"},"__eyeos_specialControlMessage_options":null});