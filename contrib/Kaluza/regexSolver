#!/usr/bin/perl -w
#
# Author : Devdatta Akhawe
#


use File::Spec::Functions qw(rel2abs);
use File::Basename;

#pcre_tohampi.pm needs to be in the same directory as this script
use lib dirname(rel2abs($0));

use pcre_tohampi;
use strict;
die "6 arguments expected" if $#ARGV != 5;


my ($string,$neg,$regex,$id,$length,$bndvar)=@ARGV;

my $TMPPATH=$ENV{"TMPPATH"} || "/tmp";
my $hampipath=$ENV{"HAMPIPATH"} || "$TMPPATH/hampi";
$hampipath=$hampipath."/hampi.sh";

if($length eq "0" and (($neg eq "0") or ($neg eq "2")) ){
  open(OUTFILE,">$TMPPATH/$string") or die "couldn't open $TMPPATH/$string";
  print OUTFILE "\n";
  close(OUTFILE);
  exit;
}


if( $regex =~ m/^(.*?)g([^\/]*)$/){
  $regex=$1.$2;
  $id=0;
}

$regex=~ s/@/\\@/g;
my $reg=eval 'qr'.$regex;


if($length eq "0" and $neg ne "0" and $neg ne "2"){
  my $p=pcre_tohampi->new($reg);
  $p->parse;
  my ($min,$max)=$p->getminmax($id);
  if($min > 0){
    open(OUTFILE,">$TMPPATH/$string") or die "couldn't open $TMPPATH/$string";
    print OUTFILE "\nASSERT(FALSE);\n";
    close(OUTFILE);
  }

  open(BND,">>$TMPPATH/hampiBounds");
  if($id ne 0){
      print BND (sprintf "\n(assert (<= %s %d)) \n",$bndvar,$max) if $max != -1;
      print BND (sprintf "\n(assert (or (>= %s %d) (= %s %d)))\n",$bndvar,$min,$bndvar,0) if $min > 0;
  } else {
      print BND (sprintf "\n(assert (<= %s %d))\n",$bndvar,$max) if $max != -1;
      print BND (sprintf "\n(assert (>= %s %d))\n",$bndvar,$min) if $min > 0;
  }
  close(BND);
  
  exit;
}

die "$hampipath not found" if( ! -e $hampipath);

open FILE,">$TMPPATH/$string.hmp" || die "couldn't open $TMPPATH/$string.hmp";

print FILE "var hampiStringVar : $length ;\n";
print FILE "cfg sigma := [\\000 - \\255];\ncfg Text := (sigma)*;\n\n";

my $p=pcre_tohampi->new($reg);
$p->parse;
my $str=$p->tothehampi();
my ($min,$max)=$p->getminmax($id);
print FILE "\n$str";
print FILE "\n\n";
my $qual="in _flax$id";

if ($neg eq "0"){
  print FILE "cfg Final := Text _flax$id Text;\n";
  $qual="not in Final;";
}
if ($neg eq "2"){
  print FILE "cfg Final := _flax$id ;\n";
  $qual="not in Final;";
}

die "\n\n\n id has to be 0 for negative containment" if($id ne "0" and ($neg eq "0" or $neg eq "2"));

#no need for specific null : length 0 isn't sent to regexSolver
#if($id ne "0"){
# print FILE "cfg Final := _flax$id | ;\n";
# $qual = " in Final;";
#}

print FILE "assert hampiStringVar $qual ;\n\n";



close(FILE);

#open(LOG,">>$TMPPATH/regexSolverLog");
#print LOG "Done with $regex , length $length for $string, min:$min max:$max \n\n";
#close(LOG);

#print "calling Hampi";
system("$hampipath $TMPPATH/$string.hmp 2>&1 > /dev/null | sed 's/bv0/$string/g' > $TMPPATH/$string");
if($neg ne "0" and $neg ne "2"){
open(BND,">>$TMPPATH/hampiBounds");
if($id eq "0"){
print BND (sprintf "\n(assert (<= %s %d))\n",$bndvar,$max) if $max != -1;
print BND (sprintf "\n(assert (>= %s %d))\n",$bndvar,$min) if $min > 0;
}else {
  print BND (sprintf "\n(assert (<= %s %d))\n",$bndvar,$max) if $max != -1;
  print BND (sprintf "\n(assert (or (>= %s %d) (= %s %d)))\n",$bndvar,$min,$bndvar,0) if $min > 0;
}

close(BND);
}
