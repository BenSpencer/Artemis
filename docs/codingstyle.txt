
The QT coding style[1] is followed with the following additions:

1. Member variables

	Member variables (private and public) are prefixed by "m".

2. Slots & Signals

	Slots are prefixed by "sl" and signals "sig"

3. Implicit or explicit this pointers

	Implicit this pointers are used when possible.

	void A::f()
	{
		this->mCount = 0; // wrong
		mCount = 0; // correct
	}

4. Memory management

	Three strategies are allowed for memory management:

	a. Value-based [2]
		These are used in a functional style e.g. member functions does not change state but returns new values.

	b. Heap-based [2]
		Necessary for polymorphism. Classic C++ style objects with mutating state.

		Always use either a smart pointer (QSharedPointer) or QObjects to manage objects on the
		heap. Smart pointers are prefered over QObjects if other QObject related features (such
		as signals) is not required.

5. If statements and brackets

	Contrary to the QT coding style, brackets are always used with if statements even if the body of the if statement only consist of a single line. This is to improve robustness.

6. Whitespace for pointers and references

	// correct
	int* value;
	void* A::func(char* c) { ... 

	// wrong
	int *value;
	void *A::func(char *c) { ...


[1] http://qt-project.org/wiki/Qt_Coding_Style
[2] http://qt-project.org/wiki/ValueBasedAndPointerBasedTypes