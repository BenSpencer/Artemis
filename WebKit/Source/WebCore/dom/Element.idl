/*
 * Copyright (C) 2006, 2007, 2009 Apple Inc. All rights reserved.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

module core {

    interface [
        JSGenerateToNativeObject,
        JSInlineGetOwnPropertySlot
    ] Element : Node {

        // DOM Level 1 Core

        readonly attribute [TreatReturnedNullStringAs=Null, SymbolicObjectStringProperty] DOMString tagName;

        [TreatReturnedNullStringAs=Null, SymbolicObjectStringProperty] DOMString getAttribute(in [Optional=DefaultIsUndefined] DOMString name);
        [ObjCLegacyUnnamedParameters, WarningIfSymbolic] void setAttribute(in [Optional=DefaultIsUndefined] DOMString name,
                                         in [Optional=DefaultIsUndefined] DOMString value)
            raises(DOMException);
        [WarningIfSymbolic] void removeAttribute(in [Optional=DefaultIsUndefined] DOMString name);
        [WarningIfSymbolic] Attr getAttributeNode(in [Optional=DefaultIsUndefined] DOMString name);
        [WarningIfSymbolic] Attr setAttributeNode(in [Optional=DefaultIsUndefined] Attr newAttr)
            raises(DOMException);
        [WarningIfSymbolic] Attr removeAttributeNode(in [Optional=DefaultIsUndefined] Attr oldAttr)
            raises(DOMException);
        [WarningIfSymbolic] NodeList getElementsByTagName(in [Optional=DefaultIsUndefined] DOMString name);

        // DOM Level 2 Core

        [ObjCLegacyUnnamedParameters, WarningIfSymbolic] DOMString getAttributeNS(in [TreatNullAs=NullString,Optional=DefaultIsUndefined] DOMString namespaceURI,
                                                in [Optional=DefaultIsUndefined] DOMString localName);
        [ObjCLegacyUnnamedParameters, WarningIfSymbolic] void setAttributeNS(in [TreatNullAs=NullString,Optional=DefaultIsUndefined] DOMString namespaceURI,
                                           in [Optional=DefaultIsUndefined] DOMString qualifiedName, 
                                           in [Optional=DefaultIsUndefined] DOMString value)
            raises(DOMException);
        [ObjCLegacyUnnamedParameters, WarningIfSymbolic] void removeAttributeNS(in [TreatNullAs=NullString] DOMString namespaceURI,
                                              in DOMString localName);
        [ObjCLegacyUnnamedParameters, WarningIfSymbolic] NodeList getElementsByTagNameNS(in [TreatNullAs=NullString,Optional=DefaultIsUndefined] DOMString namespaceURI,
                                                       in [Optional=DefaultIsUndefined] DOMString localName);
        [ObjCLegacyUnnamedParameters, WarningIfSymbolic] Attr getAttributeNodeNS(in [TreatNullAs=NullString,Optional=DefaultIsUndefined] DOMString namespaceURI,
                                               in [Optional=DefaultIsUndefined] DOMString localName);
        [WarningIfSymbolic] Attr setAttributeNodeNS(in [Optional=DefaultIsUndefined] Attr newAttr)
            raises(DOMException);
        [WarningIfSymbolic] boolean hasAttribute(in DOMString name);
        [ObjCLegacyUnnamedParameters, WarningIfSymbolic] boolean hasAttributeNS(in [TreatNullAs=NullString,Optional=DefaultIsUndefined] DOMString namespaceURI,
                                              in [Optional=DefaultIsUndefined] DOMString localName);

        [WarningIfSymbolic] readonly attribute CSSStyleDeclaration style;

        // Common extensions

        [WarningIfSymbolic] readonly attribute long offsetLeft;
        [WarningIfSymbolic] readonly attribute long offsetTop;
        [WarningIfSymbolic] readonly attribute long offsetWidth;
        [WarningIfSymbolic] readonly attribute long offsetHeight;
        [WarningIfSymbolic] readonly attribute Element offsetParent;
        [WarningIfSymbolic] readonly attribute long clientLeft;
        [WarningIfSymbolic] readonly attribute long clientTop;
        [WarningIfSymbolic] readonly attribute long clientWidth;
        [WarningIfSymbolic] readonly attribute long clientHeight;
        [WarningIfSymbolic]         attribute long scrollLeft;
        [WarningIfSymbolic]         attribute long scrollTop;
        [WarningIfSymbolic] readonly attribute long scrollWidth;
        [WarningIfSymbolic] readonly attribute long scrollHeight;

        [WarningIfSymbolic] void focus();
        [WarningIfSymbolic] void blur();
        [WarningIfSymbolic] void scrollIntoView(in [Optional] boolean alignWithTop);

        // WebKit extensions

        [WarningIfSymbolic] void scrollIntoViewIfNeeded(in [Optional] boolean centerIfNeeded);
        [WarningIfSymbolic] void scrollByLines(in [Optional=DefaultIsUndefined] long lines);
        [WarningIfSymbolic] void scrollByPages(in [Optional=DefaultIsUndefined] long pages);

#if defined(ENABLE_ANIMATION_API) && ENABLE_ANIMATION_API
        [WarningIfSymbolic] WebKitAnimationList webkitGetAnimations();
#endif

        // HTML 5
        [WarningIfSymbolic] NodeList getElementsByClassName(in [Optional=DefaultIsUndefined] DOMString name);

#if defined(LANGUAGE_JAVASCRIPT) && LANGUAGE_JAVASCRIPT
        [WarningIfSymbolic] readonly attribute DOMStringMap dataset;
#endif

        // NodeSelector - Selector API
        [WarningIfSymbolic] Element querySelector(in DOMString selectors)
            raises(DOMException);
        [WarningIfSymbolic] NodeList querySelectorAll(in DOMString selectors)
            raises(DOMException);

        // WebKit extension, pending specification.
        [WarningIfSymbolic] boolean webkitMatchesSelector(in [Optional=DefaultIsUndefined] DOMString selectors)
            raises(DOMException);

        // ElementTraversal API
        [WarningIfSymbolic] readonly attribute Element firstElementChild;
        [WarningIfSymbolic] readonly attribute Element lastElementChild;
        [WarningIfSymbolic] readonly attribute Element previousElementSibling;
        [WarningIfSymbolic] readonly attribute Element nextElementSibling;
        [WarningIfSymbolic] readonly attribute unsigned long childElementCount;

#if defined(LANGUAGE_JAVASCRIPT) && LANGUAGE_JAVASCRIPT
        // CSSOM View Module API
        [WarningIfSymbolic] ClientRectList getClientRects();
        [WarningIfSymbolic] ClientRect getBoundingClientRect();
#endif

#if defined(LANGUAGE_OBJECTIVE_C) && LANGUAGE_OBJECTIVE_C
        // Objective-C extensions
        [WarningIfSymbolic] readonly attribute DOMString innerText;
#endif

#if defined(ENABLE_FULLSCREEN_API) && ENABLE_FULLSCREEN_API
        // Mozilla version
        [WarningIfSymbolic] const unsigned short ALLOW_KEYBOARD_INPUT = 1;
        [V8EnabledAtRuntime, WarningIfSymbolic] void webkitRequestFullScreen(in [Optional=DefaultIsUndefined] unsigned short flags);

        // W3C version
        [V8EnabledAtRuntime, WarningIfSymbolic] void webkitRequestFullscreen();
#endif

        // CSS Regions API
        [WarningIfSymbolic] readonly attribute DOMString webkitRegionOverflow;

#if !defined(LANGUAGE_OBJECTIVE_C) || !LANGUAGE_OBJECTIVE_C
        // Event handler DOM attributes
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onabort;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onblur;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onchange;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onclick;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener oncontextmenu;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener ondblclick;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener ondrag;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener ondragend;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener ondragenter;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener ondragleave;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener ondragover;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener ondragstart;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener ondrop;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onerror;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onfocus;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener oninput;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener oninvalid;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onkeydown;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onkeypress;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onkeyup;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onload;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onmousedown;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onmousemove;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onmouseout;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onmouseover;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onmouseup;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onmousewheel;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onscroll;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onselect;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onsubmit;

        // attribute [NotEnumerable] EventListener oncanplay;
        // attribute [NotEnumerable] EventListener oncanplaythrough;
        // attribute [NotEnumerable] EventListener ondurationchange;
        // attribute [NotEnumerable] EventListener onemptied;
        // attribute [NotEnumerable] EventListener onended;
        // attribute [NotEnumerable] EventListener onloadeddata;
        // attribute [NotEnumerable] EventListener onloadedmetadata;
        // attribute [NotEnumerable] EventListener onloadstart;
        // attribute [NotEnumerable] EventListener onpause;
        // attribute [NotEnumerable] EventListener onplay;
        // attribute [NotEnumerable] EventListener onplaying;
        // attribute [NotEnumerable] EventListener onprogress;
        // attribute [NotEnumerable] EventListener onratechange;
        // attribute [NotEnumerable] EventListener onreadystatechange;
        // attribute [NotEnumerable] EventListener onseeked;
        // attribute [NotEnumerable] EventListener onseeking;
        // attribute [NotEnumerable] EventListener onshow;
        // attribute [NotEnumerable] EventListener onstalled;
        // attribute [NotEnumerable] EventListener onsuspend;
        // attribute [NotEnumerable] EventListener ontimeupdate;
        // attribute [NotEnumerable] EventListener onvolumechange;
        // attribute [NotEnumerable] EventListener onwaiting;

        // WebKit extensions
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onbeforecut;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener oncut;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onbeforecopy;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener oncopy;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onbeforepaste;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onpaste;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onreset;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onsearch;
        attribute [NotEnumerable, WarningIfSymbolic] EventListener onselectstart;
        attribute [NotEnumerable,WarningIfSymbolic, Conditional=TOUCH_EVENTS,V8EnabledAtRuntime] EventListener ontouchstart;
        attribute [NotEnumerable,WarningIfSymbolic, Conditional=TOUCH_EVENTS,V8EnabledAtRuntime] EventListener ontouchmove;
        attribute [NotEnumerable,WarningIfSymbolic, Conditional=TOUCH_EVENTS,V8EnabledAtRuntime] EventListener ontouchend;
        attribute [NotEnumerable,WarningIfSymbolic, Conditional=TOUCH_EVENTS,V8EnabledAtRuntime] EventListener ontouchcancel;
        attribute [NotEnumerable,WarningIfSymbolic, Conditional=FULLSCREEN_API] EventListener onwebkitfullscreenchange;
        attribute [NotEnumerable,WarningIfSymbolic, Conditional=FULLSCREEN_API] EventListener onwebkitfullscreenerror;
#endif
    };

}
