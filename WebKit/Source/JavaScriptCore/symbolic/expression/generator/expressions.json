[
	{
		"ID": "Expression",
		"type": "interface",
		"parent": null
	},
		



	{
		"ID": "IntegerExpression",
		"type": "interface",
		"parent": "Expression"
	},

	{
		"ID": "SymbolicInteger",
		"type": "expression",
		"parent": "IntegerExpression",
		"fields": [
			["std::string", "identifier"]
		]
	},

	{
		"ID": "ConstantInteger",
		"type": "expression",
		"parent": "IntegerExpression",
		"fields": [
			["double", "value"]
		]
	},

	{
		"ID": "IntegerBinaryOperation",
		"type": "expression",
		"parent": "IntegerExpression",
		"fields": [
			["IntegerExpression*", "lhs"],
			["IntegerBinaryOp", "op"],
			["IntegerExpression*", "rhs"]
		],
		"enums": [
			{
				"ID": "IntegerBinaryOp",
				"values": ["INT_ADD", "INT_SUBTRACT", "INT_MULTIPLY", "INT_DIVIDE", "INT_EQ","INT_NEQ", "INT_LEQ", "INT_LT", "INT_GEQ", "INT_GT", "INT_MODULO","INT_SNEQ", "INT_SEQ"],
				"names": ["+", "-", "*", "/", "==", "!=", "<=", "<", ">=", ">", "%", "!==", "==="]
			}
		]
	},

	{
		"ID": "IntegerCoercion",
		"type": "expression",
		"parent": "IntegerExpression",
		"fields": [
			["Expression*", "expression"]
		]
	},


	{
		"ID": "StringExpression",
		"type": "interface",
		"parent": "Expression"
	},

	{
		"ID": "SymbolicString",
		"type": "expression",
		"parent": "StringExpression",
		"fields": [
			["std::string", "identifier"]
		]
	},

	{
		"ID": "ConstantString",
		"type": "expression",
		"parent": "StringExpression",
		"fields": [
			["JSC::UString", "value"]
		]
	},

	{
		"ID": "StringBinaryOperation",
		"type": "expression",
		"parent": "StringExpression",
		"fields": [
			["StringExpression*", "lhs"],
			["StringBinaryOp", "op"],
			["StringExpression*", "rhs"]
		],
		"enums": [
			{
				"ID": "StringBinaryOp",
				"values": ["CONCAT", "STRING_EQ", "STRING_NEQ", "STRING_LT", "STRING_LEQ", "STRING_GT", "STRING_GEQ", "STRING_SEQ", "STRING_SNEQ"],
				"names": ["+", "==", "!=", "<", "<=", ">", ">=", "===", "!=="]
			}
		]
	},

	{
		"ID": "StringCoercion",
		"type": "expression",
		"parent": "StringExpression",
		"fields": [
			["Expression*", "expression"]
		]
	},


	{
		"ID": "StringReplace",
		"type": "expression",
		"parent": "StringExpression",
		"fields": [
			["StringExpression*", "source"],
			["JSC::UString", "pattern"],
			["JSC::UString", "replace"]
		]
	},

	{
		"ID": "StringRegexReplace",
		"type": "expression",
		"parent": "StringExpression",
		"fields": [
			["StringExpression*", "source"],
			["JSC::UString", "regexpattern"],
			["JSC::UString", "replace"]
		]
	},


	{
		"ID": "BooleanExpression",
		"type": "interface",
		"parent": "Expression"
	},
	
	{
		"ID": "SymbolicBoolean",
		"type": "expression",
		"parent": "BooleanExpression",
		"fields": [
			["std::string", "identifier"]
		]
	},

	{
		"ID": "ConstantBoolean",
		"type": "expression",
		"parent": "BooleanExpression",
		"fields": [
			["bool", "value"]
		]
	},

	{
		"ID": "BooleanCoercion",
		"type": "expression",
		"parent": "BooleanExpression",
		"fields": [
			["Expression*", "expression"]
		]
	},

	{
		"ID": "BooleanBinaryOperation",
		"type": "expression",
		"parent": "BooleanExpression",
		"fields": [
			["BooleanExpression*", "lhs"],
			["BooleanBinaryOp", "op"],
			["BooleanExpression*", "rhs"]
		],
		"enums": [
			{
				"ID": "BooleanBinaryOp",
				"values": ["BOOL_EQ", "BOOL_NEQ","BOOL_SEQ", "BOOL_SNEQ"],
				"names": ["==", "!=", "===", "!=="]
			}
		]
	}
			
]